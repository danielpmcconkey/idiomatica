// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Model.DAL;

#nullable disable

namespace IdiomaticaWeb.Migrations
{
    [DbContext(typeof(IdiomaticaContext))]
    [Migration("20240413192936_NewRelationships")]
    partial class NewRelationships
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Model.Book", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<string>("AudioFilename")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("SourceURI")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.ToTable("Book", "Idioma");
                });

            modelBuilder.Entity("Model.BookStat", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("Key")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("BookId", "Key");

                    b.ToTable("BookStat", "Idioma");
                });

            modelBuilder.Entity("Model.BookUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AudioBookmarks")
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<float>("AudioCurrentPos")
                        .HasColumnType("real");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("CurrentPageID")
                        .HasColumnType("int");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("LanguageUserId");

                    b.ToTable("BookUser", "Idioma");
                });

            modelBuilder.Entity("Model.BookUserStat", b =>
                {
                    b.Property<int?>("BookUserId")
                        .HasColumnType("int");

                    b.Property<int>("Key")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("BookUserId", "Key");

                    b.ToTable("BookUserStat", "Idioma");
                });

            modelBuilder.Entity("Model.Language", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<string>("CharacterSubstitutions")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Dict1URI")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Dict2URI")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ExceptionsSplitSentences")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("GoogleTranslateURI")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ParserType")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("RegexpSplitSentences")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("RegexpWordCharacters")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("RemoveSpaces")
                        .HasColumnType("bit");

                    b.Property<bool>("RightToLeft")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowRomanization")
                        .HasColumnType("bit");

                    b.Property<bool>("SplitEachChar")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Language", "Idioma");
                });

            modelBuilder.Entity("Model.LanguageUser", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int>("TotalWordsRead")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("LanguageUser", "Idioma");
                });

            modelBuilder.Entity("Model.Page", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("Ordinal")
                        .HasColumnType("int");

                    b.Property<string>("OriginalText")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("Page", "Idioma");
                });

            modelBuilder.Entity("Model.PageUser", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<int>("BookUserId")
                        .HasColumnType("int");

                    b.Property<int>("PageId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReadDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BookUserId");

                    b.HasIndex("PageId");

                    b.ToTable("PageUser", "Idioma");
                });

            modelBuilder.Entity("Model.Paragraph", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<int>("Ordinal")
                        .HasColumnType("int");

                    b.Property<int>("PageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PageId");

                    b.ToTable("Paragraph", "Idioma");
                });

            modelBuilder.Entity("Model.Sentence", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<int>("Ordinal")
                        .HasColumnType("int");

                    b.Property<int>("ParagraphId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ParagraphId");

                    b.ToTable("Sentence", "Idioma");
                });

            modelBuilder.Entity("Model.Token", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<string>("Display")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("Ordinal")
                        .HasColumnType("int");

                    b.Property<int>("SentenceId")
                        .HasColumnType("int");

                    b.Property<int>("WordId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SentenceId");

                    b.HasIndex("WordId");

                    b.ToTable("Token", "Idioma");
                });

            modelBuilder.Entity("Model.User", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("User", "Idioma");
                });

            modelBuilder.Entity("Model.UserSetting", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("Key")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("UserId", "Key");

                    b.ToTable("UserSetting", "Idioma");
                });

            modelBuilder.Entity("Model.Word", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Romanization")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("TextLowerCase")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("TokenCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId", "TextLowerCase")
                        .IsUnique();

                    b.ToTable("Word", "Idioma");
                });

            modelBuilder.Entity("Model.WordUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("LanguageUserId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("StatusChanged")
                        .HasColumnType("datetime2");

                    b.Property<string>("Translation")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("WordId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LanguageUserId");

                    b.HasIndex("WordId");

                    b.ToTable("WordUser", "Idioma");
                });

            modelBuilder.Entity("Model.Book", b =>
                {
                    b.HasOne("Model.Language", "Language")
                        .WithMany("Books")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Model.BookStat", b =>
                {
                    b.HasOne("Model.Book", "Book")
                        .WithMany("BookStats")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("Model.BookUser", b =>
                {
                    b.HasOne("Model.Book", "Book")
                        .WithMany("BookUsers")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.LanguageUser", "LanguageUser")
                        .WithMany("BookUsers")
                        .HasForeignKey("LanguageUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("LanguageUser");
                });

            modelBuilder.Entity("Model.BookUserStat", b =>
                {
                    b.HasOne("Model.BookUser", "BookUser")
                        .WithMany("BookUserStats")
                        .HasForeignKey("BookUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookUser");
                });

            modelBuilder.Entity("Model.LanguageUser", b =>
                {
                    b.HasOne("Model.Language", "Language")
                        .WithMany("LanguageUsers")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.User", "User")
                        .WithMany("LanguageUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Model.Page", b =>
                {
                    b.HasOne("Model.Book", "Book")
                        .WithMany("Pages")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("Model.PageUser", b =>
                {
                    b.HasOne("Model.BookUser", "BookUser")
                        .WithMany("PageUsers")
                        .HasForeignKey("BookUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Model.Page", "Page")
                        .WithMany("PageUsers")
                        .HasForeignKey("PageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookUser");

                    b.Navigation("Page");
                });

            modelBuilder.Entity("Model.Paragraph", b =>
                {
                    b.HasOne("Model.Page", "Page")
                        .WithMany("Paragraphs")
                        .HasForeignKey("PageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Page");
                });

            modelBuilder.Entity("Model.Sentence", b =>
                {
                    b.HasOne("Model.Paragraph", "Paragraph")
                        .WithMany("Sentences")
                        .HasForeignKey("ParagraphId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Paragraph");
                });

            modelBuilder.Entity("Model.Token", b =>
                {
                    b.HasOne("Model.Sentence", "Sentence")
                        .WithMany("Tokens")
                        .HasForeignKey("SentenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Word", "Word")
                        .WithMany("Tokens")
                        .HasForeignKey("WordId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Sentence");

                    b.Navigation("Word");
                });

            modelBuilder.Entity("Model.UserSetting", b =>
                {
                    b.HasOne("Model.User", "User")
                        .WithMany("UserSettings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Model.Word", b =>
                {
                    b.HasOne("Model.Language", "Language")
                        .WithMany("Words")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Model.WordUser", b =>
                {
                    b.HasOne("Model.LanguageUser", "LanguageUser")
                        .WithMany("WordUsers")
                        .HasForeignKey("LanguageUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Word", "Word")
                        .WithMany("WordUsers")
                        .HasForeignKey("WordId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("LanguageUser");

                    b.Navigation("Word");
                });

            modelBuilder.Entity("Model.Book", b =>
                {
                    b.Navigation("BookStats");

                    b.Navigation("BookUsers");

                    b.Navigation("Pages");
                });

            modelBuilder.Entity("Model.BookUser", b =>
                {
                    b.Navigation("BookUserStats");

                    b.Navigation("PageUsers");
                });

            modelBuilder.Entity("Model.Language", b =>
                {
                    b.Navigation("Books");

                    b.Navigation("LanguageUsers");

                    b.Navigation("Words");
                });

            modelBuilder.Entity("Model.LanguageUser", b =>
                {
                    b.Navigation("BookUsers");

                    b.Navigation("WordUsers");
                });

            modelBuilder.Entity("Model.Page", b =>
                {
                    b.Navigation("PageUsers");

                    b.Navigation("Paragraphs");
                });

            modelBuilder.Entity("Model.Paragraph", b =>
                {
                    b.Navigation("Sentences");
                });

            modelBuilder.Entity("Model.Sentence", b =>
                {
                    b.Navigation("Tokens");
                });

            modelBuilder.Entity("Model.User", b =>
                {
                    b.Navigation("LanguageUsers");

                    b.Navigation("UserSettings");
                });

            modelBuilder.Entity("Model.Word", b =>
                {
                    b.Navigation("Tokens");

                    b.Navigation("WordUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
