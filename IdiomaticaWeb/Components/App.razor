<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="/" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65" crossorigin="anonymous" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.3/font/bootstrap-icons.css" rel="stylesheet" />
    <link href="_content/Blazor.Bootstrap/blazor.bootstrap.css" rel="stylesheet" />
    <link rel="stylesheet" href="app.css" />
    <link rel="stylesheet" href="IdiomaticaWeb.styles.css" />
    <link rel="icon" type="image/png" href="favicon.png" />
    <HeadOutlet @rendermode="RenderModeForPage" />
</head>

<body>
    <Routes @rendermode="RenderModeForPage" />
    <script src="_framework/blazor.web.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-kenU1KFdBIe4zVF0s0G1M5b4hcpxyD9F7jL+jjXkk+Q2h455rYXK/7HAuoJl+0I4" crossorigin="anonymous"></script>
    <!-- Add chart.js reference if chart components are used in your application. -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/4.0.1/chart.umd.js" integrity="sha512-gQhCDsnnnUfaRzD8k1L5llCCV6O9HN09zClIzzeJ8OJ9MpGmIlCxm+pdCkqTwqJ4JcjbojFr79rl2F1mzcoLMQ==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <!-- Add chartjs-plugin-datalabels.min.js reference if chart components with data label feature is used in your application. -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/chartjs-plugin-datalabels/2.2.0/chartjs-plugin-datalabels.min.js" integrity="sha512-JPcRR8yFa8mmCsfrw4TNte1ZvF1e3+1SdGMslZvmrzDYxS69J7J49vkFL8u6u8PlPJK+H3voElBtUCzaXj+6ig==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script src="https://cdn.jsdelivr.net/npm/sortablejs@latest/Sortable.min.js"></script>
    <script src="_content/Blazor.Bootstrap/blazor.bootstrap.js"></script>
    <script type="text/javascript">

        // this is used for the LargeVolumeTextArea control only
        
        function splitLargeVolumeTextArea(elementId, chunkSize)  {
            /* 
                WARNING do not edit return strings here without also editing
                them in the LargeVolumeTextArea.razor file
            */
            const textValue = document.getElementById(elementId).value;
            const ppSplitResults = document.getElementById("_ppSplitResults" + elementId);
            if (textValue.length == 0) ppSplitResults.value = "textValue is empty";
            if (textValue.length > chunkSize * 10) ppSplitResults.value = "textValue is too large";
            const _ita0 = document.getElementById("_ita0" + elementId);
            const _ita1 = document.getElementById("_ita1" + elementId);
            const _ita2 = document.getElementById("_ita2" + elementId);
            const _ita3 = document.getElementById("_ita3" + elementId);
            const _ita4 = document.getElementById("_ita4" + elementId);
            const _ita5 = document.getElementById("_ita5" + elementId);
            const _ita6 = document.getElementById("_ita6" + elementId);
            const _ita7 = document.getElementById("_ita7" + elementId);
            const _ita8 = document.getElementById("_ita8" + elementId);
            const _ita9 = document.getElementById("_ita9" + elementId);

            const pattern = "([.\\s\\S]{1," + chunkSize + "})";
            var re = new RegExp(pattern, 'g');
            
            const chunks = textValue.match(re);
            if (chunks == null) ppSplitResults.value = "error parsing regex";
            var numChunks = chunks.length;
            
            _ita0.value = chunks[0];
            _ita1.value = (numChunks >= 2) ? chunks[1] : "";
            _ita2.value = (numChunks >= 3) ? chunks[2] : "";
            _ita3.value = (numChunks >= 4) ? chunks[3] : "";
            _ita4.value = (numChunks >= 5) ? chunks[4] : "";
            _ita5.value = (numChunks >= 6) ? chunks[5] : "";
            _ita6.value = (numChunks >= 7) ? chunks[6] : "";
            _ita7.value = (numChunks >= 8) ? chunks[7] : "";
            _ita8.value = (numChunks >= 9) ? chunks[8] : "";
            _ita9.value = (numChunks == 10) ? chunks[9] : "";
            
            if (numChunks > 10) ppSplitResults.value = "textValue is too large";
            ppSplitResults.value = "success";
        }
        // this is used for the LargeVolumeTextArea control only
        window.getText = (elem) => {
            const textValue = elem.value;
            const utf8Encoder = new TextEncoder();
            const encodedTextValue = utf8Encoder.encode(textValue);
            return encodedTextValue;
        };
    </script>
</body>

</html>

@code {
    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    private IComponentRenderMode? RenderModeForPage => HttpContext.Request.Path.StartsWithSegments("/Account")
        ? null
        : InteractiveServer;
}