@page "/FeatureTest"
@rendermode InteractiveServer
@inject UserService UserService;
@inject IDbContextFactory<IdiomaticaContext> DbContextFactory;

<h3>FeatureTest</h3>

<div>
    
    
</div>

@code {
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            

            // var context = DbContextFactory.CreateDbContext();
            // BookUser? bookUser = context.BookUsers.Where(x => x.LanguageUserId == 1).FirstOrDefault();
            // if (bookUser is null || bookUser.LanguageUserId is null) return;
            // var languageUser = await DataCache.LanguageUserByIdReadAsync(
            //          (int)bookUser.LanguageUserId, context);
            // bookUser.LanguageUser = languageUser;
            // //bookUser = _nullHandler.ThrowIfNull<BookUser>(bookUser);
            // //int languageUserIdDenulled = _nullHandler.ThrowIfNullOrZeroInt(bookUser.LanguageUserId);
            // // if (bookUser.LanguageUser == null)
            // // {
            // //     // pull it from the db
            // //     bookUser.LanguageUser = await DataCache.LanguageUserByIdReadAsync(
            // //         (int)bookUser.LanguageUserId, context);
            // // }
        }
        catch (Exception ex)
        {
            var burp = ex.ToString();
        }
    }

    private Modal modal;

    private async Task OnShowModalClick()
    {
        await modal?.ShowAsync();
    }

    private async Task OnHideModalClick()
    {
        await modal?.HideAsync();
    }
}
