@page "/FeatureTest"
@rendermode InteractiveServer
@inject UserService UserService;
@inject IDbContextFactory<IdiomaticaContext> DbContextFactory;

<h3>FeatureTest</h3>

<div>
    @* @if (isWriting)
    {
        <Button Color="ButtonColor.Primary" Loading="true" LoadingText="@writingText" />
    }
    @if (_isLoading)
    {
        <Button Color="ButtonColor.Primary" Loading="true" LoadingText="@UserService.GetUILabel("loading")" />
    }
    else
    {
        <Button Color="ButtonColor.Warning"
                @onclick="OnClick100">
            1 - 100
        </Button>
        <Button Color="ButtonColor.Warning"
                @onclick="OnClick200">
            100 - 200
        </Button>
        <Button Color="ButtonColor.Warning"
                @onclick="OnClick300">
            200 - 300
        </Button>
    } *@

    
</div>

@code {
    bool _isLoading = false;
    bool isDataInit = false;
    bool isWriting = false;
    int writingCount = 0;
    string writingText { get { return $"writing...{writingCount}"; } }

    // Logic.deleteme deleteme = new deleteme();

    // private async Task OnClick100()
    // {
    //     await Task.Run(() =>
    //     {
    //         _isLoading = true;
    //         var context = DbContextFactory.CreateDbContext();
    //         deleteme.write100(context);
    //         _isLoading = false;
    //     });

    // }
    // private async Task OnClick200()
    // {
    //     await Task.Run(() =>
    //     {
    //         _isLoading = true;
    //         var context = DbContextFactory.CreateDbContext();
    //         deleteme.write200(context);
    //         _isLoading = false;
    //     });
    // }
    // private async Task OnClick300()
    // {
    //     await Task.Run(() =>
    //     {
    //         _isLoading = true;
    //         var context = DbContextFactory.CreateDbContext();
    //         deleteme.write300(context);
    //         _isLoading = false;
    //     });
    // }
    // private async Task Spin()
    // {
    //     while (true)
    //     {
    //         isWriting = deleteme.isWriting;
    //         await Task.Delay(3000);

    //         if (isWriting) writingCount++;

    //         StateHasChanged();
    //     }
    // }

    protected override async Task OnInitializedAsync()
    {
        if (isDataInit) return;
        try
        {
            // Spin();

            // isDataInit = true;

            
            //ErrorHandler.LogAndThrow();

            // var context = DbContextFactory.CreateDbContext();
            // BookUser? bookUser = context.BookUsers.Where(x => x.LanguageUserId == 1).FirstOrDefault();
            // if (bookUser is null || bookUser.LanguageUserId is null) return;
            // var languageUser = await DataCache.LanguageUserByIdReadAsync(
            //          (int)bookUser.LanguageUserId, context);
            // bookUser.LanguageUser = languageUser;
            // //bookUser = _nullHandler.ThrowIfNull<BookUser>(bookUser);
            // //int languageUserIdDenulled = _nullHandler.ThrowIfNullOrZeroInt(bookUser.LanguageUserId);
            // // if (bookUser.LanguageUser == null)
            // // {
            // //     // pull it from the db
            // //     bookUser.LanguageUser = await DataCache.LanguageUserByIdReadAsync(
            // //         (int)bookUser.LanguageUserId, context);
            // // }
        }
        catch (Exception ex)
        {
            var burp = ex.ToString();
        }
    }

    private Modal modal;

    private async Task OnShowModalClick()
    {
        await modal?.ShowAsync();
    }

    private async Task OnHideModalClick()
    {
        await modal?.HideAsync();
    }
}
