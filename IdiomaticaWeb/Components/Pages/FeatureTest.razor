@page "/FeatureTest"
@rendermode InteractiveServer
@inject LoginService UserService;
@inject IDbContextFactory<IdiomaticaContext> DbContextFactory;
@using Logic.Services.API

<h3>FeatureTest</h3>

<div>
    @if (_isLoading)
    {
        <Button Color="ButtonColor.Primary" Loading="true" LoadingText="@UserService.GetUILabel("loading")" />
    }
    else
    {
        <Button Color="ButtonColor.Warning"
                @onclick="OnClickGo">
            Go
        </Button>
    }
    <p>@message</p>

    
</div>

@code {
    bool _isLoading = false;
    bool isDataInit = false;
    string message = "burp";


    // Logic.deleteme deleteme = new deleteme();

    private async Task OnClickGo()
    {
        try
        {
            User? loggedInUser = await UserService.GetLoggedInUserAsync(DbContextFactory);
            if (loggedInUser is null) return;
            var languageUsers = await LanguageUserApi.LanguageUsersAndLanguageGetByUserIdAsync(
                DbContextFactory, loggedInUser.Id);
            if (languageUsers is null) return;
            foreach (var lu in languageUsers)
            {
                await DataCache.WordUserProgressTotalsCreateForLanguageUserIdAsync(
                    lu.Id, DbContextFactory);
                message = $"written for {lu.Id}";
            }
        }

        catch (Exception ex)
        {
            var burp = ex.ToString();
        }

    }
}
