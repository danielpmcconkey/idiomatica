@using Model
@using Logic
@using Model.DAL
@using System.Globalization
@using Logic.UILabels
@using System.Linq.Expressions;
@using Microsoft.EntityFrameworkCore;

@page "/read/{id}"
@rendermode InteractiveServer
@inject IDbContextFactory<IdiomaticaContext> DbFactory

<style>
    span.statusUNKNOWN {
        background-color: #ed6297ff;
        color: #ffffff;
        font-weight:bold;
    }

    span.statusNEW1 {
        background-color: #ed6297ff;
        color: #ffffff;
        font-weight: bold;
    }

    span.statusNEW2 {
        background-color: #3a8b89;
        color: #032120;
        font-weight: bold;
    }

    span.statusLEARNING3 {
        background-color: #6ba8a7;
        color: #032120;
        font-weight: bold;
    }

    span.statusLEARNING4 {
        background-color: #9dc5c4;
        color: #032120;
        font-weight: bold;
    }

    span.statusLEARNED {
        background-color: #cee2e2;
        color: #032120;
        text-decoration: dotted;
    }

    span.statusWELLKNOWN {
        background-color: white;
        color: black;
    }

    span.statusIGNORED {
        background-color: white;
        color: black;
    }

    .readToken {
        margin-right: .25em;
        margin-left: .25em;
        padding: .25em;
        display: inline;
    }
    .readParagraph {
        text-indent: 2em;
        margin-top: 1em;
    }

    .dissappear { display:none; }
    
    
</style>

@if(_isError)
{
    <PageTitle>@_uiLabels.GetLabel("error")</PageTitle>
    <h1>@_uiLabels.GetLabel("error"):  @_errorMessage</h1>
}
else if(_book is null)
{
	<PageTitle>@_uiLabels.GetLabel("loading")</PageTitle>
	<h1>@_uiLabels.GetLabel("loading")</h1>
}
else
{
    <PageTitle>@_book.Title</PageTitle>
    <h1>@_book.Title</h1>
}
@if(_currentPage is null)
{
	<p>
		@_uiLabels.GetLabel("loading")
	</p>
}
else
{
    <p>Page @_currentPage.Ordinal</p>
    <button type="button" class="btn btn-primary" @onclick="@(e => MovePage(_currentPage.Ordinal - 1))">
        @_uiLabels.GetLabel("btnPreviousPage")
    </button>
    <button type="button" class="btn btn-primary" @onclick="@(e => MovePage(_currentPage.Ordinal + 1))">
        @_uiLabels.GetLabel("btnNextPage")
    </button>

    @* todo: split out paragraph and sentence into their own razor elements *@
    @foreach (var paragraph in _paragraphs.OrderBy(x => x.Ordinal))
    {
		<p class="readParagraph">
			@foreach(var sentence in paragraph.Sentences.OrderBy(x => x.Ordinal))
            {
                foreach (var token in GetSentenceTokens(sentence).OrderBy(x => x.Ordinal))
                {
                    <span class="readToken @GetTokenClass(token)" data-toggle="tooltip" data-placement="top" title="Tooltip on top">@token.Display</span>
                }
            }
        </p>
    }
    <p>Page @_currentPage.Ordinal</p>
    <button type="button" class="btn btn-primary" @onclick="@(e => MovePage(_currentPage.Ordinal - 1))">
        @_uiLabels.GetLabel("btnPreviousPage")
    </button>
    <button type="button" class="btn btn-primary" @onclick="@(e => MovePage(_currentPage.Ordinal + 1))">
        @_uiLabels.GetLabel("btnNextPage")
    </button>

    

}

@code {
    [Parameter]
    public string Id { get; set; }
    private bool _isError = false;
    private string _errorMessage = "";
    private UILabels _uiLabels = UILabelFactory.GetUILabels(UILanguage.ENG_US); // todo: create a shared UILabels

    private Book? _book;
    private Page? _currentPage;
    private Language? _language;
    private List<Paragraph> _paragraphs;
    private Dictionary<string, Word> _allWordsInLanguage;

    protected override void OnInitialized()
    {
        // todo: don't load the entire book in at the beginning. Just the current page
        _book = FetchBook();
        if (_book is null) return;
        _language = _book.LanguageUser.Language;

        _currentPage = FetchPageById(_book.CurrentPageID);
        if (_currentPage is null) return;
        _paragraphs = _currentPage.Paragraphs;
        using (var context = DbFactory.CreateDbContext())
        {
            _allWordsInLanguage = WordHelper.FetchWordDictForLanguageUser(
                context, _book.LanguageUser);
        }
    }

    private Book? FetchBook()
    {
        int parsedId = 0;
        if(!int.TryParse(Id, out parsedId)) 
        {
            _isError = true;
            _errorMessage = $"{_uiLabels.GetLabel("readErrorRetrievingData")} {_uiLabels.GetLabel("noDataReturned")}";
            return null;
        }
        using (var context = DbFactory.CreateDbContext())
        {
            // todo: secure DB fetches so only the logged in user's data is requested
            Expression<Func<Book, bool>> filter =
                (x => x.LanguageUser.UserId == 1 && x.Id == parsedId); // todo: replace this filter with an actual logged in user
            Book? bookFromDb = Fetch.BookAndBookStatsAndLanguage(context, filter);
            // todo: wrap some try catch around UI elements
            if (bookFromDb is null)
            {
                _isError = true;
                _errorMessage = $"{_uiLabels.GetLabel("readErrorRetrievingData")} {_uiLabels.GetLabel("noDataReturned")}";
                return null;
            }
            return bookFromDb;
        }

    }
    private Page? FetchPageById(int pageId)
    {
        if (_book is null) return null;
        using (var context = DbFactory.CreateDbContext())
        {
            Expression<Func<Page, bool>> filter = (x => x.Id == pageId);
            var pageFromDb = Fetch.PageAndParagraphsAndSentencesAndTokensAndWords(
                context, filter);

            if (pageFromDb is not null) return pageFromDb;
            return FetchPageByOrderWithinBook((int)_book.Id, 0);
        }
    }
    private Page? FetchPageByOrderWithinBook(int bookId, int pageOrdinal)
    {
        if (_book is null) return null;
        using (var context = DbFactory.CreateDbContext())
        {
            Expression<Func<Page, bool>> filter = (x => x.BookId == bookId && x.Ordinal == pageOrdinal);
            var pageFromDb = Fetch.PageAndParagraphsAndSentencesAndTokensAndWords(
                context, filter);

            if (pageFromDb is not null) return pageFromDb;

            _isError = true;
            _errorMessage = $"{_uiLabels.GetLabel("readErrorRetrievingData")} {_uiLabels.GetLabel("noDataReturned")}";
            return null;
        }
    }
    private List<Token> GetSentenceTokens(Sentence sentence)
    {
        if (sentence.Tokens is not null && sentence.Tokens.Count > 0) return sentence.Tokens;

        // not in the DB. Gotta create
        using (var context = DbFactory.CreateDbContext())
        {
            return SentenceHelper.CreateTokensFromSentenceAndSave(
                context, sentence, _book.LanguageUser, _allWordsInLanguage);
        }
    }
    private string GetTokenClass(Token token)
    {
        if (token.Word is null) return "statusUNKNOWN";
        if (token.Word.Status == AvailableStatus.UNKNOWN) return "statusUNKNOWN";
        if (token.Word.Status == AvailableStatus.NEW1) return "statusNEW1";
        if (token.Word.Status == AvailableStatus.NEW2) return "statusNEW2";
        if (token.Word.Status == AvailableStatus.LEARNING3) return "statusLEARNING3";
        if (token.Word.Status == AvailableStatus.LEARNING4) return "statusLEARNING4";
        if (token.Word.Status == AvailableStatus.LEARNED) return "statusLEARNED";
        if (token.Word.Status == AvailableStatus.WELLKNOWN) return "statusWELLKNOWN";
        if (token.Word.Status == AvailableStatus.IGNORED) return "statusIGNORED";
        return "statusUNKNOWN";
    }
    private void MovePage(int targetPageNum)
    {
        if (targetPageNum < 1) return;
        if (targetPageNum > _book.TotalPages) return;

        var pageInBook = _book.Pages.Where(x => x.Ordinal == targetPageNum).FirstOrDefault();
        if (pageInBook is not null)
        {
            _currentPage = pageInBook;
            _paragraphs = pageInBook.Paragraphs;
            return;
        }

        // it should be in the DB but we haven't pulled it yet
        var pageFromDb = FetchPageByOrderWithinBook((int)_book.Id, targetPageNum);
        if(pageFromDb is not null)
        {
            _currentPage = pageFromDb;
            _paragraphs = _currentPage.Paragraphs;
            _book.Pages.Add(pageFromDb);
        }
        // todo: make distinct error messages for teh diff types of errors on the read page
        _isError = true;
        _errorMessage = $"{_uiLabels.GetLabel("readErrorRetrievingData")} {_uiLabels.GetLabel("noDataReturned")}";
    }
}
