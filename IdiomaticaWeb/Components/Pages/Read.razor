@using Model
@using Logic
@using Model.DAL
@using System.Globalization
@using Logic.UILabels
@using System.Linq.Expressions;
@using Microsoft.EntityFrameworkCore;

@page "/read/{bookid:int}"
@rendermode InteractiveServer
@inject IDbContextFactory<IdiomaticaContext> DbFactory

<style>
    span.statusUNKNOWN {
        background-color: #ed6297ff;
        color: #ffffff;
        font-weight:bold;
    }

    span.statusNEW1 {
        background-color: #ed6297ff;
        color: #ffffff;
        font-weight: bold;
    }

    span.statusNEW2 {
        background-color: #3a8b89;
        color: #032120;
        font-weight: bold;
    }

    span.statusLEARNING3 {
        background-color: #6ba8a7;
        color: #032120;
        font-weight: bold;
    }

    span.statusLEARNING4 {
        background-color: #9dc5c4;
        color: #032120;
        font-weight: bold;
    }

    span.statusLEARNED {
        background-color: #cee2e2;
        color: #032120;
        text-decoration: dotted;
    }

    span.statusWELLKNOWN {
        background-color: white;
        color: black;
    }

    span.statusIGNORED {
        background-color: white;
        color: black;
    }

    .readToken {
        margin-right: .25em;
        margin-left: .25em;
        padding: .25em;
        display: inline;
    }
    .readParagraph {
        text-indent: 2em;
        margin-top: 1em;
    }

    .dissappear { display:none; }
    
    
</style>

@if(_isError)
{
    <PageTitle>@_uiLabels.GetLabel("error")</PageTitle>
    <h1>@_uiLabels.GetLabel("error"):  @_errorMessage</h1>
}
else if(_bookUser is null)
{
	<PageTitle>@_uiLabels.GetLabel("loading")</PageTitle>
	<h1>@_uiLabels.GetLabel("loading")</h1>
}
else
{
    <PageTitle>@_bookUser.Book.Title</PageTitle>
    <h1>@_bookUser.Book.Title</h1>
}
@if (_currentPageUser is null)
{
	<p>
		@_uiLabels.GetLabel("loading")
	</p>
}
else
{
    <p>Page @_currentPageUser.Page.Ordinal</p>
    <button type="button" class="btn btn-primary" @onclick="@(e => MovePage(_currentPageUser.Page.Ordinal - 1))">
        @_uiLabels.GetLabel("btnPreviousPage")
    </button>
    <button type="button" class="btn btn-primary" @onclick="@(e => MovePage(_currentPageUser.Page.Ordinal + 1))">
        @_uiLabels.GetLabel("btnNextPage")
    </button>

    @* todo: split out paragraph and sentence into their own razor elements *@
    @foreach (var paragraph in _paragraphs.OrderBy(x => x.Ordinal))
    {
		<p class="readParagraph">
			@foreach(var sentence in paragraph.Sentences.OrderBy(x => x.Ordinal))
            {
                foreach (var token in GetSentenceTokens(sentence).OrderBy(x => x.Ordinal))
                {
                    <span class="readToken @GetTokenClass(token)" data-toggle="tooltip" data-placement="top" title="Tooltip on top">@token.Display</span>
                }
            }
        </p>
    }
    <p>Page @_currentPageUser.Page.Ordinal</p>
    <button type="button" class="btn btn-primary" @onclick="@(e => MovePage(_currentPageUser.Page.Ordinal - 1))">
        @_uiLabels.GetLabel("btnPreviousPage")
    </button>
    <button type="button" class="btn btn-primary" @onclick="@(e => MovePage(_currentPageUser.Page.Ordinal + 1))">
        @_uiLabels.GetLabel("btnNextPage")
    </button>

    

}

@code {
    [Parameter]
    public int BookId { get; set; }

    private int _loggedInUserId = 1;  // todo: replace this with an actual logged in user
    private bool _isError = false;
    private string _errorMessage = "";
    private UILabels _uiLabels = Factory.GetUILabels(UILanguage.ENG_US); // todo: create a shared UILabels

    private BookUser? _bookUser;
    private PageUser? _currentPageUser;
    private LanguageUser? _languageUser;
    private List<Paragraph> _paragraphs;
    private Dictionary<string, WordUser> _allWordUsersInLanguage;
    private Dictionary<string, Word> _commonWordsInLanguage;

    protected override void OnInitialized()
    {
        // todo: don't load the entire book in at the beginning. Just the current page
        _bookUser = FetchBookUser();
        if (_bookUser is null) return;
        _languageUser = _bookUser.LanguageUser;

        _currentPageUser = FetchPageUserById(_bookUser.CurrentPageID);
        if (_currentPageUser is null) return;
        _paragraphs = _currentPageUser.Page.Paragraphs;
        using (var context = DbFactory.CreateDbContext())
        {
            _allWordUsersInLanguage = WordHelper.FetchWordUserDictForLanguageUser(
                context, _bookUser.LanguageUser);

            // pull a list of common words from the database and put it
            // in a dictionary so that we don't always have to go back to the
            // database just to get the word ID for every single word
            Dictionary<string, Word> _commonWordsInLanguage =
                WordHelper.FetchCommonWordDictForLanguage(context, _bookUser.LanguageUser.Language);
        }
    }

    private BookUser? FetchBookUser()
    {
        using (var context = DbFactory.CreateDbContext())
        {
            var BookUserFromDb = context.BookUsers
                .Where(bu => bu.LanguageUser.UserId == _loggedInUserId && bu.BookId == BookId)
                .Include(bu => bu.LanguageUser).ThenInclude(lu => lu.Language)
                .Include(bu => bu.Book).ThenInclude(b => b.BookStats)
                .FirstOrDefault()
                ;
            // todo: wrap some try catch around UI elements
            if (BookUserFromDb is null)
            {
                _isError = true;
                _errorMessage = $"{_uiLabels.GetLabel("readErrorRetrievingData")} {_uiLabels.GetLabel("noDataReturned")}";
                return null;
            }
            var bookUserStats = context.BookUserStats
                .Where(x => x.LanguageUserId == BookUserFromDb.LanguageUserId 
                    && x.BookId == BookUserFromDb.BookId);
            if (bookUserStats is null) BookUserFromDb.BookUserStats = new List<BookUserStat>();
            else BookUserFromDb.BookUserStats = bookUserStats.ToList();
            return BookUserFromDb;
        }
    }
    private PageUser FetchPageUserById(int pageUserId)
    {
        if (_bookUser is null) return null;
        using (var context = DbFactory.CreateDbContext())
        {
            // note this doesn't fetch the word_user becasue that will come 
            // from the _allWordUsersInLanguage dictionary
            var pageUserFromDb = context.PageUsers
                .Where(pu => pu.BookUser.LanguageUserId == _loggedInUserId
                    && pu.Id == pageUserId)
                .Include(pu => pu.Page)
                    .ThenInclude(p => p.Paragraphs)
                    .ThenInclude(pp => pp.Sentences)
                    .ThenInclude(s => s.Tokens)
                    .ThenInclude(s => s.Word)
                .FirstOrDefault();

            if (pageUserFromDb is not null) return pageUserFromDb;
            return FetchPageUserByOrderWithinBook(0);
        }
    }
    private PageUser FetchPageUserByOrderWithinBook(int pageOrdinal)
    {
        if (_bookUser is null) return null;
        using (var context = DbFactory.CreateDbContext())
        {
            // note this doesn't fetch the word_user becasue that will come
            // from the _allWordUsersInLanguage dictionary
            var pageUserFromDb = context.PageUsers
                .Where(pu => pu.BookUser.LanguageUserId == _loggedInUserId
                    && pu.Page.Ordinal == pageOrdinal)
                .Include(pu => pu.Page)
                    .ThenInclude(p => p.Paragraphs)
                    .ThenInclude(pp => pp.Sentences)
                    .ThenInclude(s => s.Tokens)
                    .ThenInclude(s => s.Word)
                .FirstOrDefault();

            if (pageUserFromDb is not null) return pageUserFromDb;

            // pageUser is not created yet. Is the page created?
            var existingPage = context.Pages
                .Where(p => p.BookId == _bookUser.BookId && p.Ordinal == pageOrdinal)
                .FirstOrDefault();
            if (existingPage == null)
                throw new InvalidDataException("Underlying Page does not exist when trying to retrieve PageUser.");

        return PageHelper.CreatePageUserAndSave(context, existingPage, _bookUser,
            _commonWordsInLanguage, _allWordUsersInLanguage);
        }
    }
    private List<Token> GetSentenceTokens(Sentence sentence)
    {
        if (sentence.Tokens is not null && sentence.Tokens.Count > 0) return sentence.Tokens;
        // todo: log error. there should not be a sentence w/out tokens at this point
        return new List<Token>();
    }
    private string GetTokenClass(Token token)
    {
        if (token.Word is null) return "statusUNKNOWN";
        if (!_allWordUsersInLanguage.ContainsKey(token.Word.TextLowerCase)) return "statusUNKNOWN";
        var wordUser = _allWordUsersInLanguage[token.Word.TextLowerCase];
        if (wordUser.Status == AvailableWordUserStatus.UNKNOWN) return "statusUNKNOWN";
        if (wordUser.Status == AvailableWordUserStatus.NEW1) return "statusNEW1";
        if (wordUser.Status == AvailableWordUserStatus.NEW2) return "statusNEW2";
        if (wordUser.Status == AvailableWordUserStatus.LEARNING3) return "statusLEARNING3";
        if (wordUser.Status == AvailableWordUserStatus.LEARNING4) return "statusLEARNING4";
        if (wordUser.Status == AvailableWordUserStatus.LEARNED) return "statusLEARNED";
        if (wordUser.Status == AvailableWordUserStatus.WELLKNOWN) return "statusWELLKNOWN";
        if (wordUser.Status == AvailableWordUserStatus.IGNORED) return "statusIGNORED";
        return "statusUNKNOWN";
    }
    private void MovePage(int targetPageNum)
    {
        if (targetPageNum < 1) return;
        if (targetPageNum > StatisticsHelper.GetBookStat_int(_bookUser.Book, AvailableBookStat.TOTALPAGES)) 
            return;

        var pageUserInBook = _bookUser.PageUsers
            .Where(x => x.Page.Ordinal == targetPageNum)
            .FirstOrDefault();

        if (pageUserInBook is not null)
        {
            _currentPageUser = pageUserInBook;
            _paragraphs = pageUserInBook.Page.Paragraphs;
            return;
        }

        // it should be in the DB but we haven't pulled it yet
        var pageUserFromDb = FetchPageUserByOrderWithinBook(targetPageNum);
        if (pageUserFromDb is not null)
        {
            _currentPageUser = pageUserFromDb;
            _paragraphs = _currentPageUser.Page.Paragraphs;
            _bookUser.PageUsers.Add(pageUserFromDb);
        }
        // todo: make distinct error messages for teh diff types of errors on the read page
        _isError = true;
        _errorMessage = $"{_uiLabels.GetLabel("readErrorRetrievingData")} {_uiLabels.GetLabel("noDataReturned")}";
    }
}
