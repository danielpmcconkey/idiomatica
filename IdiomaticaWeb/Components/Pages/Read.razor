@using Model
@using Logic
@using Model.DAL
@using System.Globalization
@using Logic.UILabels

@page "/read/{id}"
@rendermode InteractiveServer
<style>
    span.statusUNKNOWN {
        background-color: #ed6297ff;
        color: #ffffff;
        font-weight:bold;
    }

    span.statusNEW1 {
        background-color: #ed6297ff;
        color: #ffffff;
        font-weight: bold;
    }

    span.statusNEW2 {
        background-color: #3a8b89;
        color: #032120;
        font-weight: bold;
    }

    span.statusLEARNING3 {
        background-color: #6ba8a7;
        color: #032120;
        font-weight: bold;
    }

    span.statusLEARNING4 {
        background-color: #9dc5c4;
        color: #032120;
        font-weight: bold;
    }

    span.statusLEARNED {
        background-color: #cee2e2;
        color: #032120;
        text-decoration: dotted;
    }

    span.statusWELLKNOWN {
        background-color: white;
        color: black;
    }

    span.statusIGNORED {
        background-color: white;
        color: black;
    }

    .readToken {
        margin-right: .25em;
        margin-left: .25em;
        padding: .25em;
        display: inline;
    }
    .readParagraph {
        text-indent: 2em;
        margin-top: 1em;
    }

    .dissappear { display:none; }
    
    
</style>

@if(_isError)
{
    <PageTitle>@uILabels.GetLabel("error")</PageTitle>
    <h1>@uILabels.GetLabel("error"):  @_errorMessage</h1>
}
else if(_book is null)
{
	<PageTitle>@uILabels.GetLabel("loading")</PageTitle>
	<h1>@uILabels.GetLabel("loading")</h1>
}
else
{
	<PageTitle>Test</PageTitle>
    <h1>@_book.Title</h1>
}
@if(_currentPage is null)
{
	<p>
		@uILabels.GetLabel("loading")
	</p>
}
else
{
    
    @* todo: split out paragraph and sentence into their own razor elements *@
    @foreach (var paragraph in _paragraphs.OrderBy(x => x.Order))
    {
		<p class="readParagraph">
			@foreach(var sentence in paragraph.Sentences.OrderBy(x => x.Order))
            {
                foreach (var token in GetSentenceTokens(sentence).OrderBy(x => x.Ordinal))
                {
                    <span class="readToken @GetTokenClass(token)">@token.Display</span>
                }
            }
        </p>
    }
    <button @onclick="NextPage">>></button>


}

@code {
    [Parameter]
    public string Id { get; set; }
    private bool _isError = false;
    private Book? _book;
    private string _errorMessage = "";
    private UILabels uILabels = UILabelFactory.GetUILabels(UILanguage.ENG_US); // todo: create a shared UILabels
    private Page? _currentPage;
    private List<Paragraph> _paragraphs;
    private Dictionary<string, Word> _allWordsInLanguage;

    protected override void OnInitialized()
    {
        // todo: don't load the entire book in at the beginning. Just the current page
        _book = GetBook();
        if (_book is null) return;

        _currentPage = GetCurrentPage();
        if (_currentPage is null) return;
        _paragraphs = GetParagraphsForCurrentPage();

        _allWordsInLanguage = WordHelper.GetWordDictForLanguageUser(_book.LanguageUser);

        // numbers reduce to empty when you're parsing them. 
        // create a new word object and add it to the dict to keep them from
        // throwing up exceptions

    }

    private Book? GetBook()
    {
        using (var context = new IdiomaticaContext())
        {
            // todo: wrap some try catch around database pulls
            var book = BookHelper.GetBookById(context, int.Parse(Id)); // todo wrap some try catch around the int.parse
            if(book is null)
            {
                _isError = true;
                _errorMessage = $"{uILabels.GetLabel("readErrorRetrievingData")} {uILabels.GetLabel("noDataReturned")}";
                return null;
            }
            _book = book;
            return (Book)book;
        }
    }
    private Page? GetCurrentPage()
    {
        if (_book is null) return null;

        using(IdiomaticaContext context = new IdiomaticaContext())
        {
            var currentPageFromDB = PageHelper.GetPageById(context, _book.CurrentPageID);
            if (currentPageFromDB is null) return PageHelper.GetPageByBookOrdinal(context, _book.Id, 0);
            return currentPageFromDB;            
        }
    }
    private List<Token> GetSentenceTokens(Sentence sentence)
    {
        if (sentence.Tokens is not null && sentence.Tokens.Count > 0) return sentence.Tokens;
        using (var context = new IdiomaticaContext())
        {
            var x = SentenceHelper.TokenizeSentence(context, sentence, _book.LanguageUser, _allWordsInLanguage);
            return x;
        }
    }
    private string GetTokenClass(Token token)
    {
        if (token.Word is null) return "statusUNKNOWN";
        if (token.Word.Status is null) return "statusUNKNOWN";
        if (token.Word.Status.Id == (int)AvailableStatus.UNKNOWN) return "statusUNKNOWN";
        if (token.Word.Status.Id == (int)AvailableStatus.NEW1) return "statusNEW1";
        if (token.Word.Status.Id == (int)AvailableStatus.NEW2) return "statusNEW2";
        if (token.Word.Status.Id == (int)AvailableStatus.LEARNING3) return "statusLEARNING3";
        if (token.Word.Status.Id == (int)AvailableStatus.LEARNING4) return "statusLEARNING4";
        if (token.Word.Status.Id == (int)AvailableStatus.LEARNED) return "statusLEARNED";
        if (token.Word.Status.Id == (int)AvailableStatus.WELLKNOWN) return "statusWELLKNOWN";
        if (token.Word.Status.Id == (int)AvailableStatus.IGNORED) return "statusIGNORED";
        return "statusUNKNOWN";
    }
    private void NextPage()
    {
        var currentPageNum = _currentPage.Order;
        var targetPageNum = currentPageNum + 1;
        var pageInBook = _book.Pages.Where(x => x.Order == targetPageNum).FirstOrDefault();
        if (pageInBook is not null) 
        {
            _currentPage = pageInBook;
            _paragraphs = GetParagraphsForCurrentPage();
            return;
        }
        if(_book.TotalPages >= targetPageNum) // page numbers are 1-indexed
        {
            // it's in the DB but we haven't pulled it yet
            using (var context = new IdiomaticaContext())
            {
                var dbResult = PageHelper.GetPageByBookOrdinal(context, _book.Id, targetPageNum);
                if (dbResult is null) return;
                _book.Pages.Add(dbResult);
                _currentPage = dbResult;
                _paragraphs = GetParagraphsForCurrentPage();
            }
        }
    }
    private List<Paragraph> GetParagraphsForCurrentPage()
    {
        if (_currentPage.Paragraphs is null)
        {
            var dbResult = PageHelper.GetPageParagraphs(_currentPage, _book.LanguageUser.Language);
            _currentPage.Paragraphs = dbResult;
        }
        return _currentPage.Paragraphs;
    }

}
