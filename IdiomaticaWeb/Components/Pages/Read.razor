@using Model
@using Logic
@using Model.DAL
@using System.Globalization
@using Logic.UILabels

@page "/read/{id}"
@* @rendermode InteractiveServer *@

@if(Book is null)
{
	<PageTitle>@uILabels.GetLabel("loading")</PageTitle>
	<h1>@uILabels.GetLabel("loading")</h1>
}
else
{
	<PageTitle>Test</PageTitle>
	<h1>@Book.Title</h1>
}
@if(_currentPage is null)
{
	<p>
		@uILabels.GetLabel("loading")
	</p>
}
else
{
	@foreach(var paragraph in _paragraphs)
	{
		<p class="readParagraph">
			@foreach(var sentence in paragraph.Sentences)
            {
                <span class="readSentence">@sentence.Text</span>
            }
        </p>
	}
}

@code {
    [Parameter]
    public string Id { get; set; }
    public Book? Book { get { return GetBook(); } set { } }
    private Book? _book;
    private bool _isError = false;
    private string _errorMessage = "";
    private UILabels uILabels = UILabelFactory.GetUILabels(UILanguage.ENG_US); // todo: create a shared UILabels
    private Page? _currentPage { get { return GetCurrentPage(); } set { } }
    private List<Paragraph> _paragraphs;

    protected override void OnInitialized()
    {
        _currentPage = GetCurrentPage();
        if (_currentPage is null) return;
        _paragraphs = PageHelper.GetParagraphs(_currentPage, Book.LanguageUser.Language);
	}

	private Book? GetBook()
	{
		if (_book is not null) return _book;
		if (_isError) return null;

		using (var context = new IdiomaticaContext())
		{
			// todo: wrap some try catch around database pulls
			var book = BookHelper.GetBooksById(context, int.Parse(Id)); // todo wrap some try catch around the int.parse
			if(book is null)
			{
				_isError = true;
				_errorMessage = $"{uILabels.GetLabel("readErrorRetrievingData")} {uILabels.GetLabel("noDataReturned")}";
				return null;
			}
			_book = book;
			return (Book)book;
		}
	}
	private Page? GetCurrentPage()
	{
		if (Book is null) return null;
		if (Book.Pages is null) return null;
		if (Book.Pages.Count == 0) return null;
        return Book.Pages.Where(p => p.Id == Book.CurrentPageID).FirstOrDefault();
	}
}
