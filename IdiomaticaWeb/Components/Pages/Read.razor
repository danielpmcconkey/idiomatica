@page "/Book/{bookid:int}/Read"
@rendermode InteractiveServer
@inject BookService BookService;
@inject UserService UserService;

<style>
    span.statusUNKNOWN {
        background-color: #ed6297ff;
        color: #ffffff;
        font-weight:bold;
    }

    span.statusNEW1 {
        background-color: #3a8b89;
        color: #ffffff;
        font-weight: bold;
    }

    span.statusNEW2 {
        background-color: #6ba5a4;
        color: #032120;
        font-weight: bold;
    }

    span.statusLEARNING3 {
        background-color: #95bebd;
        color: #032120;
        font-weight: bold;
    }

    span.statusLEARNING4 {
        background-color: #bfd8d7;
        color: #032120;
        font-weight: bold;
    }

    span.statusLEARNED {
        background-color: #eaf2f1;
        color: #032120;
        text-decoration: dotted;
    }

    span.statusWELLKNOWN {
        background-color: #fff;
        color: black;
    }

    span.statusIGNORED {
        background-color: #fff;
        color: black;
    }

    .readToken {
        margin-right: .25em;
        margin-left: .25em;
        padding: .25em;
        display: inline;
        cursor: pointer;
    }
    
    .readParagraph { text-indent:2em; }
    .dissappear { display:none; }

    .unselectedWordStatus {
        border: solid 1px #cccccc;
    }

    .selectedWordStatus {
        border: solid 5px #0000ff;
    }
    
</style>

<AuthorizeView>
    <Authorized>
        @if (_isError)
        {
            <PageTitle>@UserService.GetUILabel("error")</PageTitle>
            <h1>@UserService.GetUILabel("error"):  @_errorMessage</h1>
        }
        else if (_bookUser is null)
        {
            <PageTitle>@UserService.GetUILabel("loading")</PageTitle>
            <h1>@UserService.GetUILabel("loading")</h1>
        }
        else
        {
            <PageTitle>@_bookUser.Book.Title</PageTitle>
            <h1>@_bookUser.Book.Title</h1>
        }
        @if (_currentPageUser is null)
        {
            <p>
                @UserService.GetUILabel("loading")
            </p>
        }
        else
        {

            <ModalWord @ref="_wModal" Parent="this"
                       allWordUsersInLanguage="_allWordUsersInLanguage" />

            <ModalParagraph @ref="_ppModal" Language="_bookUser?.LanguageUser?.Language" />





            <div class="container px-4">

                <PageTurner currentPageUser="_currentPageUser"
                            OnMovePage="MovePage" />

                @foreach (var paragraph in _paragraphs.OrderBy(x => x.Ordinal))
                {
                    <hr />
                    <ParagraphView paragraph="paragraph"
                                   allWordUsersInLanguage="_allWordUsersInLanguage"
                                   OnShowWordModal="ShowWordModal"
                                   OnShowPpModal="ShowPpModal"
                                   Language="_bookUser?.LanguageUser?.Language" />
                }
                <hr />
                <PageTurner currentPageUser="_currentPageUser"
                            OnMovePage="MovePage" />
            </div>
        }
    </Authorized>
    <NotAuthorized>
        <p>@UserService.GetUILabel("notLoggedIn")</p>
    </NotAuthorized>
</AuthorizeView>


@code {

    [Parameter]
    public int BookId { get; set; }
    private bool _isError = false;
    private string _errorMessage = "";
    private BookUser? _bookUser;
    private IQueryable<BookUserStat>? _bookUserStats;

    #region shared with multiple children
    private User _loggedInUser { get { return UserService.GetLoggedInUser(); } }
    private LanguageUser? _languageUser;
    private Dictionary<string, WordUser> _allWordUsersInLanguage;
    private PageUser? _currentPageUser;
    #endregion

    #region wmodal
    private ModalWord _wModal = default!;
    public async Task ShowWordModal(Token thisToken)
    {
        await _wModal.OnShowModalClick(thisToken);
    }
    #endregion

    #region ppmodal
    private ModalParagraph _ppModal = default!;
    private async Task ShowPpModal(Paragraph pp)
    {
        await _ppModal.OnShowPpModalClick(pp);
    }
    #endregion
    #region pageturner
    private void MovePage(int targetPageNum)
    {
        if (targetPageNum < 1) return;
        if (targetPageNum > StatisticsHelper.GetBookStat_int(_bookUser?.Book, AvailableBookStat.TOTALPAGES))
            return;

        var pageUserInBook = _bookUser.PageUsers
            .Where(x => x.Page.Ordinal == targetPageNum)
            .FirstOrDefault();

        if (pageUserInBook is not null)
        {
            _currentPageUser = pageUserInBook;
            _paragraphs = pageUserInBook.Page.Paragraphs;
            BookService.PageUpdateBookmark(_bookUser.Id, (int)_currentPageUser.Page.Id);
            return;
        }

        // it should be in the DB but we haven't pulled it yet
        var pageUserFromDb = FetchPageUserByOrderWithinBook(targetPageNum);
        if (pageUserFromDb is not null)
        {
            _currentPageUser = pageUserFromDb;
            _paragraphs = _currentPageUser.Page.Paragraphs;
            _bookUser.PageUsers.Add(pageUserFromDb);
            BookService.PageUpdateBookmark(_bookUser.Id, (int)_currentPageUser.Page.Id);
            return;
        }
        // todo: make distinct error messages for the diff types of errors on the read page
        _isError = true;
        _errorMessage = $"{UserService.GetUILabel("readErrorRetrievingData")} {UserService.GetUILabel("noDataReturned")}";
    }
    #endregion


    private List<Paragraph> _paragraphs;
    private Dictionary<string, Word> _commonWordsInLanguage;








    protected override async Task OnInitializedAsync()
    {
        try
        {
            // todo: don't load the entire book in at the beginning. Just the current page
            _bookUser = FetchBookUser();
            if (_bookUser is null) return;
            if (_bookUser.LanguageUser is null) return;
            if (_bookUser.Book is null) return;
            _languageUser = _bookUser.LanguageUser;
            _bookUserStats = FetchBookUserStats();

            _allWordUsersInLanguage = BookService.WordUserFetchDictForLanguageUser(
                    _bookUser.LanguageUser);

            // pull a list of common words from the database and put it
            // in a dictionary so that we don't always have to go back to the
            // database just to get the word ID for every single word
            _commonWordsInLanguage =
                 BookService.WordFetchCommonDictForLanguage(_bookUser.LanguageUser.Language);

            _currentPageUser = FetchPageUserOnBookOpen();
            if (_currentPageUser is null) return;
            _paragraphs = _currentPageUser.Page.Paragraphs;

        }
        catch (Exception ex)
        {
            _isError = true;
            _errorMessage = ex.Message;
        }
    }
    protected override void OnInitialized()
    {

    }
    public void RefreshState() { StateHasChanged(); }
    private void UpdateWordDictForNewPage()
    {
        foreach(var pp in _currentPageUser.Page.Paragraphs)
        {
            foreach(var s in pp.Sentences)
            {
                foreach (var token in s.Tokens)
                {
                    if (!_allWordUsersInLanguage.ContainsKey(token.Word.TextLowerCase))
                    {
                        AddTokenToWordDict(token);
                    }
                }
            }
        }
    }

    private void AddTokenToWordDict(Token token)
    {
        BookService.WordUserCreateAndSave(_languageUser, token.Word);
        // pull from the DB fresh
        var newWordUser = BookService.WordUserFetch(_languageUser, token.Word);
        // and add to the dict
        _allWordUsersInLanguage[token.Word.TextLowerCase] = newWordUser;
    }

    private BookUser? FetchBookUser()
    {
        var bookUserFromDb = BookService.BookUserFetch((int)_loggedInUser.Id, BookId);
        // todo: wrap some try catch around UI elements
        if (bookUserFromDb is null)
        {
            // try to create it
            var bookUserId = BookService.BookUserCreateAndSave(BookId, (int)_loggedInUser.Id);
            if(bookUserId == 0)
            {
                _isError = true;
                _errorMessage = $"{UserService.GetUILabel("readErrorRetrievingData")} {UserService.GetUILabel("noDataReturned")}";
                return null;
            }
            bookUserFromDb = BookService.BookUserFetch((int)_loggedInUser.Id, BookId);
        }
        return bookUserFromDb;
    }
    private IQueryable<BookUserStat> FetchBookUserStats()
    {
        if (_bookUser is null) return null;

        var bookUserStatsFromDb = BookService.BookUserStatsFetch((int)_loggedInUser.Id, _bookUser.BookId);
        if (bookUserStatsFromDb is null)
        {
            _isError = true;
            _errorMessage = $"{UserService.GetUILabel("readErrorRetrievingData")} {UserService.GetUILabel("noDataReturned")}";
        }
        return bookUserStatsFromDb;
    }
    private PageUser? FetchPageUserOnBookOpen()
    {
        // note this doesn't fetch the word_user becasue that will come
        // from the _allWordUsersInLanguage dictionary

        if (_bookUser is null) return null;
        var dbPageUser = BookService.PageUserFetchById(_bookUser.CurrentPageID, _bookUser.LanguageUserId);
        if (dbPageUser is not null) return dbPageUser;
        return FetchPageUserByOrderWithinBook(1);
    }
    private PageUser? FetchPageUserByOrderWithinBook(int pageOrdinal)
    {
        // note this doesn't fetch the word_user becasue that will come
        // from the _allWordUsersInLanguage dictionary
        if (_bookUser is null) return null;

        var pageUserFromDb = BookService.PageUserFetchByOrdinalWithinBook(
            pageOrdinal, _bookUser.BookId, (int)_loggedInUser.Id);

        if (pageUserFromDb is not null) return pageUserFromDb;

        // pageUser is not created yet. Is the page created?
        var existingPage = BookService.PageFetchByOrdinalWithinBook(pageOrdinal, _bookUser.BookId);
        if (existingPage == null)
            throw new InvalidDataException("Underlying Page does not exist when trying to retrieve PageUser.");

        BookService.PageUserCreateAndSave(existingPage, _bookUser,
            _commonWordsInLanguage, _allWordUsersInLanguage);

        // re-fetch the page user to get all the related objects
        return BookService.PageUserFetchByOrdinalWithinBook(
            pageOrdinal, _bookUser.BookId, (int)_loggedInUser.Id);
    }
}
