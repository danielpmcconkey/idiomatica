@page "/Book/{bookid:int}/Read"
@rendermode InteractiveServer
@inject BookService BookService;
@inject UserService UserService;
@inject IDbContextFactory<IdiomaticaContext> DbContextFactory

<style>
    span.statusUNKNOWN {
        background-color: #ed6297ff;
        color: #ffffff;
        font-weight:bold;
    }

    span.statusNEW1 {
        background-color: #3a8b89;
        color: #ffffff;
        font-weight: bold;
    }

    span.statusNEW2 {
        background-color: #6ba5a4;
        color: #032120;
        font-weight: bold;
    }

    span.statusLEARNING3 {
        background-color: #95bebd;
        color: #032120;
        font-weight: bold;
    }

    span.statusLEARNING4 {
        background-color: #bfd8d7;
        color: #032120;
        font-weight: bold;
    }

    span.statusLEARNED {
        background-color: #eaf2f1;
        color: #032120;
        text-decoration: dotted;
    }

    span.statusWELLKNOWN {
        background-color: #fff;
        color: black;
    }

    span.statusIGNORED {
        background-color: #fff;
        color: black;
    }

    .readToken {
        margin-right: .25em;
        margin-left: .25em;
        padding: .25em;
        display: inline;
        cursor: pointer;
    }
    
    .readParagraph { text-indent:2em; }
    .dissappear { display:none; }

    .unselectedWordStatus {
        border: solid 1px #cccccc;
    }

    .selectedWordStatus {
        border: solid 5px #0000ff;
    }
    
</style>

<ErrorAlert ErrorState="errorState"></ErrorAlert>
<AuthorizeView>
    <Authorized>
        
        @if (_isLoading)
        {
            <PageTitle>@UserService.GetUILabel("loading")</PageTitle>
            <Button Color="ButtonColor.Primary" Loading="true" LoadingText="@UserService.GetUILabel("loading")" />
            
        }
        else
        {
            <PageTitle>@BookService.BookTitle</PageTitle>
            <h3>@BookService.BookTitle</h3>
        

            <ModalWord @ref="_wModal" Parent="this" BookService="BookService" />

            <ModalParagraph @ref="_ppModal" BookService="BookService" />





            <div class="container px-4">

                <PageTurner BookService="BookService"
                            OnMovePageAsync="OnMovePageAsync"
                            OnClearPageAsync="OnClearPageAsync" />

                
                @foreach (var paragraph in BookService.Paragraphs)
                {
                    <hr />
                    <ParagraphView BookService="BookService"
                        ParagraphAndChildren="paragraph"
                        OnShowWordModal="OnShowWordModal"
                        OnShowPpModal="OnShowPpModal" />
                }
                
                <hr />
                <PageTurner BookService="BookService"
                            OnMovePageAsync="OnMovePageAsync"
                            OnClearPageAsync="OnClearPageAsync" />
            </div>
        }
    </Authorized>
    <NotAuthorized>
        <p>@UserService.GetUILabel("notLoggedIn")</p>
    </NotAuthorized>
</AuthorizeView>


@code {

    #region parameters
    [Parameter]
    public int BookId { get; set; }
    #endregion

    #region page loading stuff
    public ErrorState errorState = new ErrorState() { isError = false, errorMessage = "" };
    private ModalWord _wModal = default!;
    private ModalParagraph _ppModal = default!;
    private bool _isLoading = true;

    #endregion





    protected override async Task OnInitializedAsync()
    {
        try
        {

            if (BookService.IsDataInitRead == false) 
            {
                _isLoading = true;
                var context = await DbContextFactory.CreateDbContextAsync();
                await BookService.InitDataRead(context, UserService, BookId);
                _isLoading = false;
            }
        }
        catch (IdiomaticaException ex)
        {
            errorState.isError = true;
            errorState.errorMessage = UserService.GetUILabel("readInitializationError");
            errorState.code = ex.code;
            StateHasChanged();
            return;
        }
        catch (Exception ex)
        {
            errorState.isError = true;
            errorState.errorMessage = UserService.GetUILabel("readInitializationError");
            StateHasChanged();
            return;
        }
    }

    #region methods exposed to other elements
    public async Task OnShowWordModal(Token thisToken)
    {
        try
        {
            await _wModal.OnShowModalClick(thisToken);
        }
        catch (Exception ex)
        {
            errorState.isError = true;
            errorState.errorMessage = UserService.GetUILabel("showWordModalError");
            StateHasChanged();
            return;
        }
    }
    private async Task OnShowPpModal(Paragraph pp)
    {
        try
        {
            await _ppModal.OnShowPpModalClick(pp);
        }
        catch (Exception ex)
        {
            errorState.isError = true;
            errorState.errorMessage = UserService.GetUILabel("showPpModalError");
            StateHasChanged();
            return;
        }
    }
    private async Task OnMovePageAsync(int targetPageNum)
    {
        try
        {
            _isLoading = true;
            // force a delay of at least N miliseconds. this forces the screen
            // to re-draw the paragraphs. Otherwise, you get the old paragraphs
            // on the new page.
            var t_delay = Task.Delay(1000);
            var context = await DbContextFactory.CreateDbContextAsync(); 
            await BookService.PageMove(context, targetPageNum);
            await t_delay;
            _isLoading = false;

        }
        catch (IdiomaticaException ex)
        {
            errorState.isError = true;
            errorState.errorMessage = UserService.GetUILabel("readErrorPageChange");
            errorState.code = ex.code;
            StateHasChanged();
            return;
        }
        catch (Exception ex)
        {
            errorState.isError = true;
            errorState.errorMessage = UserService.GetUILabel("readErrorPageChange");
            StateHasChanged();
            return;
        }
    }
    private async Task OnClearPageAsync(int targetPageNum)
    {
        try
        {
            _isLoading = true;
            // force a delay of at least N miliseconds. this forces the screen
            // to re-draw the paragraphs. Otherwise, you get the old paragraphs
            // on the new page.
            var t_delay = Task.Delay(1000); 
            var context = await DbContextFactory.CreateDbContextAsync();
            await BookService.PageUserClearPage(context);
            await OnMovePageAsync(targetPageNum);
            await t_delay;
            _isLoading = false;
        }
        catch (IdiomaticaException ex)
        {
            errorState.isError = true;
            errorState.errorMessage = UserService.GetUILabel("clearPageUserError");
            errorState.code = ex.code;
            StateHasChanged();
            return;
        }
        catch (Exception ex)
        {
            errorState.isError = true;
            errorState.errorMessage = UserService.GetUILabel("clearPageUserError");
            StateHasChanged();
            return;
        }
    }
    public void RefreshState() { StateHasChanged(); }
    #endregion
}
