@page "/PageTurner"
@rendermode InteractiveServer
@inject BookService BookService;
@inject UserService UserService;


<div class="row  g-2">
    <div class="col-2">
        <p>Page @currentPage.Ordinal of @OnGetTotalPages()</p>
    </div>
    <div class="col-2">
        <button type="button" class="btn btn-primary" @onclick="@(e => MovePageAsync(currentPage.Ordinal - 1))">
            @UserService.GetUILabel("btnPreviousPage")
        </button>
    </div>
    <div class="col-2">
        <button type="button" class="btn btn-success" @onclick="@(e => ClearPageAsync(currentPage.Ordinal + 1))">
            @UserService.GetUILabel("btnClearPage")
        </button>
    </div>
    <div class="col-2">
        <button type="button" class="btn btn-primary" @onclick="@(e => MovePageAsync(currentPage.Ordinal + 1))">
            @UserService.GetUILabel("btnNextPage")
        </button>
    </div>
</div>
@code {
    [Parameter]
    public Page? currentPage { get; set; }
    [Parameter]
    public EventCallback<int> OnMovePageAsync { get; set; }
    [Parameter]
    public EventCallback<int> OnClearPageAsync { get; set; }
    [Parameter]
    public int? BookTotalPageCount { get; set; }

    private async Task MovePageAsync(int targetPageNum)
    {
        await OnMovePageAsync.InvokeAsync(targetPageNum);
    }
    private async Task ClearPageAsync(int targetPageNum)
    {
        await OnClearPageAsync.InvokeAsync(targetPageNum);
    }
    private int OnGetTotalPages()
    {
        if (BookTotalPageCount == null) return 0;
        return (int)BookTotalPageCount;
    }
}
