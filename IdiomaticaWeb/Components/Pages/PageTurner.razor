@page "/PageTurner"
@rendermode InteractiveServer
@inject BookService BookService;
@inject UserService UserService;


<div class="row  g-2">
    <div class="col-2">
        <p>Page @currentPageUser.Page.Ordinal of @OnGetTotalPages()</p>
    </div>
    <div class="col-2">
        <button type="button" class="btn btn-primary" @onclick="@(e => MovePage(currentPageUser.Page.Ordinal - 1))">
            @UserService.GetUILabel("btnPreviousPage")
        </button>
    </div>
    <div class="col-2">
        <button type="button" class="btn btn-success" @onclick="@(e => ClearPage(currentPageUser.Page.Ordinal + 1))">
            @UserService.GetUILabel("btnClearPage")
        </button>
    </div>
    <div class="col-2">
        <button type="button" class="btn btn-primary" @onclick="@(e => MovePage(currentPageUser.Page.Ordinal + 1))">
            @UserService.GetUILabel("btnNextPage")
        </button>
    </div>
</div>
@code {
    [Parameter]
    public PageUser? currentPageUser { get; set; }
    [Parameter]
    public EventCallback<int> OnMovePage { get; set; }
    [Parameter]
    public EventCallback<int> OnClearPage { get; set; }

    private void MovePage(int targetPageNum)
    {
        OnMovePage.InvokeAsync(targetPageNum);
    }
    private void ClearPage(int targetPageNum)
    {
        OnClearPage.InvokeAsync(targetPageNum);
    }
    private int OnGetTotalPages()
    {
        if (currentPageUser is null) return -1;
        if (currentPageUser.BookUser is null) currentPageUser.BookUser = BookService.BookUserFetch(currentPageUser);
        if (currentPageUser.BookUser.Book is null)
            currentPageUser.BookUser.Book = BookService.BookFetch(currentPageUser.BookUser);
        if (currentPageUser.BookUser.Book.BookStats is null)
        {
            // first check if they're in the DB
            currentPageUser.BookUser.Book.BookStats = BookService
                .BookStatsFetch((int)currentPageUser.BookUser.Book.Id);
        }
        if (currentPageUser.BookUser.Book.BookStats is null)
        {
            // none in DB. try to create them
            BookService.BookStatsCreateAndSave((int)currentPageUser.BookUser.Book.Id);
            currentPageUser.BookUser.Book.BookStats = BookService
                .BookStatsFetch((int)currentPageUser.BookUser.Book.Id);
        }
        if (currentPageUser.BookUser.Book.BookStats is null)
        {
            // something is wrong here
            return -1;
        }
        var valueString = currentPageUser.BookUser.Book.BookStats
            .Where(x => x.Key == AvailableBookStat.TOTALPAGES)
            .FirstOrDefault()
            .Value;
        int outVal = -1;
        int.TryParse(valueString, out outVal);
        return outVal;
    }
}
