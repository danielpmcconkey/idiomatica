@page "/PageTurner"
@rendermode InteractiveServer
@inject UserService UserService;


<div class="row  g-2 align-items-center">
    <div class="col-2">
        <p>@OnGetPageOfPagesLabel()</p>
    </div>
    @if (_isPreviousEnabled)
    {
        <div class="col-2">
            <button type="button" class="btn btn-primary" 
                @onclick="@(e => MovePageAsync(@OnGetCurrentPageNum() - 1))">
                @UserService.GetUILabel("btnPreviousPage")
            </button>
        </div>
    }
    <div class="col-2">
        <button type="button" class="btn btn-success"
            @onclick="@(e => ClearPageAsync(@OnGetCurrentPageNum() + 1))">
            @UserService.GetUILabel("btnClearPage")
        </button>
    </div>
    @if (_isNextEnabled)
    {
        <div class="col-2">
            <button type="button" class="btn btn-primary"
                @onclick="@(e => MovePageAsync(@OnGetCurrentPageNum() + 1))">
                @UserService.GetUILabel("btnNextPage")
            </button>
        </div>
    }
    <div class="col-4">
        <form method="post" @onsubmit="OnJumpClickAsync" @formname="JumpPageForm">
            <div class="input-group"
                <InputSelect @bind-Value="_jumpInput">
                    <option value="1" selected>@UserService.GetUILabel("readJumpDefault")</option>
                    @foreach (int pNum in OnGetPageJumpOptions())
                    {
                        <option value="@pNum">@pNum</option>
                    }
                </InputSelect>
                <button type="submit" 
                        class="btn btn-primary btn-sm">
                    @UserService.GetUILabel("readJumpSubmit")
                </button>
            </div>
        </form>
    </div>

    
</div>
@code {
    [Parameter]
    public BookService BookService { get; set; }
    [Parameter]
    public EventCallback<int> OnMovePageAsync { get; set; }
    [Parameter]
    public EventCallback<int> OnClearPageAsync { get; set; }

    private int? _jumpInput;

    private bool _isPreviousEnabled
    {
        get
        {
            if (BookService is null) return false;
            if (BookService.BookCurrentPageNum < 2) return false;
            return true;
        }
    }
    private bool _isNextEnabled
    {
        get
        {
            if (BookService is null) return false;
            if (BookService.BookCurrentPageNum == BookService.BookTotalPageCount) return false;
            return true;
        }
    }

    private async Task MovePageAsync(int targetPageNum)
    {
        await OnMovePageAsync.InvokeAsync(targetPageNum);
    }
    private async Task ClearPageAsync(int targetPageNum)
    {
        await OnClearPageAsync.InvokeAsync(targetPageNum);
    }
    private string OnGetPageOfPagesLabel()
    {
        var currentPage = (BookService is null) ? 0 : BookService.BookCurrentPageNum;
        var totalPages = (BookService is null) ? 0 : BookService.BookTotalPageCount;
        return UserService.GetUILabelF("pageTurnerCurrentPage", [currentPage, totalPages]);
    }
    private int OnGetCurrentPageNum()
    {
        if (BookService is null) return 0;
        return (int)BookService.BookCurrentPageNum;
    }
    private async Task OnJumpClickAsync()
    {
        if (_jumpInput is not null && _jumpInput > 0 && _jumpInput <= BookService.BookTotalPageCount)
        {
            await OnMovePageAsync.InvokeAsync((int)_jumpInput);
        }
    }
    private List<int> OnGetPageJumpOptions()
    {
        List<int> returnVals = new List<int>();

        if (BookService is null) 
        {
            returnVals.Add(1);
            return returnVals;
        }

        for (int i = 2; i <= BookService.BookTotalPageCount; i++)
        {
            returnVals.Add(i);
        }
        return returnVals;
    }
}
