@page "/ModalParagraph"
@rendermode InteractiveServer
@inject BookService BookService;
@inject UserService UserService;
@inject DeepLService DeepLService;
@using System.Text;

@* Modal for paragraph translation *@
<Modal @ref="ppModal" title="@_ppModalTitle" IsVerticallyCentered="true" Size="ModalSize.Large">
    <BodyTemplate>
        <p>@_ppModalTranslateFrom</p>
        <hr />
        <p>@_ppModalTranslateTo</p>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="OnHidePpModalClick">
            @UserService.GetUILabel("closeButton")
        </Button>
    </FooterTemplate>
</Modal>



@code {

    /// <summary>
    /// The language the book was written in
    /// </summary>
    [Parameter]
    public LanguageCode? LanguageFromCode { get; set; }
    /// <summary>
    /// The user's preferred UI language
    /// </summary>
    [Parameter]
    public LanguageCode? LanguageToCode { get; set; }

    private Modal ppModal = default!;
    private string? _ppModalTitle;
    private string? _ppModalTranslateFrom;
    private string? _ppModalTranslateTo;

    protected override async Task OnInitializedAsync()
    {

    }

    public async Task OnShowPpModalClick(Paragraph pp)
    {
        if (LanguageToCode == null || LanguageFromCode == null)
        {
            ErrorHandler.LogAndThrow(2240);
            return;
        }
        var sentences = pp.Sentences.OrderBy(x => x.Ordinal).Select(s => s.Text);
        var input = String.Join(" ", sentences);
        _ppModalTranslateFrom = input;
        var toLang = LanguageToCode.Code;
        var fromLang = LanguageFromCode.Code;
        _ppModalTitle = $"{UserService.GetUILabelF("ppModalTitle", [fromLang, toLang])}";

        // see if the translation already exists
        if (pp.ParagraphTranslations == null) 
        {
            pp.ParagraphTranslations = BookService.ParagraphTranslationsFetchByParagraph(pp);
        }
        var currentTranslation = pp.ParagraphTranslations
            .Where(x => x.Code == toLang)
            .FirstOrDefault();
        if(currentTranslation is not null)
        {
            _ppModalTranslateTo = currentTranslation.TranslationText;
        }
        else
        {
            var deeplResult = DeepLService.Translate(input, fromLang, toLang);
            if(deeplResult is not null)
            {
                _ppModalTranslateTo = deeplResult;
                // add to the DB
                // need to move this to the book service
                ParagraphTranslation ppt = new ParagraphTranslation()
                {
                    ParagraphId = (int)pp.Id,
                    Code = toLang, 
                    TranslationText = deeplResult
                };
                ppt = BookService.ParagraphTranslationSave(ppt);
                pp.ParagraphTranslations.Add(ppt);
            }
        }        

        await ppModal.ShowAsync();
    }
    private async Task OnHidePpModalClick()
    {
        await ppModal.HideAsync();
    }
}
