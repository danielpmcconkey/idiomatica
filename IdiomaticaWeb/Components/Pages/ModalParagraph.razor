@page "/ModalParagraph"
@rendermode InteractiveServer
@inject UserService UserService;
@inject IDbContextFactory<IdiomaticaContext> DbContextFactory;
@using System.Text;

@* Modal for paragraph translation *@
<Modal @ref="ppModal" title="@_title" IsVerticallyCentered="true" Size="ModalSize.Large">
    <BodyTemplate>
        <p>@_translateFrom</p>
        <hr />
        <p>@_translateTo</p>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="OnHidePpModalClick">
            @UserService.GetUILabel("closeButton")
        </Button>
    </FooterTemplate>
</Modal>



@code {

    [Parameter]
    public BookService BookService { get; set; }


    private Modal ppModal = default!;
    private string? _title;
    private string? _translateFrom;
    private string? _translateTo;

    protected override async Task OnInitializedAsync()
    {

    }

    public async Task OnShowPpModalClick(Paragraph pp)
    {

        var fromLang = BookService.LanguageFromCode;
        var toLang = BookService.LanguageToCode;
        _title = $"{UserService.GetUILabelF("ppModalTitle", [fromLang, toLang])}";
        var context = await DbContextFactory.CreateDbContextAsync();

        var translation = await BookService.ParagraphTranslate(context, pp, fromLang, toLang);
        _translateFrom = translation.input;
        _translateTo = translation.output;

        await ppModal.ShowAsync();
    }
    private async Task OnHidePpModalClick()
    {
        await ppModal.HideAsync();
    }
}
