@page "/ModalParagraph"
@rendermode InteractiveServer
@inject UserService UserService;
@inject IDbContextFactory<IdiomaticaContext> DbContextFactory;
@using System.Text;
@using Logic.Services.API

<div>
    @burp
</div>
@* Modal for paragraph translation *@
<Modal @ref="ppModal" title="@_title" IsVerticallyCentered="true" Size="ModalSize.Large">
    <BodyTemplate>
        <p>@_translateFrom</p>
        <hr />
        <p>@_translateTo</p>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="OnHidePpModalClick">
            @UserService.GetUILabel("closeButton")
        </Button>
    </FooterTemplate>
</Modal>



@code {

    [Parameter]
    public LanguageCode? LanguageFromCode { get; set; }
    [Parameter]
    public LanguageCode? LanguageToCode { get; set; }


    private Modal ppModal = default!;
    private string? _title;
    private string? _translateFrom;
    private string? _translateTo;
    private string burp = "hell";


    public async Task OnShowPpModalClick(Paragraph pp)
    {
        burp = "bloody";
        if (pp is null || pp.Id is null || pp.Id < 1)
        {
            ErrorHandler.LogAndThrow();
            return;
        }
        if (LanguageFromCode is null || string.IsNullOrEmpty(LanguageFromCode.Code)) 
        {
            ErrorHandler.LogAndThrow();
            return;
        }
        if (LanguageToCode is null || string.IsNullOrEmpty(LanguageToCode.Code))
        {
            ErrorHandler.LogAndThrow();
            return;
        }
        burp = "bloody2";
        _title = $"{UserService.GetUILabelF("ppModalTitle", [LanguageFromCode.LanguageName, LanguageToCode.LanguageName])}";
        var context = await DbContextFactory.CreateDbContextAsync();

        var translation = await ParagraphApi.ParagraphTranslateAsync(
            context, (int)pp.Id, LanguageFromCode.Code, LanguageToCode.Code);
        _translateFrom = translation.input;
        _translateTo = translation.output;
        burp = "bloody3";
        await ppModal.ShowAsync();
        burp = "bloody4";
    }
    private async Task OnHidePpModalClick()
    {
        await ppModal.HideAsync();
    }
}
