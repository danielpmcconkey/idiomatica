@page "/Book/Create"
@rendermode InteractiveServer
@inject BookService BookService;
@inject UserService UserService;
@inject IDbContextFactory<IdiomaticaContext> DbContextFactory
@using Logic.Services.API
@using Logic.Services.Level1;

<h3>@UserService.GetUILabel("NewBook")</h3>
<ErrorAlert ErrorState="errorState"></ErrorAlert>
<AuthorizeView>
    <Authorized>
        @if(_isSaveSuccess)
        {
            <div>
                <Alert @ref="successAlert" Color="AlertColor.Primary" Dismissable="true">
                    <Icon Name="IconName.InfoCircleFill" class="me-2"></Icon>
                    <p>@UserService.GetUILabel("bcSuccess")</p>
                    <div >
                        <Button Type="ButtonType.Link" 
                                Size="Size.Small" 
                                Color="ButtonColor.Success" 
                                To="@_newBookUrl">
                            @UserService.GetUILabel("bcStartReading")
                        </Button>
                        <Button Type="ButtonType.Link" 
                                Size="Size.Small" 
                                Color="ButtonColor.Primary"
                                To="/Books/Mine">
                            @UserService.GetUILabel("navYourBookshelf")
                        </Button>
                        <Button Type="ButtonType.Link" 
                                Size="Size.Small" 
                                Color="ButtonColor.Secondary" 
                                To="/Book/Create">
                            @UserService.GetUILabel("navNewBook")
                        </Button>
                    </div>
                </Alert>
            </div>
        }
        else
        {
            <form method="post" @onsubmit="OnSaveClickAsync" @formname="CreateBookForm">
                <AntiforgeryToken />
                <div class="mb-3">
                    <label class="form-label" 
                           for="TitleInput">
                        @UserService.GetUILabel("bcTitle")
                    </label>
                    <InputText id="TitleInput" 
                               class="@_titleInputCss"
                               @bind-Value="_titleInput"
                               />
                </div>
                <div class="mb-3">
                    <label class="form-label"
                           for="LanguageInput">
                        @UserService.GetUILabel("bcLanguage")
                    </label>
                    <InputSelect id="LanguageInput"
                                 class="@_languageCodeInputCss"
                                 @bind-Value="_languageCodeInput">
                        <option selected disabled>@UserService.GetUILabel("bcSelectLanguage")</option>
                        @foreach (var (key, value) in BookListDataPacket.LanguageOptions)
                        {
                            <option value="@key">@value.LanguageName</option>
                        }
                    </InputSelect>
                </div>
                <div class="mb-3">
                    <label class="form-label"
                           for="UrlInput">
                        @UserService.GetUILabel("sourceURI")
                    </label>
                    <InputText id="UrlInput"
                               class="form-control is-valid"
                               @bind-Value="_sourceURIInput" />
                </div>
                <div class="mb-3">
                    <label class="form-label" >
                        @UserService.GetUILabel("bcText")
                    </label>
                    <LargeVolumeTextArea @ref="_largeVolumeTextArea" IsRequired="true" />
                </div>
                <div>
                    @if(_isSaving)
                    {
                        <Button Color="ButtonColor.Primary" 
                                Loading="true" 
                                LoadingText="@UserService.GetUILabel("bcSaving")"
                                />
                    }
                    else
                    {
                        <button type="submit" disabled="@_isFormInValid"
                                class="btn btn-primary">
                            @UserService.GetUILabel("bcSubmit")
                        </button>
                    }
                </div>
            </form>
        }
    </Authorized>
    <NotAuthorized>
        <p>@UserService.GetUILabel("notLoggedIn")</p>
    </NotAuthorized>
</AuthorizeView>

@code {

    private bool _isFormInValid { get
        {
            if (string.IsNullOrEmpty(_titleInput)) return true;
            if (string.IsNullOrEmpty(_languageCodeInput)) return true;
            //if (string.IsNullOrEmpty(_textInput)) return true;
            return false;
        }
    }
    public ErrorState errorState = new ErrorState() { isError = false, errorMessage = "" };
    private bool _isSaveSuccess = false;
    private int _newBookId = 0;
    private string _newBookUrl
    {
        get { return $"/Book/{_newBookId}/Read/"; }
    }

    private Button _saveButton;
    private bool _isSaving = false;
    private LargeVolumeTextArea _largeVolumeTextArea;

    private string _titleInput;
    private string? _sourceURIInput;
    //private string _textInput { get { return _largeVolumeTextArea.TextValue; } }
    private string _languageCodeInput;
    private Alert successAlert;

    private string _titleInputCss { get
        {
            if (string.IsNullOrEmpty(_titleInput)) return "form-control is-invalid";
            return "form-control is-valid";
        }
    }
    private string _languageCodeInputCss
    {
        get
        {
            if (string.IsNullOrEmpty(_languageCodeInput)) return "form-select is-invalid";
            return "form-select is-valid";
        }
    }
    private User? _loggedInUser = null;
    private BookListDataPacket BookListDataPacket = new (); // used only for the built in language options dict



    protected override async Task OnInitializedAsync()
    {
        try
        {
            var context = await DbContextFactory.CreateDbContextAsync();
            _loggedInUser = await UserService.GetLoggedInUserAsync(context);
            BookListDataPacket = new (context, false);
        }
        catch (IdiomaticaException ex)
        {
            errorState.isError = true;
            errorState.errorMessage = UserService.GetUILabel("bookCreateInitializationError");
            errorState.code = ex.code;
            StateHasChanged();
            return;
        }
        catch (Exception ex)
        {
            errorState.isError = true;
            errorState.errorMessage = UserService.GetUILabel("bookCreateInitializationError");
            StateHasChanged();
        }
    }
    private async Task OnSaveClickAsync()
    {
        _isSaving = true;
        var context = await DbContextFactory.CreateDbContextAsync();
        try
        {
            await context.Database.BeginTransactionAsync();

            string textInput = await _largeVolumeTextArea.GetTextValue();

            Book? book = await BookApiL1.BookCreateAndSaveAsync(context, _titleInput, _languageCodeInput, _sourceURIInput, textInput);
            if(book is null || book.Id is null || book.Id < 1)
            {
                ErrorHandler.LogAndThrow();
                return;
            }
            int bookId = (int)book.Id;
            // add the book stats
            await BookStatApi.BookStatsCreateAndSaveAsync(context, bookId);
            // now create the book user for teh logged in user
            if(_loggedInUser is null || _loggedInUser.Id is null || _loggedInUser.Id < 1)
            {
                ErrorHandler.LogAndThrow();
                return;
            }
            var bookUser = await BookUserApiL1.BookUserCreateAsync(context, bookId, (int)_loggedInUser.Id);

            await context.Database.CommitTransactionAsync();

            // throw up a success message
            _isSaveSuccess = true;
            _newBookId = bookId;
        }
        catch (IdiomaticaException ex)
        {
            await context.Database.RollbackTransactionAsync();
            errorState.isError = true;
            errorState.errorMessage = UserService.GetUILabel("bookCreateSaveError");
            errorState.code = ex.code;
            StateHasChanged();
            return;
        }
        catch (Exception ex)
        {
            errorState.isError = true;
            errorState.errorMessage = UserService.GetUILabel("bookCreateSaveError");
            StateHasChanged();
        }

        _isSaving = false;
    }
}
