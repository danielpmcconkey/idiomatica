@using Logic.Services.API
@rendermode InteractiveServer
@inject UserService UserService;
@inject IDbContextFactory<IdiomaticaContext> DbContextFactory;
@inject ILogger<IdiomaticaLogger> Logger;


@if (_isLoading)
{
    <Button Color="ButtonColor.Primary" Loading="true" LoadingText="@UserService.GetUILabel("loading")" />
}
else
{
    <div class="row">
        <div class="col">

            @foreach (var tag in _tags)
            {
                <TagBadge BookId="BookId" BookTag="tag" OnRefreshRowAsync="RefreshTags" />
            }

        </div>
        <div class="col">
            <form method="post" @onsubmit="OnAddTagAsync">
                <div class="input-group">
                    <InputText @bind-Value="_addTagInput" />
                    <Button Color="ButtonColor.Secondary"
                            Type="ButtonType.Submit"
                            Size="Size.Small">
                        @UserService.GetUILabel("bookListAddTag")
                    </Button>
                </div>
            </form>
        </div>
    </div>
}
@code {
    [Parameter]
    public int? BookId { get; set; }
    private List<BookTag> _tags = new List<BookTag>();
    private string? _addTagInput;
    private User? _loggedInUser;
    public ErrorState errorState = new ErrorState() { isError = false, errorMessage = "" };
    private bool _isLoading = false;
    const int LoadingDelayMiliseconds = 500;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _isLoading = true;
            var t_delay = Task.Delay(LoadingDelayMiliseconds);

            var context = await DbContextFactory.CreateDbContextAsync();
            _loggedInUser = await UserService.GetLoggedInUserAsync(context);
            if (_loggedInUser is null || _loggedInUser.Id is null || _loggedInUser.Id < 1)
            {
                ErrorHandler.LogAndThrow(2450);
                return;
            }
            if (BookId is not null)
            {
                _tags = BookTagApi.BookTagsGetByBookIdAndUserId(context, (int)BookId, (int)_loggedInUser.Id);
            }
            
            await t_delay;
            _isLoading = false;
        }
        catch (IdiomaticaException ex)
        {
            errorState.isError = true;
            errorState.errorMessage = UserService.GetUILabel("readInitializationError");
            errorState.code = ex.code;
            StateHasChanged();
            return;
        }
        catch (Exception ex)
        {
            errorState.isError = true;
            errorState.errorMessage = UserService.GetUILabel("readInitializationError");
            StateHasChanged();
            return;
        }
    }
    private async Task RefreshTags()
    {
        if (_loggedInUser == null || _loggedInUser.Id == null || _loggedInUser.Id < 1) return;
        

        try
        {
            _isLoading = true;
            var t_delay = Task.Delay(LoadingDelayMiliseconds);
            var context = await DbContextFactory.CreateDbContextAsync();
            if (_loggedInUser is null || _loggedInUser.Id is null || _loggedInUser.Id < 1)
            {
                ErrorHandler.LogAndThrow();
                return;
            }
            if (BookId is not null)
            {
                _tags = await BookTagApi.BookTagsGetByBookIdAndUserIdAsync(
                    context, (int)BookId, (int)_loggedInUser.Id);
            }
            await t_delay;
            _isLoading = false;
        }
        catch (IdiomaticaException ex)
        {
            errorState.isError = true;
            errorState.errorMessage = UserService.GetUILabel("bookListAddTagError");
            errorState.code = ex.code;
            StateHasChanged();
            return;
        }
    }
    private async Task OnAddTagAsync()
    {
        if (_loggedInUser == null || _loggedInUser.Id == null || _loggedInUser.Id < 1) return;
        if (_addTagInput == null) return;
        var sanitized = _addTagInput.Trim().ToLower();
        if (sanitized == string.Empty) return;

        try
        {
            _isLoading = true;
            var t_delay = Task.Delay(LoadingDelayMiliseconds);
            var context = await DbContextFactory.CreateDbContextAsync();
            if (_loggedInUser is null || _loggedInUser.Id is null || _loggedInUser.Id < 1)
            {
                ErrorHandler.LogAndThrow();
                return;
            }
            if (BookId is null || BookId < 1)
            {
                ErrorHandler.LogAndThrow();
                return;
            }
            BookTagApi.BookTagAdd(context, (int)BookId, (int)_loggedInUser.Id, sanitized);
            _tags = BookTagApi.BookTagsGetByBookIdAndUserId(context, (int)BookId, (int)_loggedInUser.Id);
            await t_delay;
            _isLoading = false;
        }
        catch (IdiomaticaException ex)
        {
            errorState.isError = true;
            errorState.errorMessage = UserService.GetUILabel("bookListAddTagError");
            errorState.code = ex.code;
            StateHasChanged();
            return;
        }
    }
}
