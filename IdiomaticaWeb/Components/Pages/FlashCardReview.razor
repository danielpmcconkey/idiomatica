@page "/FlashCard/Review"
@rendermode InteractiveServer
@inject FlashCardService FlashCardService;
@inject UserService UserService;
@inject IDbContextFactory<IdiomaticaContext> DbContextFactory


<ErrorAlert ErrorState="errorState"></ErrorAlert>
<h3>Flash Card Review</h3>
<AuthorizeView>
    <Authorized>
        @if (_isLoading)
        {
            <Button Color="ButtonColor.Primary"
                    Loading="true"
                    LoadingText="@UserService.GetUILabel("fcLoading")" />
        }
        @if (FlashCardService.IsDeckComplete)
        {
            <Alert Color="AlertColor.Success"> 
                <Icon Name="IconName.CheckCircleFill" class="me-2"></Icon>
                @UserService.GetUILabel("fcDeckComplete")
            </Alert>
        }
        @if (FlashCardService.IsDeckDefined == false)
        {
            <form method="post" @onsubmit="OnGetCardsClickAsync" @formname="GetCardsForm">
                <div class="mb-3">
                    <label class="form-label"
                           for="LanguageInput">
                        @UserService.GetUILabel("fcLanguage")
                    </label>
                    <InputSelect id="LanguageInput"
                                 class="@_languageInputCss"
                                 @bind-Value="FlashCardService.LanguageInput">
                        <option value="0" selected disabled>@UserService.GetUILabel("fcSelectLanguage")</option>
                        @foreach (var (key, value) in FlashCardService.LanguageOptions)
                        {
                            <option value="@key">@value.Language.Name</option>
                        }
                    </InputSelect>
                </div>
                <div class="mb-3">
                    <label class="form-label"
                           for="numNewCardsInput">
                        @UserService.GetUILabel("fcNumNewCardsLabel")
                    </label>
                    <InputSelect id="numNewCardsInput"
                                 class="@_numNewCardsInputCss"
                                 @bind-Value="FlashCardService.NumNewCardsInput">
                        @foreach (var value in FlashCardService.NumNewCardOptions)
                        {
                            <option value="@value">@value</option>
                        }
                    </InputSelect>
                </div>
                <div class="mb-3">
                    <label class="form-label"
                           for="numOldCardsInput">
                        @UserService.GetUILabel("fcNumOldCardsLabel")
                    </label>
                    <InputSelect id="numOldCardsInput"
                                 class="@_numOldCardsInputCss"
                                 @bind-Value="FlashCardService.NumOldCardsInput">
                        @foreach (var value in FlashCardService.NumOldCardOptions)
                        {
                            <option value="@value">@value</option>
                        }
                    </InputSelect>
                </div>
                <div>
                    <button type="submit" disabled="@_isFormInValid"
                            class="btn btn-primary">
                        @UserService.GetUILabel("fcCreateDeck")
                    </button>
                
                </div>
            </form>
        }
        
        <FlashCardView FlashCardService="@FlashCardService" CardCss="@_cardCss" />
        

        
        
    </Authorized>
    <NotAuthorized>
        <p>@UserService.GetUILabel("notLoggedIn")</p>
    </NotAuthorized>
</AuthorizeView>
@code {
    public ErrorState errorState = new ErrorState() { isError = false, errorMessage = "" };

    private bool _isLoading = true;
    private FlashCardView _cardView = default!;
    private string _languageInputCss
    {
        get
        {
            if (FlashCardService.LanguageInput == 0) return "form-select is-invalid";
            return "form-select is-valid";
        }
    }
    private string _numNewCardsInputCss
    {
        get
        {
            if (FlashCardService.NumNewCardsInput > -1 && FlashCardService.NumNewCardsInput <= FlashCardService.MaxNewCardsNew) return "form-select is-invalid";
            return "form-select is-valid";
        }
    }
    private string _numOldCardsInputCss
    {
        get
        {
            if (FlashCardService.NumOldCardsInput > -1 && FlashCardService.NumOldCardsInput <= FlashCardService.MaxNewCardsReview) return "form-select is-invalid";
            return "form-select is-valid";
        }
    }
    private bool _isFormInValid
    {
        get
        {
            if (FlashCardService.LanguageInput == 0) return true;
            if (FlashCardService.NumNewCardsInput < 0 || FlashCardService.NumNewCardsInput > FlashCardService.MaxNewCardsNew) return true;
            if (FlashCardService.NumOldCardsInput < 0 || FlashCardService.NumOldCardsInput > FlashCardService.MaxNewCardsReview) return true;
            return false;
        }
    }
    public bool _shouldHideCard = true;
    private string _cardCss
    {
        get
        {
            if (_shouldHideCard) return "flashCardInvisible";
            return "flashCardVisible";
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (FlashCardService.IsDataInit == false)
            {
                _isLoading = true;
                var t_delay = Task.Delay(FlashCardService.LoadingDelayMiliseconds);
                var context = await DbContextFactory.CreateDbContextAsync();
                await FlashCardService.InitDataAsync(context);
                _shouldHideCard = true;
                await t_delay;
                _isLoading = false;
            }
            _isLoading = false;
        }
        catch (IdiomaticaException ex)
        {
            errorState.isError = true;
            errorState.errorMessage = UserService.GetUILabel("flashCardReviewInitializationError");
            errorState.code = ex.code;
            StateHasChanged();
            return;
        }
        catch (Exception ex)
        {
            errorState.isError = true;
            errorState.errorMessage = UserService.GetUILabel("flashCardReviewInitializationError");
            StateHasChanged();
            return;
        }
    }
    private async Task OnGetCardsClickAsync()
    {
        var context = await DbContextFactory.CreateDbContextAsync();
        using var transaction = await context.Database.BeginTransactionAsync();
        try
        {
            _isLoading = true;
            var t_delay = Task.Delay(FlashCardService.LoadingDelayMiliseconds);
            await FlashCardService.DeckCreateAsync(context);
            await transaction.CommitAsync();
            _shouldHideCard = false;
            _isLoading = false;
            await t_delay;
            _isLoading = false;
        }
        catch (IdiomaticaException ex)
        {
            await transaction.RollbackAsync();
            errorState.isError = true;
            errorState.errorMessage = UserService.GetUILabel("flashCardReviewInitializationError");
            errorState.code = ex.code;
            StateHasChanged();
            return;
        }
        catch (Exception ex)
        {
            await transaction.RollbackAsync();
            errorState.isError = true;
            errorState.errorMessage = UserService.GetUILabel("flashCardReviewInitializationError");
            StateHasChanged();
        }
    }
    
    
    
}
