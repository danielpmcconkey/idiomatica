@page "/FlashCard/Review"
@rendermode InteractiveServer
@inject LoginService UserService;
@inject IDbContextFactory<IdiomaticaContext> DbContextFactory
@using Logic.Services.API;
@using Model.Enums


<ErrorAlert ErrorState="errorState"></ErrorAlert>
<h3>Flash Card Review</h3>
<AuthorizeView>
    <Authorized>
        
        
        
            
                @if (_isLoading)
                {
                    <div>
                        <Button Color="ButtonColor.Primary"
                                Loading="true"
                                LoadingText="@UserService.GetUILabel("fcLoading")" />
                    </div>
                    
                }
                else
                {
                    <div class="mb-3">
                        <label class="form-label"
                               for="LanguageInput">
                            @UserService.GetUILabel("fcLanguage")
                        </label>
                        <InputSelect id="LanguageInput"
                                     class="@_languageInputCss"
                                     @bind-Value="LanguageInput">
                            <option value="" selected disabled>@UserService.GetUILabel("fcSelectLanguage")</option>
                           
                            @foreach (var (key, value) in LanguageOptions)
                            {
                                @if (value is not null && value.Name is not null)
                                {
                                    <option value="@value.Code">@value.Name</option>
                                }

                            }
                        </InputSelect>
                    </div>
                }

                @if (_isLoading)
                {
                    <div>
                        <Button Color="ButtonColor.Primary"
                                Loading="true"
                                LoadingText="@UserService.GetUILabel("fcLoading")" />
                    </div>
                }
                else
                {
                    <div>
                <Button Color="ButtonColor.Primary"
                        Disabled="@_isFormInValid"
                        @onclick="OnNextCardClickAsync">
                            @UserService.GetUILabel("fcPullACard")
                        </Button>

                    </div>
                }
        
        
        <FlashCardView @ref="FlashCardView"
                       CurrentCard="@CurrentCard"
                       CardCss="@_cardCss"
                       UiLanguageCode="@UiLanguageCode"
                       OnNextCardClickFunction="OnNextCardClickAsync" />
        

        
        
    </Authorized>
    <NotAuthorized>
        <p>@UserService.GetUILabel("notLoggedIn")</p>
    </NotAuthorized>
</AuthorizeView>
@code {
    public ErrorState errorState = new ErrorState() { isError = false, errorMessage = "" };
    private int LoadingDelayMiliseconds = 500;
    User? LoggedInUser = null;
    private bool _isLoading = true;
    private FlashCardView FlashCardView = default!;
    private FlashCard? CurrentCard = null;
    private string _languageInputCss
    {
        get
        {
            if (LanguageInput is null) return "form-select is-invalid";
            return "form-select is-valid";
        }
    }
    // private string _numNewCardsInputCss
    // {
    //     get
    //     {
    //         if (NumNewCardsInput < 0) return "form-select is-invalid";
    //         if (NumNewCardsInput > MaxNewCardsNew) return "form-select is-invalid";
    //         return "form-select is-valid";
    //     }
    // }
    // private string _numOldCardsInputCss
    // {
    //     get
    //     {
    //         if (NumOldCardsInput < 0) return "form-select is-invalid";
    //         if (NumOldCardsInput > MaxNewCardsReview) return "form-select is-invalid";
    //         return "form-select is-valid";
    //     }
    // }
    private bool _isFormInValid
    {
        get
        {
            if (LanguageInput is null) return true;
            // if (NumNewCardsInput < 0 || NumNewCardsInput > MaxNewCardsNew) return true;
            // if (NumOldCardsInput < 0 || NumOldCardsInput > MaxNewCardsReview) return true;
            return false;
        }
    }
    public bool _shouldHideCard = true;
    private string _cardCss
    {
        get
        {
            if (_shouldHideCard) return "flashCardInvisible";
            return "flashCardVisible";
        }
    }
    bool IsDataInit = false;
    // FlashCardDataPacket? FlashCardDataPacket;
    public AvailableLanguageCode? UiLanguageCode { get; set; } = null;
    // public string? LanguageCodeLearning { get; set; } = null;
    // public bool IsDeckDefined { get; set; } = false;
    // public bool IsDeckComplete { get; set; } = false;


    #region deck building form fields

    public AvailableLanguageCode? LanguageInput { get; set; } = null;
    public Dictionary<Guid, Language> LanguageOptions { get; set; } = [];
    // public int NumNewCardsInput { get; set; } = 0;
    // public int NumOldCardsInput { get; set; } = 0;
    // public List<int> NumNewCardOptions { get; set; } = new List<int>();
    // public List<int> NumOldCardOptions { get; set; } = new List<int>();
    // public int MaxNewCardsNew { get; set; } = 50;
    // public int MaxNewCardsReview { get; set; } = 50;
    public Language? LearningLanguagePreference;

    #endregion

    // public async Task RebuildDeckForm()
    // {
    //     await Task.Run(() =>
    //     {
    //         IsDeckDefined = false;
    //         IsDeckComplete = true;
    //         _shouldHideCard = true;
    //     });
    //     StateHasChanged();
    // }

    protected override async Task OnInitializedAsync()
    {
        try
        {

            var context = DbContextFactory.CreateDbContext();

            if (IsDataInit == false)
            {
                _isLoading = true;
                var t_delay = Task.Delay(LoadingDelayMiliseconds);
                var t_init = Task.Run(() => InitData());

                _shouldHideCard = true;
                await t_delay;
                await t_init;
                _isLoading = false;
            }
            _isLoading = false;
        }
        catch (IdiomaticaException ex)
        {
            errorState.isError = true;
            errorState.errorMessage = UserService.GetUILabel("flashCardReviewInitializationError");
            errorState.code = ex.code;
            StateHasChanged();
            return;
        }
        catch (Exception ex)
        {
            errorState.isError = true;
            errorState.errorMessage = UserService.GetUILabel("flashCardReviewInitializationError");
            StateHasChanged();
            return;
        }
    }
    private void InitData()
    {
        LoggedInUser = UserService.GetLoggedInUser(DbContextFactory);
        if (LoggedInUser is null) { ErrorHandler.LogAndThrow(); return; }

        var languageUsers = LanguageUserApi.LanguageUsersAndLanguageGetByUserId(
            DbContextFactory, LoggedInUser.Id);
        if (languageUsers is null || languageUsers.Count < 1) 
        { 
            ErrorHandler.LogAndThrow(); 
            return;
        }

        LanguageOptions = [];
        foreach(var lu in languageUsers)
        {
            if (lu.Language is null) { ErrorHandler.LogAndThrow(); return; }
            LanguageOptions.Add(lu.LanguageId, lu.Language);
        }

        LearningLanguagePreference = UserApi.UserSettingLearningLanguagReadByUserId(
            DbContextFactory, LoggedInUser.Id);
        if (LearningLanguagePreference is not null)
            LanguageInput = LearningLanguagePreference.Code;


        var lcObject = UserService.GetUiLanguageCode();
        if(lcObject is null) { ErrorHandler.LogAndThrow(); return; }
        UiLanguageCode = lcObject.Code;
        // if (NumNewCardOptions.Count == 0)
        // {
        //     for (int i = 0; i <= MaxNewCardsNew; i += 5)
        //     {
        //         NumNewCardOptions.Add(i);
        //     }
        // }
        // if (NumOldCardOptions.Count == 0)
        // {
        //     for (int i = 0; i <= MaxNewCardsReview; i += 5)
        //     {
        //         NumOldCardOptions.Add(i);
        //     }
        // }

    }
    // private void CreateDeck()
    // {
    //     if (LoggedInUser is null) { ErrorHandler.LogAndThrow(); return; }
    //     if (LanguageInput is null) { ErrorHandler.LogAndThrow(); return; }

    //     FlashCardDataPacket = OrchestrationApi.OrchestrateFlashCardDeckCreation(
    //         DbContextFactory, LoggedInUser.Id,
    //         (AvailableLanguageCode)LanguageInput, (int)NumNewCardsInput,
    //         (int)NumOldCardsInput);

    //     IsDeckDefined = true;
    //     IsDeckComplete = false;
    // }
    private async Task OnNextCardClickAsync()
    {
        try
        {
            if (LoggedInUser is null) { ErrorHandler.LogAndThrow(); return; }
            if (LanguageInput is null) { ErrorHandler.LogAndThrow(); return; }
            if (UiLanguageCode is null) { ErrorHandler.LogAndThrow(); return; }
            

            _isLoading = true;
            var t_delay = Task.Delay(LoadingDelayMiliseconds);
            CurrentCard = await OrchestrationApi.OrchestratePullFlashCardAsync(
                DbContextFactory, LoggedInUser.Id, (AvailableLanguageCode)LanguageInput,
                (AvailableLanguageCode)UiLanguageCode);
            StateHasChanged(); // this seems to "reset" the FlashCardView's data packet
            await Task.Run(() => FlashCardView.ResetCardProperties());
            _shouldHideCard = false;
            await t_delay;
            _isLoading = false;
        }
        catch (IdiomaticaException ex)
        {
            errorState.isError = true;
            errorState.errorMessage = UserService.GetUILabel("flashCardReviewInitializationError");
            errorState.code = ex.code;
            StateHasChanged();
            return;
        }
        catch (Exception ex)
        {
            errorState.isError = true;
            errorState.errorMessage = UserService.GetUILabel("flashCardReviewInitializationError");
            StateHasChanged();
        }
    }
    
    
    
}
