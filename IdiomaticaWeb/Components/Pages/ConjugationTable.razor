@page "/ConjugationTable"
@rendermode InteractiveServer
@inject UserService UserService;

@* This assumes spanish. will need to change to support other languages *@

<style>
    .piecePronoun {display:none;}
    .pieceCore {color:black;}
    .pieceRegular {color: #00cc00; font-weight:900;}
    .pieceIrregular {color: #cc0000; font-weight:900}
    .clubbedRow {background-color: #dedede;}
    .conjugationTranslation {display:none;}
    
</style>

@if (shouldShowTranslations)
{
    <div class="col-2">
        <button type="button" class="btn btn-primary"
                @onclick="@ToggleTranslations">
            @UserService.GetUILabel("btnHideTranslations")
        </button>
    </div>
}

else
{
    <div class="col-2">
        <button type="button" class="btn btn-primary"
                @onclick="@ToggleTranslations">
            @UserService.GetUILabel("btnShowTranslations")
        </button>
    </div>
}

<div class="border p-2">
    <h3>Participles of @infinitive</h3>
    <table class="table">
        
        <tbody>
            <tr>
                <th scope="row">Gerund:</th>
                <td>@gerund</td>
            </tr>
            <tr>
                <th scope="row">Past participle:</th>
                <td>@pastParticiple</td>
            </tr>
        </tbody>

    </table>
</div>
<div class="border p-2">
    <h3>Indicative conjugations of @infinitive</h3>
    <table class="table">
        <thead>
            <tr>
                <th></th>
                <th scope="col">Present</th>
                <th scope="col">Preterite</th>
                <th scope="col">Imperfect</th>
                <th scope="col">Conditional</th>
                <th scope="col">Future</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <th scope="row">yo</th>
                <td><Conjugation ShouldShowTranslations="@shouldShowTranslations" VerbConjugation="@presentYo" /></td>
                <td><Conjugation ShouldShowTranslations="@shouldShowTranslations" VerbConjugation="@preteriteYo" /></td>
                <td><Conjugation ShouldShowTranslations="@shouldShowTranslations" VerbConjugation="@imperfectYo" /></td>
                <td><Conjugation ShouldShowTranslations="@shouldShowTranslations" VerbConjugation="@conditionalYo" /></td>
                <td><Conjugation ShouldShowTranslations="@shouldShowTranslations" VerbConjugation="@futureYo" /></td>
            </tr>
            <tr>
                <th scope="row">tú</th>
                <td><Conjugation ShouldShowTranslations="@shouldShowTranslations" VerbConjugation="@presentTu" /></td>
                <td><Conjugation ShouldShowTranslations="@shouldShowTranslations" VerbConjugation="@preteriteTu" /></td>
                <td><Conjugation ShouldShowTranslations="@shouldShowTranslations" VerbConjugation="@imperfectTu" /></td>
                <td><Conjugation ShouldShowTranslations="@shouldShowTranslations" VerbConjugation="@conditionalTu" /></td>
                <td><Conjugation ShouldShowTranslations="@shouldShowTranslations" VerbConjugation="@futureTu" /></td>
            </tr>
            @if (shouldShowTranslations)
            {
                <tr class="clubbedRow">
                    <th scope="row">usted</th>
                    <td><Conjugation ShouldShowTranslations="@shouldShowTranslations" VerbConjugation="@presentUsted" /></td>
                    <td><Conjugation ShouldShowTranslations="@shouldShowTranslations" VerbConjugation="@preteriteUsted" /></td>
                    <td><Conjugation ShouldShowTranslations="@shouldShowTranslations" VerbConjugation="@imperfectUsted" /></td>
                    <td><Conjugation ShouldShowTranslations="@shouldShowTranslations" VerbConjugation="@conditionalUsted" /></td>
                    <td><Conjugation ShouldShowTranslations="@shouldShowTranslations" VerbConjugation="@futureUsted" /></td>
                </tr>
                <tr class="clubbedRow">
                    <th scope="row">él</th>
                    <td><Conjugation ShouldShowTranslations="@shouldShowTranslations" VerbConjugation="@presentEl" /></td>
                    <td><Conjugation ShouldShowTranslations="@shouldShowTranslations" VerbConjugation="@preteriteEl" /></td>
                    <td><Conjugation ShouldShowTranslations="@shouldShowTranslations" VerbConjugation="@imperfectEl" /></td>
                    <td><Conjugation ShouldShowTranslations="@shouldShowTranslations" VerbConjugation="@conditionalEl" /></td>
                    <td><Conjugation ShouldShowTranslations="@shouldShowTranslations" VerbConjugation="@futureEl" /></td>
                </tr>
                <tr class="clubbedRow">
                    <th scope="row">ella</th>
                    <td><Conjugation ShouldShowTranslations="@shouldShowTranslations" VerbConjugation="@presentElla" /></td>
                    <td><Conjugation ShouldShowTranslations="@shouldShowTranslations" VerbConjugation="@preteriteElla" /></td>
                    <td><Conjugation ShouldShowTranslations="@shouldShowTranslations" VerbConjugation="@imperfectElla" /></td>
                    <td><Conjugation ShouldShowTranslations="@shouldShowTranslations" VerbConjugation="@conditionalElla" /></td>
                    <td><Conjugation ShouldShowTranslations="@shouldShowTranslations" VerbConjugation="@futureElla" /></td>
                </tr>
            }
            else
            {
                <tr>
                    <th scope="row">él/ella/usted</th>
                    <td><Conjugation ShouldShowTranslations="@shouldShowTranslations" VerbConjugation="@presentEl" /></td>
                    <td><Conjugation ShouldShowTranslations="@shouldShowTranslations" VerbConjugation="@preteriteEl" /></td>
                    <td><Conjugation ShouldShowTranslations="@shouldShowTranslations" VerbConjugation="@imperfectEl" /></td>
                    <td><Conjugation ShouldShowTranslations="@shouldShowTranslations" VerbConjugation="@conditionalEl" /></td>
                    <td><Conjugation ShouldShowTranslations="@shouldShowTranslations" VerbConjugation="@futureEl" /></td>
                </tr>
            }
            
            <tr>
                <th scope="row">nosotros</th>
                <td><Conjugation ShouldShowTranslations="@shouldShowTranslations" VerbConjugation="@presentNosotros" /></td>
                <td><Conjugation ShouldShowTranslations="@shouldShowTranslations" VerbConjugation="@preteriteNosotros" /></td>
                <td><Conjugation ShouldShowTranslations="@shouldShowTranslations" VerbConjugation="@imperfectNosotros" /></td>
                <td><Conjugation ShouldShowTranslations="@shouldShowTranslations" VerbConjugation="@conditionalNosotros" /></td>
                <td><Conjugation ShouldShowTranslations="@shouldShowTranslations" VerbConjugation="@futureNosotros" /></td>
            </tr>
            <tr>
                <th scope="row">vosotros</th>
                <td><Conjugation ShouldShowTranslations="@shouldShowTranslations" VerbConjugation="@presentVosotros" /></td>
                <td><Conjugation ShouldShowTranslations="@shouldShowTranslations" VerbConjugation="@preteriteVosotros" /></td>
                <td><Conjugation ShouldShowTranslations="@shouldShowTranslations" VerbConjugation="@imperfectVosotros" /></td>
                <td><Conjugation ShouldShowTranslations="@shouldShowTranslations" VerbConjugation="@conditionalVosotros" /></td>
                <td><Conjugation ShouldShowTranslations="@shouldShowTranslations" VerbConjugation="@futureVosotros" /></td>
            </tr>
            @if (shouldShowTranslations)
            {
                <tr class="clubbedRow">
                    <th scope="row">ustedes</th>
                    <td><Conjugation ShouldShowTranslations="@shouldShowTranslations" VerbConjugation="@presentUstedes" /></td>
                    <td><Conjugation ShouldShowTranslations="@shouldShowTranslations" VerbConjugation="@preteriteUstedes" /></td>
                    <td><Conjugation ShouldShowTranslations="@shouldShowTranslations" VerbConjugation="@imperfectUstedes" /></td>
                    <td><Conjugation ShouldShowTranslations="@shouldShowTranslations" VerbConjugation="@conditionalUstedes" /></td>
                    <td><Conjugation ShouldShowTranslations="@shouldShowTranslations" VerbConjugation="@futureUstedes" /></td>
                </tr>
                <tr class="clubbedRow">
                    <th scope="row">ellos</th>
                    <td><Conjugation ShouldShowTranslations="@shouldShowTranslations" VerbConjugation="@presentEllos" /></td>
                    <td><Conjugation ShouldShowTranslations="@shouldShowTranslations" VerbConjugation="@preteriteEllos" /></td>
                    <td><Conjugation ShouldShowTranslations="@shouldShowTranslations" VerbConjugation="@imperfectEllos" /></td>
                    <td><Conjugation ShouldShowTranslations="@shouldShowTranslations" VerbConjugation="@conditionalEllos" /></td>
                    <td><Conjugation ShouldShowTranslations="@shouldShowTranslations" VerbConjugation="@futureEllos" /></td>
                </tr>
                <tr class="clubbedRow">
                    <th scope="row">ellas</th>
                    <td><Conjugation ShouldShowTranslations="@shouldShowTranslations" VerbConjugation="@presentEllas" /></td>
                    <td><Conjugation ShouldShowTranslations="@shouldShowTranslations" VerbConjugation="@preteriteEllas" /></td>
                    <td><Conjugation ShouldShowTranslations="@shouldShowTranslations" VerbConjugation="@imperfectEllas" /></td>
                    <td><Conjugation ShouldShowTranslations="@shouldShowTranslations" VerbConjugation="@conditionalEllas" /></td>
                    <td><Conjugation ShouldShowTranslations="@shouldShowTranslations" VerbConjugation="@futureEllas" /></td>
                </tr>
            }
            else
            {
                <tr>
                    <th scope="row">ellos/ellas/ustedes</th>
                    <td><Conjugation ShouldShowTranslations="@shouldShowTranslations" VerbConjugation="@presentEllos" /></td>
                    <td><Conjugation ShouldShowTranslations="@shouldShowTranslations" VerbConjugation="@preteriteEllos" /></td>
                    <td><Conjugation ShouldShowTranslations="@shouldShowTranslations" VerbConjugation="@imperfectEllos" /></td>
                    <td><Conjugation ShouldShowTranslations="@shouldShowTranslations" VerbConjugation="@conditionalEllos" /></td>
                    <td><Conjugation ShouldShowTranslations="@shouldShowTranslations" VerbConjugation="@futureEllos" /></td>
                </tr>
            }
            
        </tbody>

    </table>
</div>

<div class="border p-2">
    <h3>Subjunctive conjugations of @infinitive</h3>
    <table class="table">
        <thead>
            <tr>
                <th></th>
                <th scope="col">Subjunctive Present</th>
                <th scope="col">Subjunctive Imperfect</th>
                <th scope="col">Subjunctive Future</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <th scope="row">yo</th>
                <td><Conjugation ShouldShowTranslations="@shouldShowTranslations" VerbConjugation="@subjunctivePresentYo" /></td>
                <td><Conjugation ShouldShowTranslations="@shouldShowTranslations" VerbConjugation="@subjunctiveImperfectYo" /></td>
                <td><Conjugation ShouldShowTranslations="@shouldShowTranslations" VerbConjugation="@subjunctiveFutureYo" /></td>
            </tr>
            <tr>
                <th scope="row">tú</th>
                <td><Conjugation ShouldShowTranslations="@shouldShowTranslations" VerbConjugation="@subjunctivePresentTu" /></td>
                <td><Conjugation ShouldShowTranslations="@shouldShowTranslations" VerbConjugation="@subjunctiveImperfectTu" /></td>
                <td><Conjugation ShouldShowTranslations="@shouldShowTranslations" VerbConjugation="@subjunctiveFutureTu" /></td>
            </tr>
            @if (shouldShowTranslations)
            {
                <tr class="clubbedRow">
                    <th scope="row">usted</th>
                    <td><Conjugation VerbConjugation="@subjunctivePresentUsted" /></td>
                    <td><Conjugation VerbConjugation="@subjunctiveImperfectUsted" /></td>
                    <td><Conjugation VerbConjugation="@subjunctiveFutureUsted" /></td>
                </tr>
                <tr class="clubbedRow">
                    <th scope="row">él</th>
                    <td><Conjugation ShouldShowTranslations="@shouldShowTranslations" VerbConjugation="@subjunctivePresentEl" /></td>
                    <td><Conjugation ShouldShowTranslations="@shouldShowTranslations" VerbConjugation="@subjunctiveImperfectEl" /></td>
                    <td><Conjugation ShouldShowTranslations="@shouldShowTranslations" VerbConjugation="@subjunctiveFutureEl" /></td>
                </tr>
                <tr class="clubbedRow">
                    <th scope="row">ella</th>
                    <td><Conjugation ShouldShowTranslations="@shouldShowTranslations" VerbConjugation="@subjunctivePresentElla" /></td>
                    <td><Conjugation ShouldShowTranslations="@shouldShowTranslations" VerbConjugation="@subjunctiveImperfectElla" /></td>
                    <td><Conjugation ShouldShowTranslations="@shouldShowTranslations" VerbConjugation="@subjunctiveFutureElla" /></td>
                </tr>
            }
            else
            {
                <tr>
                    <th scope="row">él/ella/usted</th>
                    <td><Conjugation ShouldShowTranslations="@shouldShowTranslations" VerbConjugation="@subjunctivePresentEl" /></td>
                    <td><Conjugation ShouldShowTranslations="@shouldShowTranslations" VerbConjugation="@subjunctiveImperfectEl" /></td>
                    <td><Conjugation ShouldShowTranslations="@shouldShowTranslations" VerbConjugation="@subjunctiveFutureEl" /></td>
                </tr>
            }
            
            <tr>
                <th scope="row">nosotros</th>
                <td><Conjugation ShouldShowTranslations="@shouldShowTranslations" VerbConjugation="@subjunctivePresentNosotros" /></td>
                <td><Conjugation ShouldShowTranslations="@shouldShowTranslations" VerbConjugation="@subjunctiveImperfectNosotros" /></td>
                <td><Conjugation ShouldShowTranslations="@shouldShowTranslations" VerbConjugation="@subjunctiveFutureNosotros" /></td>
            </tr>
            <tr>
                <th scope="row">vosotros</th>
                <td><Conjugation ShouldShowTranslations="@shouldShowTranslations" VerbConjugation="@subjunctivePresentVosotros" /></td>
                <td><Conjugation ShouldShowTranslations="@shouldShowTranslations" VerbConjugation="@subjunctiveImperfectVosotros" /></td>
                <td><Conjugation ShouldShowTranslations="@shouldShowTranslations" VerbConjugation="@subjunctiveFutureVosotros" /></td>
            </tr>
            @if (shouldShowTranslations)
            {
                <tr class="clubbedRow">
                    <th scope="row">ustedes</th>
                    <td><Conjugation ShouldShowTranslations="@shouldShowTranslations" VerbConjugation="@subjunctivePresentUstedes" /></td>
                    <td><Conjugation ShouldShowTranslations="@shouldShowTranslations" VerbConjugation="@subjunctiveImperfectUstedes" /></td>
                    <td><Conjugation ShouldShowTranslations="@shouldShowTranslations" VerbConjugation="@subjunctiveFutureUstedes" /></td>
                </tr>
                <tr class="clubbedRow">
                    <th scope="row">ellos</th>
                    <td><Conjugation ShouldShowTranslations="@shouldShowTranslations" VerbConjugation="@subjunctivePresentEllos" /></td>
                    <td><Conjugation ShouldShowTranslations="@shouldShowTranslations" VerbConjugation="@subjunctiveImperfectEllos" /></td>
                    <td><Conjugation ShouldShowTranslations="@shouldShowTranslations" VerbConjugation="@subjunctiveFutureEllos" /></td>
                </tr>
                <tr class="clubbedRow">
                    <th scope="row">ellas</th>
                    <td><Conjugation ShouldShowTranslations="@shouldShowTranslations" VerbConjugation="@subjunctivePresentEllas" /></td>
                    <td><Conjugation ShouldShowTranslations="@shouldShowTranslations" VerbConjugation="@subjunctiveImperfectEllas" /></td>
                    <td><Conjugation ShouldShowTranslations="@shouldShowTranslations" VerbConjugation="@subjunctiveFutureEllas" /></td>
                </tr>
            }
            else
            {
                <tr>
                    <th scope="row">ellos/ellas/ustedes</th>
                    <td><Conjugation ShouldShowTranslations="@shouldShowTranslations" VerbConjugation="@subjunctivePresentEllos" /></td>
                    <td><Conjugation ShouldShowTranslations="@shouldShowTranslations" VerbConjugation="@subjunctiveImperfectEllos" /></td>
                    <td><Conjugation ShouldShowTranslations="@shouldShowTranslations" VerbConjugation="@subjunctiveFutureEllos" /></td>
                </tr>
            }
        </tbody>

    </table>
</div>

<div class="border p-2">
    <h3>Imperative conjugations of @infinitive</h3>
    <table class="table">
        <thead>
            <tr>
                <th></th>
                <th scope="col">Affirmative Imperative</th>
                <th scope="col">Negative Imperative</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <th scope="row">tú</th>
                <td><Conjugation ShouldShowTranslations="@shouldShowTranslations" VerbConjugation="@affirmativeImperativeTu" /></td>
                <td><Conjugation ShouldShowTranslations="@shouldShowTranslations" VerbConjugation="@negativeImperativeTu" /></td>
            </tr>
            <tr>
                <th scope="row">usted</th>
                <td><Conjugation ShouldShowTranslations="@shouldShowTranslations" VerbConjugation="@affirmativeImperativeUsted" /></td>
                <td><Conjugation ShouldShowTranslations="@shouldShowTranslations" VerbConjugation="@negativeImperativeUsted" /></td>
            </tr>
            <tr>
                <th scope="row">nosotros</th>
                <td><Conjugation ShouldShowTranslations="@shouldShowTranslations" VerbConjugation="@affirmativeImperativeNosotros" /></td>
                <td><Conjugation ShouldShowTranslations="@shouldShowTranslations" VerbConjugation="@negativeImperativeNosotros" /></td>
            </tr>
            <tr>
                <th scope="row">vosotros</th>
                <td><Conjugation ShouldShowTranslations="@shouldShowTranslations" VerbConjugation="@affirmativeImperativeVosotros" /></td>
                <td><Conjugation ShouldShowTranslations="@shouldShowTranslations" VerbConjugation="@negativeImperativeVosotros" /></td>
            </tr>
            <tr>
                <th scope="row">ustedes</th>
                <td><Conjugation ShouldShowTranslations="@shouldShowTranslations" VerbConjugation="@affirmativeImperativeUstedes" /></td>
                <td><Conjugation ShouldShowTranslations="@shouldShowTranslations" VerbConjugation="@negativeImperativeUstedes" /></td>
            </tr>
        </tbody>
    </table>
</div>

@code {
    List<VerbConjugation> conjugations = [];
    public bool shouldShowTranslations = false;

    private string? infinitive { get; set; }
    private string? gerund { get; set; }
    private string? pastParticiple { get; set; }

    private VerbConjugation? presentYo { get; set; }
    private VerbConjugation? presentTu { get; set; }
    private VerbConjugation? presentEl { get; set; }
    private VerbConjugation? presentElla { get; set; }
    private VerbConjugation? presentUsted { get; set; }
    private VerbConjugation? presentNosotros { get; set; }
    private VerbConjugation? presentVosotros { get; set; }
    private VerbConjugation? presentUstedes { get; set; }
    private VerbConjugation? presentEllos { get; set; }
    private VerbConjugation? presentEllas { get; set; }

    private VerbConjugation? preteriteYo { get; set; }
    private VerbConjugation? preteriteTu { get; set; }
    private VerbConjugation? preteriteEl { get; set; }
    private VerbConjugation? preteriteElla { get; set; }
    private VerbConjugation? preteriteUsted { get; set; }
    private VerbConjugation? preteriteNosotros { get; set; }
    private VerbConjugation? preteriteVosotros { get; set; }
    private VerbConjugation? preteriteUstedes { get; set; }
    private VerbConjugation? preteriteEllos { get; set; }
    private VerbConjugation? preteriteEllas { get; set; }

    private VerbConjugation? imperfectYo { get; set; }
    private VerbConjugation? imperfectTu { get; set; }
    private VerbConjugation? imperfectEl { get; set; }
    private VerbConjugation? imperfectElla { get; set; }
    private VerbConjugation? imperfectUsted { get; set; }
    private VerbConjugation? imperfectNosotros { get; set; }
    private VerbConjugation? imperfectVosotros { get; set; }
    private VerbConjugation? imperfectUstedes { get; set; }
    private VerbConjugation? imperfectEllos { get; set; }
    private VerbConjugation? imperfectEllas { get; set; }

    private VerbConjugation? conditionalYo { get; set; }
    private VerbConjugation? conditionalTu { get; set; }
    private VerbConjugation? conditionalEl { get; set; }
    private VerbConjugation? conditionalElla { get; set; }
    private VerbConjugation? conditionalUsted { get; set; }
    private VerbConjugation? conditionalNosotros { get; set; }
    private VerbConjugation? conditionalVosotros { get; set; }
    private VerbConjugation? conditionalUstedes { get; set; }
    private VerbConjugation? conditionalEllos { get; set; }
    private VerbConjugation? conditionalEllas { get; set; }

    private VerbConjugation? futureYo { get; set; }
    private VerbConjugation? futureTu { get; set; }
    private VerbConjugation? futureEl { get; set; }
    private VerbConjugation? futureElla { get; set; }
    private VerbConjugation? futureUsted { get; set; }
    private VerbConjugation? futureNosotros { get; set; }
    private VerbConjugation? futureVosotros { get; set; }
    private VerbConjugation? futureUstedes { get; set; }
    private VerbConjugation? futureEllos { get; set; }
    private VerbConjugation? futureEllas { get; set; }

    private VerbConjugation? subjunctivePresentYo { get; set; }
    private VerbConjugation? subjunctivePresentTu { get; set; }
    private VerbConjugation? subjunctivePresentEl { get; set; }
    private VerbConjugation? subjunctivePresentElla { get; set; }
    private VerbConjugation? subjunctivePresentUsted { get; set; }
    private VerbConjugation? subjunctivePresentNosotros { get; set; }
    private VerbConjugation? subjunctivePresentVosotros { get; set; }
    private VerbConjugation? subjunctivePresentUstedes { get; set; }
    private VerbConjugation? subjunctivePresentEllos { get; set; }
    private VerbConjugation? subjunctivePresentEllas { get; set; }

    private VerbConjugation? subjunctiveImperfectYo { get; set; }
    private VerbConjugation? subjunctiveImperfectTu { get; set; }
    private VerbConjugation? subjunctiveImperfectEl { get; set; }
    private VerbConjugation? subjunctiveImperfectElla { get; set; }
    private VerbConjugation? subjunctiveImperfectUsted { get; set; }
    private VerbConjugation? subjunctiveImperfectNosotros { get; set; }
    private VerbConjugation? subjunctiveImperfectVosotros { get; set; }
    private VerbConjugation? subjunctiveImperfectUstedes { get; set; }
    private VerbConjugation? subjunctiveImperfectEllos { get; set; }
    private VerbConjugation? subjunctiveImperfectEllas { get; set; }

    private VerbConjugation? subjunctiveFutureYo { get; set; }
    private VerbConjugation? subjunctiveFutureTu { get; set; }
    private VerbConjugation? subjunctiveFutureEl { get; set; }
    private VerbConjugation? subjunctiveFutureElla { get; set; }
    private VerbConjugation? subjunctiveFutureUsted { get; set; }
    private VerbConjugation? subjunctiveFutureNosotros { get; set; }
    private VerbConjugation? subjunctiveFutureVosotros { get; set; }
    private VerbConjugation? subjunctiveFutureUstedes { get; set; }
    private VerbConjugation? subjunctiveFutureEllos { get; set; }
    private VerbConjugation? subjunctiveFutureEllas { get; set; }

    private VerbConjugation? affirmativeImperativeYo { get; set; }
    private VerbConjugation? affirmativeImperativeTu { get; set; }
    private VerbConjugation? affirmativeImperativeEl { get; set; }
    private VerbConjugation? affirmativeImperativeElla { get; set; }
    private VerbConjugation? affirmativeImperativeUsted { get; set; }
    private VerbConjugation? affirmativeImperativeNosotros { get; set; }
    private VerbConjugation? affirmativeImperativeVosotros { get; set; }
    private VerbConjugation? affirmativeImperativeUstedes { get; set; }
    private VerbConjugation? affirmativeImperativeEllos { get; set; }
    private VerbConjugation? affirmativeImperativeEllas { get; set; }

    private VerbConjugation? negativeImperativeTu { get; set; }
    private VerbConjugation? negativeImperativeUsted { get; set; }
    private VerbConjugation? negativeImperativeNosotros { get; set; }
    private VerbConjugation? negativeImperativeVosotros { get; set; }
    private VerbConjugation? negativeImperativeUstedes { get; set; }


    protected override async Task OnInitializedAsync()
    {
        try
        {
            
            Verb spanishVerb54 = new() { Infinitive = "decir", Core1 = "dec", Core2 = "dig", Core3 = "dij", Gerund = "diciendo", PastParticiple = "dicho", }; Verb englishVerb54 = new() { Infinitive = "to say", Core1 = "say", Core2 = "said", Core3 = "says", Gerund = "saying", PastParticiple = "said", }; Logic.Conjugator.English.EnglishVerbTranslator translator54 = new(); Logic.Conjugator.Spanish.Decir conjugator54 = new(translator54, spanishVerb54, englishVerb54); conjugations = conjugator54.Conjugate(); ProcessConjugations(spanishVerb54);
            


            // now apply 
            
        }
        catch (Exception ex)
        {
            var burp = ex.ToString();
        }
    }
    private void ProcessConjugations(Verb spanishVerb)
    {
        infinitive = spanishVerb.Infinitive;
        gerund = spanishVerb.Gerund;
        pastParticiple = spanishVerb.PastParticiple;
        ApplyPresentConjugations();
        ApplyPreteriteConjugations();
        ApplyImperfectConjugations();
        ApplyConditionalConjugations();
        ApplyFutureConjugations();
        ApplySubjunctivePresentConjugations();
        ApplySubjunctiveImperfectConjugations();
        ApplySubjunctiveFutureConjugations();
        ApplyAffirmativeImperativeConjugations();
        ApplyNegativeImperativeConjugations();
    }
    private async Task ToggleTranslations()
    {
        shouldShowTranslations = !shouldShowTranslations;
    }
    private void ApplyPresentConjugations()
    {
        presentYo = conjugations.Where(x =>
                x.Person == AvailableGrammaticalPerson.FIRSTPERSON &&
                x.Number == AvailableGrammaticalNumber.SINGULAR &&
                x.Gender == AvailableGrammaticalGender.ANY &&
                x.Tense == AvailableGrammaticalTense.PRESENT &&
                x.Aspect == AvailableGrammaticalAspect.PERFECT &&
                x.Mood == AvailableGrammaticalMood.INDICATIVE
            ).FirstOrDefault();
        presentTu = conjugations.Where(x =>
            x.Person == AvailableGrammaticalPerson.SECONDPERSON &&
            x.Number == AvailableGrammaticalNumber.SINGULAR &&
            x.Gender == AvailableGrammaticalGender.ANY &&
            x.Tense == AvailableGrammaticalTense.PRESENT &&
            x.Aspect == AvailableGrammaticalAspect.PERFECT &&
            x.Mood == AvailableGrammaticalMood.INDICATIVE
        ).FirstOrDefault();
        presentUsted = conjugations.Where(x =>
            x.Person == AvailableGrammaticalPerson.SECONDPERSON_FORMAL &&
            x.Number == AvailableGrammaticalNumber.SINGULAR &&
            x.Gender == AvailableGrammaticalGender.ANY &&
            x.Tense == AvailableGrammaticalTense.PRESENT &&
            x.Aspect == AvailableGrammaticalAspect.PERFECT &&
            x.Mood == AvailableGrammaticalMood.INDICATIVE
        ).FirstOrDefault();
        presentEl = conjugations.Where(x =>
            x.Person == AvailableGrammaticalPerson.THIRDPERSON &&
            x.Number == AvailableGrammaticalNumber.SINGULAR &&
            x.Gender == AvailableGrammaticalGender.MASCULINE &&
            x.Tense == AvailableGrammaticalTense.PRESENT &&
            x.Aspect == AvailableGrammaticalAspect.PERFECT &&
            x.Mood == AvailableGrammaticalMood.INDICATIVE
        ).FirstOrDefault();
        presentElla = conjugations.Where(x =>
            x.Person == AvailableGrammaticalPerson.THIRDPERSON &&
            x.Number == AvailableGrammaticalNumber.SINGULAR &&
            x.Gender == AvailableGrammaticalGender.FEMININE &&
            x.Tense == AvailableGrammaticalTense.PRESENT &&
            x.Aspect == AvailableGrammaticalAspect.PERFECT &&
            x.Mood == AvailableGrammaticalMood.INDICATIVE
        ).FirstOrDefault();
        presentNosotros = conjugations.Where(x =>
            x.Person == AvailableGrammaticalPerson.FIRSTPERSON &&
            x.Number == AvailableGrammaticalNumber.PLURAL &&
            x.Gender == AvailableGrammaticalGender.ANY &&
            x.Tense == AvailableGrammaticalTense.PRESENT &&
            x.Aspect == AvailableGrammaticalAspect.PERFECT &&
            x.Mood == AvailableGrammaticalMood.INDICATIVE
        ).FirstOrDefault();
        presentVosotros = conjugations.Where(x =>
            x.Person == AvailableGrammaticalPerson.SECONDPERSON &&
            x.Number == AvailableGrammaticalNumber.PLURAL &&
            x.Gender == AvailableGrammaticalGender.ANY &&
            x.Tense == AvailableGrammaticalTense.PRESENT &&
            x.Aspect == AvailableGrammaticalAspect.PERFECT &&
            x.Mood == AvailableGrammaticalMood.INDICATIVE
        ).FirstOrDefault();
        presentUstedes = conjugations.Where(x =>
            x.Person == AvailableGrammaticalPerson.SECONDPERSON_FORMAL &&
            x.Number == AvailableGrammaticalNumber.PLURAL &&
            x.Gender == AvailableGrammaticalGender.ANY &&
            x.Tense == AvailableGrammaticalTense.PRESENT &&
            x.Aspect == AvailableGrammaticalAspect.PERFECT &&
            x.Mood == AvailableGrammaticalMood.INDICATIVE
        ).FirstOrDefault();
        presentEllos = conjugations.Where(x =>
            x.Person == AvailableGrammaticalPerson.THIRDPERSON &&
            x.Number == AvailableGrammaticalNumber.PLURAL &&
            x.Gender == AvailableGrammaticalGender.MASCULINE &&
            x.Tense == AvailableGrammaticalTense.PRESENT &&
            x.Aspect == AvailableGrammaticalAspect.PERFECT &&
            x.Mood == AvailableGrammaticalMood.INDICATIVE
        ).FirstOrDefault();
        presentEllas = conjugations.Where(x =>
            x.Person == AvailableGrammaticalPerson.THIRDPERSON &&
            x.Number == AvailableGrammaticalNumber.PLURAL &&
            x.Gender == AvailableGrammaticalGender.FEMININE &&
            x.Tense == AvailableGrammaticalTense.PRESENT &&
            x.Aspect == AvailableGrammaticalAspect.PERFECT &&
            x.Mood == AvailableGrammaticalMood.INDICATIVE
        ).FirstOrDefault();
    }
    private void ApplyPreteriteConjugations()
    {
        preteriteYo = conjugations.Where(x =>
                x.Person == AvailableGrammaticalPerson.FIRSTPERSON &&
                x.Number == AvailableGrammaticalNumber.SINGULAR &&
                x.Gender == AvailableGrammaticalGender.ANY &&
                x.Tense == AvailableGrammaticalTense.PAST &&
                x.Aspect == AvailableGrammaticalAspect.PERFECT &&
                x.Mood == AvailableGrammaticalMood.INDICATIVE
            ).FirstOrDefault();
        preteriteTu = conjugations.Where(x =>
            x.Person == AvailableGrammaticalPerson.SECONDPERSON &&
            x.Number == AvailableGrammaticalNumber.SINGULAR &&
            x.Gender == AvailableGrammaticalGender.ANY &&
            x.Tense == AvailableGrammaticalTense.PAST &&
            x.Aspect == AvailableGrammaticalAspect.PERFECT &&
            x.Mood == AvailableGrammaticalMood.INDICATIVE
        ).FirstOrDefault();
        preteriteUsted = conjugations.Where(x =>
            x.Person == AvailableGrammaticalPerson.SECONDPERSON_FORMAL &&
            x.Number == AvailableGrammaticalNumber.SINGULAR &&
            x.Gender == AvailableGrammaticalGender.ANY &&
            x.Tense == AvailableGrammaticalTense.PAST &&
            x.Aspect == AvailableGrammaticalAspect.PERFECT &&
            x.Mood == AvailableGrammaticalMood.INDICATIVE
        ).FirstOrDefault();
        preteriteEl = conjugations.Where(x =>
            x.Person == AvailableGrammaticalPerson.THIRDPERSON &&
            x.Number == AvailableGrammaticalNumber.SINGULAR &&
            x.Gender == AvailableGrammaticalGender.MASCULINE &&
            x.Tense == AvailableGrammaticalTense.PAST &&
            x.Aspect == AvailableGrammaticalAspect.PERFECT &&
            x.Mood == AvailableGrammaticalMood.INDICATIVE
        ).FirstOrDefault();
        preteriteElla = conjugations.Where(x =>
            x.Person == AvailableGrammaticalPerson.THIRDPERSON &&
            x.Number == AvailableGrammaticalNumber.SINGULAR &&
            x.Gender == AvailableGrammaticalGender.FEMININE &&
            x.Tense == AvailableGrammaticalTense.PAST &&
            x.Aspect == AvailableGrammaticalAspect.PERFECT &&
            x.Mood == AvailableGrammaticalMood.INDICATIVE
        ).FirstOrDefault();
        preteriteNosotros = conjugations.Where(x =>
            x.Person == AvailableGrammaticalPerson.FIRSTPERSON &&
            x.Number == AvailableGrammaticalNumber.PLURAL &&
            x.Gender == AvailableGrammaticalGender.ANY &&
            x.Tense == AvailableGrammaticalTense.PAST &&
            x.Aspect == AvailableGrammaticalAspect.PERFECT &&
            x.Mood == AvailableGrammaticalMood.INDICATIVE
        ).FirstOrDefault();
        preteriteVosotros = conjugations.Where(x =>
            x.Person == AvailableGrammaticalPerson.SECONDPERSON &&
            x.Number == AvailableGrammaticalNumber.PLURAL &&
            x.Gender == AvailableGrammaticalGender.ANY &&
            x.Tense == AvailableGrammaticalTense.PAST &&
            x.Aspect == AvailableGrammaticalAspect.PERFECT &&
            x.Mood == AvailableGrammaticalMood.INDICATIVE
        ).FirstOrDefault();
        preteriteUstedes = conjugations.Where(x =>
            x.Person == AvailableGrammaticalPerson.SECONDPERSON_FORMAL &&
            x.Number == AvailableGrammaticalNumber.PLURAL &&
            x.Gender == AvailableGrammaticalGender.ANY &&
            x.Tense == AvailableGrammaticalTense.PAST &&
            x.Aspect == AvailableGrammaticalAspect.PERFECT &&
            x.Mood == AvailableGrammaticalMood.INDICATIVE
        ).FirstOrDefault();
        preteriteEllos = conjugations.Where(x =>
            x.Person == AvailableGrammaticalPerson.THIRDPERSON &&
            x.Number == AvailableGrammaticalNumber.PLURAL &&
            x.Gender == AvailableGrammaticalGender.MASCULINE &&
            x.Tense == AvailableGrammaticalTense.PAST &&
            x.Aspect == AvailableGrammaticalAspect.PERFECT &&
            x.Mood == AvailableGrammaticalMood.INDICATIVE
        ).FirstOrDefault();
        preteriteEllas = conjugations.Where(x =>
            x.Person == AvailableGrammaticalPerson.THIRDPERSON &&
            x.Number == AvailableGrammaticalNumber.PLURAL &&
            x.Gender == AvailableGrammaticalGender.FEMININE &&
            x.Tense == AvailableGrammaticalTense.PAST &&
            x.Aspect == AvailableGrammaticalAspect.PERFECT &&
            x.Mood == AvailableGrammaticalMood.INDICATIVE
        ).FirstOrDefault();
    }
    private void ApplyImperfectConjugations()
    {
        imperfectYo = conjugations.Where(x =>
                x.Person == AvailableGrammaticalPerson.FIRSTPERSON &&
                x.Number == AvailableGrammaticalNumber.SINGULAR &&
                x.Gender == AvailableGrammaticalGender.ANY &&
                x.Tense == AvailableGrammaticalTense.PAST &&
                x.Aspect == AvailableGrammaticalAspect.IMPERFECT &&
                x.Mood == AvailableGrammaticalMood.INDICATIVE
            ).FirstOrDefault();
        imperfectTu = conjugations.Where(x =>
            x.Person == AvailableGrammaticalPerson.SECONDPERSON &&
            x.Number == AvailableGrammaticalNumber.SINGULAR &&
            x.Gender == AvailableGrammaticalGender.ANY &&
            x.Tense == AvailableGrammaticalTense.PAST &&
            x.Aspect == AvailableGrammaticalAspect.IMPERFECT &&
            x.Mood == AvailableGrammaticalMood.INDICATIVE
        ).FirstOrDefault();
        imperfectUsted = conjugations.Where(x =>
            x.Person == AvailableGrammaticalPerson.SECONDPERSON_FORMAL &&
            x.Number == AvailableGrammaticalNumber.SINGULAR &&
            x.Gender == AvailableGrammaticalGender.ANY &&
            x.Tense == AvailableGrammaticalTense.PAST &&
            x.Aspect == AvailableGrammaticalAspect.IMPERFECT &&
            x.Mood == AvailableGrammaticalMood.INDICATIVE
        ).FirstOrDefault();
        imperfectEl = conjugations.Where(x =>
            x.Person == AvailableGrammaticalPerson.THIRDPERSON &&
            x.Number == AvailableGrammaticalNumber.SINGULAR &&
            x.Gender == AvailableGrammaticalGender.MASCULINE &&
            x.Tense == AvailableGrammaticalTense.PAST &&
            x.Aspect == AvailableGrammaticalAspect.IMPERFECT &&
            x.Mood == AvailableGrammaticalMood.INDICATIVE
        ).FirstOrDefault();
        imperfectElla = conjugations.Where(x =>
            x.Person == AvailableGrammaticalPerson.THIRDPERSON &&
            x.Number == AvailableGrammaticalNumber.SINGULAR &&
            x.Gender == AvailableGrammaticalGender.FEMININE &&
            x.Tense == AvailableGrammaticalTense.PAST &&
            x.Aspect == AvailableGrammaticalAspect.IMPERFECT &&
            x.Mood == AvailableGrammaticalMood.INDICATIVE
        ).FirstOrDefault();
        imperfectNosotros = conjugations.Where(x =>
            x.Person == AvailableGrammaticalPerson.FIRSTPERSON &&
            x.Number == AvailableGrammaticalNumber.PLURAL &&
            x.Gender == AvailableGrammaticalGender.ANY &&
            x.Tense == AvailableGrammaticalTense.PAST &&
            x.Aspect == AvailableGrammaticalAspect.IMPERFECT &&
            x.Mood == AvailableGrammaticalMood.INDICATIVE
        ).FirstOrDefault();
        imperfectVosotros = conjugations.Where(x =>
            x.Person == AvailableGrammaticalPerson.SECONDPERSON &&
            x.Number == AvailableGrammaticalNumber.PLURAL &&
            x.Gender == AvailableGrammaticalGender.ANY &&
            x.Tense == AvailableGrammaticalTense.PAST &&
            x.Aspect == AvailableGrammaticalAspect.IMPERFECT &&
            x.Mood == AvailableGrammaticalMood.INDICATIVE
        ).FirstOrDefault();
        imperfectUstedes = conjugations.Where(x =>
            x.Person == AvailableGrammaticalPerson.SECONDPERSON_FORMAL &&
            x.Number == AvailableGrammaticalNumber.PLURAL &&
            x.Gender == AvailableGrammaticalGender.ANY &&
            x.Tense == AvailableGrammaticalTense.PAST &&
            x.Aspect == AvailableGrammaticalAspect.IMPERFECT &&
            x.Mood == AvailableGrammaticalMood.INDICATIVE
        ).FirstOrDefault();
        imperfectEllos = conjugations.Where(x =>
            x.Person == AvailableGrammaticalPerson.THIRDPERSON &&
            x.Number == AvailableGrammaticalNumber.PLURAL &&
            x.Gender == AvailableGrammaticalGender.MASCULINE &&
            x.Tense == AvailableGrammaticalTense.PAST &&
            x.Aspect == AvailableGrammaticalAspect.IMPERFECT &&
            x.Mood == AvailableGrammaticalMood.INDICATIVE
        ).FirstOrDefault();
        imperfectEllas = conjugations.Where(x =>
            x.Person == AvailableGrammaticalPerson.THIRDPERSON &&
            x.Number == AvailableGrammaticalNumber.PLURAL &&
            x.Gender == AvailableGrammaticalGender.FEMININE &&
            x.Tense == AvailableGrammaticalTense.PAST &&
            x.Aspect == AvailableGrammaticalAspect.IMPERFECT &&
            x.Mood == AvailableGrammaticalMood.INDICATIVE
        ).FirstOrDefault();
    }
    private void ApplyConditionalConjugations()
    {
        conditionalYo = conjugations.Where(x =>
                x.Person == AvailableGrammaticalPerson.FIRSTPERSON &&
                x.Number == AvailableGrammaticalNumber.SINGULAR &&
                x.Gender == AvailableGrammaticalGender.ANY &&
                x.Tense == AvailableGrammaticalTense.PRESENT &&
                x.Aspect == AvailableGrammaticalAspect.PERFECT &&
                x.Mood == AvailableGrammaticalMood.CONDITIONAL
            ).FirstOrDefault();
        conditionalTu = conjugations.Where(x =>
            x.Person == AvailableGrammaticalPerson.SECONDPERSON &&
            x.Number == AvailableGrammaticalNumber.SINGULAR &&
            x.Gender == AvailableGrammaticalGender.ANY &&
            x.Tense == AvailableGrammaticalTense.PRESENT &&
            x.Aspect == AvailableGrammaticalAspect.PERFECT &&
            x.Mood == AvailableGrammaticalMood.CONDITIONAL
        ).FirstOrDefault();
        conditionalUsted = conjugations.Where(x =>
            x.Person == AvailableGrammaticalPerson.SECONDPERSON_FORMAL &&
            x.Number == AvailableGrammaticalNumber.SINGULAR &&
            x.Gender == AvailableGrammaticalGender.ANY &&
            x.Tense == AvailableGrammaticalTense.PRESENT &&
            x.Aspect == AvailableGrammaticalAspect.PERFECT &&
            x.Mood == AvailableGrammaticalMood.CONDITIONAL
        ).FirstOrDefault();
        conditionalEl = conjugations.Where(x =>
            x.Person == AvailableGrammaticalPerson.THIRDPERSON &&
            x.Number == AvailableGrammaticalNumber.SINGULAR &&
            x.Gender == AvailableGrammaticalGender.MASCULINE &&
            x.Tense == AvailableGrammaticalTense.PRESENT &&
            x.Aspect == AvailableGrammaticalAspect.PERFECT &&
            x.Mood == AvailableGrammaticalMood.CONDITIONAL
        ).FirstOrDefault();
        conditionalElla = conjugations.Where(x =>
            x.Person == AvailableGrammaticalPerson.THIRDPERSON &&
            x.Number == AvailableGrammaticalNumber.SINGULAR &&
            x.Gender == AvailableGrammaticalGender.FEMININE &&
            x.Tense == AvailableGrammaticalTense.PRESENT &&
            x.Aspect == AvailableGrammaticalAspect.PERFECT &&
            x.Mood == AvailableGrammaticalMood.CONDITIONAL
        ).FirstOrDefault();
        conditionalNosotros = conjugations.Where(x =>
            x.Person == AvailableGrammaticalPerson.FIRSTPERSON &&
            x.Number == AvailableGrammaticalNumber.PLURAL &&
            x.Gender == AvailableGrammaticalGender.ANY &&
            x.Tense == AvailableGrammaticalTense.PRESENT &&
            x.Aspect == AvailableGrammaticalAspect.PERFECT &&
            x.Mood == AvailableGrammaticalMood.CONDITIONAL
        ).FirstOrDefault();
        conditionalVosotros = conjugations.Where(x =>
            x.Person == AvailableGrammaticalPerson.SECONDPERSON &&
            x.Number == AvailableGrammaticalNumber.PLURAL &&
            x.Gender == AvailableGrammaticalGender.ANY &&
            x.Tense == AvailableGrammaticalTense.PRESENT &&
            x.Aspect == AvailableGrammaticalAspect.PERFECT &&
            x.Mood == AvailableGrammaticalMood.CONDITIONAL
        ).FirstOrDefault();
        conditionalUstedes = conjugations.Where(x =>
            x.Person == AvailableGrammaticalPerson.SECONDPERSON_FORMAL &&
            x.Number == AvailableGrammaticalNumber.PLURAL &&
            x.Gender == AvailableGrammaticalGender.ANY &&
            x.Tense == AvailableGrammaticalTense.PRESENT &&
            x.Aspect == AvailableGrammaticalAspect.PERFECT &&
            x.Mood == AvailableGrammaticalMood.CONDITIONAL
        ).FirstOrDefault();
        conditionalEllos = conjugations.Where(x =>
            x.Person == AvailableGrammaticalPerson.THIRDPERSON &&
            x.Number == AvailableGrammaticalNumber.PLURAL &&
            x.Gender == AvailableGrammaticalGender.MASCULINE &&
            x.Tense == AvailableGrammaticalTense.PRESENT &&
            x.Aspect == AvailableGrammaticalAspect.PERFECT &&
            x.Mood == AvailableGrammaticalMood.CONDITIONAL
        ).FirstOrDefault();
        conditionalEllas = conjugations.Where(x =>
            x.Person == AvailableGrammaticalPerson.THIRDPERSON &&
            x.Number == AvailableGrammaticalNumber.PLURAL &&
            x.Gender == AvailableGrammaticalGender.FEMININE &&
            x.Tense == AvailableGrammaticalTense.PRESENT &&
            x.Aspect == AvailableGrammaticalAspect.PERFECT &&
            x.Mood == AvailableGrammaticalMood.CONDITIONAL
        ).FirstOrDefault();
    }
    private void ApplyFutureConjugations()
    {
        futureYo = conjugations.Where(x =>
                x.Person == AvailableGrammaticalPerson.FIRSTPERSON &&
                x.Number == AvailableGrammaticalNumber.SINGULAR &&
                x.Gender == AvailableGrammaticalGender.ANY &&
                x.Tense == AvailableGrammaticalTense.FUTURE &&
                x.Aspect == AvailableGrammaticalAspect.PERFECT &&
                x.Mood == AvailableGrammaticalMood.INDICATIVE
            ).FirstOrDefault();
        futureTu = conjugations.Where(x =>
            x.Person == AvailableGrammaticalPerson.SECONDPERSON &&
            x.Number == AvailableGrammaticalNumber.SINGULAR &&
            x.Gender == AvailableGrammaticalGender.ANY &&
            x.Tense == AvailableGrammaticalTense.FUTURE &&
            x.Aspect == AvailableGrammaticalAspect.PERFECT &&
            x.Mood == AvailableGrammaticalMood.INDICATIVE
        ).FirstOrDefault();
        futureUsted = conjugations.Where(x =>
            x.Person == AvailableGrammaticalPerson.SECONDPERSON_FORMAL &&
            x.Number == AvailableGrammaticalNumber.SINGULAR &&
            x.Gender == AvailableGrammaticalGender.ANY &&
            x.Tense == AvailableGrammaticalTense.FUTURE &&
            x.Aspect == AvailableGrammaticalAspect.PERFECT &&
            x.Mood == AvailableGrammaticalMood.INDICATIVE
        ).FirstOrDefault();
        futureEl = conjugations.Where(x =>
            x.Person == AvailableGrammaticalPerson.THIRDPERSON &&
            x.Number == AvailableGrammaticalNumber.SINGULAR &&
            x.Gender == AvailableGrammaticalGender.MASCULINE &&
            x.Tense == AvailableGrammaticalTense.FUTURE &&
            x.Aspect == AvailableGrammaticalAspect.PERFECT &&
            x.Mood == AvailableGrammaticalMood.INDICATIVE
        ).FirstOrDefault();
        futureElla = conjugations.Where(x =>
            x.Person == AvailableGrammaticalPerson.THIRDPERSON &&
            x.Number == AvailableGrammaticalNumber.SINGULAR &&
            x.Gender == AvailableGrammaticalGender.FEMININE &&
            x.Tense == AvailableGrammaticalTense.FUTURE &&
            x.Aspect == AvailableGrammaticalAspect.PERFECT &&
            x.Mood == AvailableGrammaticalMood.INDICATIVE
        ).FirstOrDefault();
        futureNosotros = conjugations.Where(x =>
            x.Person == AvailableGrammaticalPerson.FIRSTPERSON &&
            x.Number == AvailableGrammaticalNumber.PLURAL &&
            x.Gender == AvailableGrammaticalGender.ANY &&
            x.Tense == AvailableGrammaticalTense.FUTURE &&
            x.Aspect == AvailableGrammaticalAspect.PERFECT &&
            x.Mood == AvailableGrammaticalMood.INDICATIVE
        ).FirstOrDefault();
        futureVosotros = conjugations.Where(x =>
            x.Person == AvailableGrammaticalPerson.SECONDPERSON &&
            x.Number == AvailableGrammaticalNumber.PLURAL &&
            x.Gender == AvailableGrammaticalGender.ANY &&
            x.Tense == AvailableGrammaticalTense.FUTURE &&
            x.Aspect == AvailableGrammaticalAspect.PERFECT &&
            x.Mood == AvailableGrammaticalMood.INDICATIVE
        ).FirstOrDefault();
        futureUstedes = conjugations.Where(x =>
            x.Person == AvailableGrammaticalPerson.SECONDPERSON_FORMAL &&
            x.Number == AvailableGrammaticalNumber.PLURAL &&
            x.Gender == AvailableGrammaticalGender.ANY &&
            x.Tense == AvailableGrammaticalTense.FUTURE &&
            x.Aspect == AvailableGrammaticalAspect.PERFECT &&
            x.Mood == AvailableGrammaticalMood.INDICATIVE
        ).FirstOrDefault();
        futureEllos = conjugations.Where(x =>
            x.Person == AvailableGrammaticalPerson.THIRDPERSON &&
            x.Number == AvailableGrammaticalNumber.PLURAL &&
            x.Gender == AvailableGrammaticalGender.MASCULINE &&
            x.Tense == AvailableGrammaticalTense.FUTURE &&
            x.Aspect == AvailableGrammaticalAspect.PERFECT &&
            x.Mood == AvailableGrammaticalMood.INDICATIVE
        ).FirstOrDefault();
        futureEllas = conjugations.Where(x =>
            x.Person == AvailableGrammaticalPerson.THIRDPERSON &&
            x.Number == AvailableGrammaticalNumber.PLURAL &&
            x.Gender == AvailableGrammaticalGender.FEMININE &&
            x.Tense == AvailableGrammaticalTense.FUTURE &&
            x.Aspect == AvailableGrammaticalAspect.PERFECT &&
            x.Mood == AvailableGrammaticalMood.INDICATIVE
        ).FirstOrDefault();
    }

    private void ApplySubjunctivePresentConjugations()
    {
        subjunctivePresentYo = conjugations.Where(x =>
                x.Person == AvailableGrammaticalPerson.FIRSTPERSON &&
                x.Number == AvailableGrammaticalNumber.SINGULAR &&
                x.Gender == AvailableGrammaticalGender.ANY &&
                x.Tense == AvailableGrammaticalTense.PRESENT &&
                x.Aspect == AvailableGrammaticalAspect.PERFECT &&
                x.Mood == AvailableGrammaticalMood.SUBJUNCTIVE
            ).FirstOrDefault();
        subjunctivePresentTu = conjugations.Where(x =>
            x.Person == AvailableGrammaticalPerson.SECONDPERSON &&
            x.Number == AvailableGrammaticalNumber.SINGULAR &&
            x.Gender == AvailableGrammaticalGender.ANY &&
            x.Tense == AvailableGrammaticalTense.PRESENT &&
            x.Aspect == AvailableGrammaticalAspect.PERFECT &&
            x.Mood == AvailableGrammaticalMood.SUBJUNCTIVE
        ).FirstOrDefault();
        subjunctivePresentUsted = conjugations.Where(x =>
            x.Person == AvailableGrammaticalPerson.SECONDPERSON_FORMAL &&
            x.Number == AvailableGrammaticalNumber.SINGULAR &&
            x.Gender == AvailableGrammaticalGender.ANY &&
            x.Tense == AvailableGrammaticalTense.PRESENT &&
            x.Aspect == AvailableGrammaticalAspect.PERFECT &&
            x.Mood == AvailableGrammaticalMood.SUBJUNCTIVE
        ).FirstOrDefault();
        subjunctivePresentEl = conjugations.Where(x =>
            x.Person == AvailableGrammaticalPerson.THIRDPERSON &&
            x.Number == AvailableGrammaticalNumber.SINGULAR &&
            x.Gender == AvailableGrammaticalGender.MASCULINE &&
            x.Tense == AvailableGrammaticalTense.PRESENT &&
            x.Aspect == AvailableGrammaticalAspect.PERFECT &&
            x.Mood == AvailableGrammaticalMood.SUBJUNCTIVE
        ).FirstOrDefault();
        subjunctivePresentElla = conjugations.Where(x =>
            x.Person == AvailableGrammaticalPerson.THIRDPERSON &&
            x.Number == AvailableGrammaticalNumber.SINGULAR &&
            x.Gender == AvailableGrammaticalGender.FEMININE &&
            x.Tense == AvailableGrammaticalTense.PRESENT &&
            x.Aspect == AvailableGrammaticalAspect.PERFECT &&
            x.Mood == AvailableGrammaticalMood.SUBJUNCTIVE
        ).FirstOrDefault();
        subjunctivePresentNosotros = conjugations.Where(x =>
            x.Person == AvailableGrammaticalPerson.FIRSTPERSON &&
            x.Number == AvailableGrammaticalNumber.PLURAL &&
            x.Gender == AvailableGrammaticalGender.ANY &&
            x.Tense == AvailableGrammaticalTense.PRESENT &&
            x.Aspect == AvailableGrammaticalAspect.PERFECT &&
            x.Mood == AvailableGrammaticalMood.SUBJUNCTIVE
        ).FirstOrDefault();
        subjunctivePresentVosotros = conjugations.Where(x =>
            x.Person == AvailableGrammaticalPerson.SECONDPERSON &&
            x.Number == AvailableGrammaticalNumber.PLURAL &&
            x.Gender == AvailableGrammaticalGender.ANY &&
            x.Tense == AvailableGrammaticalTense.PRESENT &&
            x.Aspect == AvailableGrammaticalAspect.PERFECT &&
            x.Mood == AvailableGrammaticalMood.SUBJUNCTIVE
        ).FirstOrDefault();
        subjunctivePresentUstedes = conjugations.Where(x =>
            x.Person == AvailableGrammaticalPerson.SECONDPERSON_FORMAL &&
            x.Number == AvailableGrammaticalNumber.PLURAL &&
            x.Gender == AvailableGrammaticalGender.ANY &&
            x.Tense == AvailableGrammaticalTense.PRESENT &&
            x.Aspect == AvailableGrammaticalAspect.PERFECT &&
            x.Mood == AvailableGrammaticalMood.SUBJUNCTIVE
        ).FirstOrDefault();
        subjunctivePresentEllos = conjugations.Where(x =>
            x.Person == AvailableGrammaticalPerson.THIRDPERSON &&
            x.Number == AvailableGrammaticalNumber.PLURAL &&
            x.Gender == AvailableGrammaticalGender.MASCULINE &&
            x.Tense == AvailableGrammaticalTense.PRESENT &&
            x.Aspect == AvailableGrammaticalAspect.PERFECT &&
            x.Mood == AvailableGrammaticalMood.SUBJUNCTIVE
        ).FirstOrDefault();
        subjunctivePresentEllas = conjugations.Where(x =>
            x.Person == AvailableGrammaticalPerson.THIRDPERSON &&
            x.Number == AvailableGrammaticalNumber.PLURAL &&
            x.Gender == AvailableGrammaticalGender.FEMININE &&
            x.Tense == AvailableGrammaticalTense.PRESENT &&
            x.Aspect == AvailableGrammaticalAspect.PERFECT &&
            x.Mood == AvailableGrammaticalMood.SUBJUNCTIVE
        ).FirstOrDefault();
    }
    private void ApplySubjunctiveImperfectConjugations()
    {
        subjunctiveImperfectYo = conjugations.Where(x =>
                x.Person == AvailableGrammaticalPerson.FIRSTPERSON &&
                x.Number == AvailableGrammaticalNumber.SINGULAR &&
                x.Gender == AvailableGrammaticalGender.ANY &&
                x.Tense == AvailableGrammaticalTense.PAST &&
                x.Aspect == AvailableGrammaticalAspect.IMPERFECT &&
                x.Mood == AvailableGrammaticalMood.SUBJUNCTIVE
            ).FirstOrDefault();
        subjunctiveImperfectTu = conjugations.Where(x =>
            x.Person == AvailableGrammaticalPerson.SECONDPERSON &&
            x.Number == AvailableGrammaticalNumber.SINGULAR &&
            x.Gender == AvailableGrammaticalGender.ANY &&
            x.Tense == AvailableGrammaticalTense.PAST &&
            x.Aspect == AvailableGrammaticalAspect.IMPERFECT &&
            x.Mood == AvailableGrammaticalMood.SUBJUNCTIVE
        ).FirstOrDefault();
        subjunctiveImperfectUsted = conjugations.Where(x =>
            x.Person == AvailableGrammaticalPerson.SECONDPERSON_FORMAL &&
            x.Number == AvailableGrammaticalNumber.SINGULAR &&
            x.Gender == AvailableGrammaticalGender.ANY &&
            x.Tense == AvailableGrammaticalTense.PAST &&
            x.Aspect == AvailableGrammaticalAspect.IMPERFECT &&
            x.Mood == AvailableGrammaticalMood.SUBJUNCTIVE
        ).FirstOrDefault();
        subjunctiveImperfectEl = conjugations.Where(x =>
            x.Person == AvailableGrammaticalPerson.THIRDPERSON &&
            x.Number == AvailableGrammaticalNumber.SINGULAR &&
            x.Gender == AvailableGrammaticalGender.MASCULINE &&
            x.Tense == AvailableGrammaticalTense.PAST &&
            x.Aspect == AvailableGrammaticalAspect.IMPERFECT &&
            x.Mood == AvailableGrammaticalMood.SUBJUNCTIVE
        ).FirstOrDefault();
        subjunctiveImperfectElla = conjugations.Where(x =>
            x.Person == AvailableGrammaticalPerson.THIRDPERSON &&
            x.Number == AvailableGrammaticalNumber.SINGULAR &&
            x.Gender == AvailableGrammaticalGender.FEMININE &&
            x.Tense == AvailableGrammaticalTense.PAST &&
            x.Aspect == AvailableGrammaticalAspect.IMPERFECT &&
            x.Mood == AvailableGrammaticalMood.SUBJUNCTIVE
        ).FirstOrDefault();
        subjunctiveImperfectNosotros = conjugations.Where(x =>
            x.Person == AvailableGrammaticalPerson.FIRSTPERSON &&
            x.Number == AvailableGrammaticalNumber.PLURAL &&
            x.Gender == AvailableGrammaticalGender.ANY &&
            x.Tense == AvailableGrammaticalTense.PAST &&
            x.Aspect == AvailableGrammaticalAspect.IMPERFECT &&
            x.Mood == AvailableGrammaticalMood.SUBJUNCTIVE
        ).FirstOrDefault();
        subjunctiveImperfectVosotros = conjugations.Where(x =>
            x.Person == AvailableGrammaticalPerson.SECONDPERSON &&
            x.Number == AvailableGrammaticalNumber.PLURAL &&
            x.Gender == AvailableGrammaticalGender.ANY &&
            x.Tense == AvailableGrammaticalTense.PAST &&
            x.Aspect == AvailableGrammaticalAspect.IMPERFECT &&
            x.Mood == AvailableGrammaticalMood.SUBJUNCTIVE
        ).FirstOrDefault();
        subjunctiveImperfectUstedes = conjugations.Where(x =>
            x.Person == AvailableGrammaticalPerson.SECONDPERSON_FORMAL &&
            x.Number == AvailableGrammaticalNumber.PLURAL &&
            x.Gender == AvailableGrammaticalGender.ANY &&
            x.Tense == AvailableGrammaticalTense.PAST &&
            x.Aspect == AvailableGrammaticalAspect.IMPERFECT &&
            x.Mood == AvailableGrammaticalMood.SUBJUNCTIVE
        ).FirstOrDefault();
        subjunctiveImperfectEllos = conjugations.Where(x =>
            x.Person == AvailableGrammaticalPerson.THIRDPERSON &&
            x.Number == AvailableGrammaticalNumber.PLURAL &&
            x.Gender == AvailableGrammaticalGender.MASCULINE &&
            x.Tense == AvailableGrammaticalTense.PAST &&
            x.Aspect == AvailableGrammaticalAspect.IMPERFECT &&
            x.Mood == AvailableGrammaticalMood.SUBJUNCTIVE
        ).FirstOrDefault();
        subjunctiveImperfectEllas = conjugations.Where(x =>
            x.Person == AvailableGrammaticalPerson.THIRDPERSON &&
            x.Number == AvailableGrammaticalNumber.PLURAL &&
            x.Gender == AvailableGrammaticalGender.FEMININE &&
            x.Tense == AvailableGrammaticalTense.PAST &&
            x.Aspect == AvailableGrammaticalAspect.IMPERFECT &&
            x.Mood == AvailableGrammaticalMood.SUBJUNCTIVE
        ).FirstOrDefault();
    }
    private void ApplySubjunctiveFutureConjugations()
    {
        subjunctiveFutureYo = conjugations.Where(x =>
                x.Person == AvailableGrammaticalPerson.FIRSTPERSON &&
                x.Number == AvailableGrammaticalNumber.SINGULAR &&
                x.Gender == AvailableGrammaticalGender.ANY &&
                x.Tense == AvailableGrammaticalTense.FUTURE &&
                x.Aspect == AvailableGrammaticalAspect.PERFECT &&
                x.Mood == AvailableGrammaticalMood.SUBJUNCTIVE
            ).FirstOrDefault();
        subjunctiveFutureTu = conjugations.Where(x =>
            x.Person == AvailableGrammaticalPerson.SECONDPERSON &&
            x.Number == AvailableGrammaticalNumber.SINGULAR &&
            x.Gender == AvailableGrammaticalGender.ANY &&
            x.Tense == AvailableGrammaticalTense.FUTURE &&
            x.Aspect == AvailableGrammaticalAspect.PERFECT &&
            x.Mood == AvailableGrammaticalMood.SUBJUNCTIVE
        ).FirstOrDefault();
        subjunctiveFutureUsted = conjugations.Where(x =>
            x.Person == AvailableGrammaticalPerson.SECONDPERSON_FORMAL &&
            x.Number == AvailableGrammaticalNumber.SINGULAR &&
            x.Gender == AvailableGrammaticalGender.ANY &&
            x.Tense == AvailableGrammaticalTense.FUTURE &&
            x.Aspect == AvailableGrammaticalAspect.PERFECT &&
            x.Mood == AvailableGrammaticalMood.SUBJUNCTIVE
        ).FirstOrDefault();
        subjunctiveFutureEl = conjugations.Where(x =>
            x.Person == AvailableGrammaticalPerson.THIRDPERSON &&
            x.Number == AvailableGrammaticalNumber.SINGULAR &&
            x.Gender == AvailableGrammaticalGender.MASCULINE &&
            x.Tense == AvailableGrammaticalTense.FUTURE &&
            x.Aspect == AvailableGrammaticalAspect.PERFECT &&
            x.Mood == AvailableGrammaticalMood.SUBJUNCTIVE
        ).FirstOrDefault();
        subjunctiveFutureElla = conjugations.Where(x =>
            x.Person == AvailableGrammaticalPerson.THIRDPERSON &&
            x.Number == AvailableGrammaticalNumber.SINGULAR &&
            x.Gender == AvailableGrammaticalGender.FEMININE &&
            x.Tense == AvailableGrammaticalTense.FUTURE &&
            x.Aspect == AvailableGrammaticalAspect.PERFECT &&
            x.Mood == AvailableGrammaticalMood.SUBJUNCTIVE
        ).FirstOrDefault();
        subjunctiveFutureNosotros = conjugations.Where(x =>
            x.Person == AvailableGrammaticalPerson.FIRSTPERSON &&
            x.Number == AvailableGrammaticalNumber.PLURAL &&
            x.Gender == AvailableGrammaticalGender.ANY &&
            x.Tense == AvailableGrammaticalTense.FUTURE &&
            x.Aspect == AvailableGrammaticalAspect.PERFECT &&
            x.Mood == AvailableGrammaticalMood.SUBJUNCTIVE
        ).FirstOrDefault();
        subjunctiveFutureVosotros = conjugations.Where(x =>
            x.Person == AvailableGrammaticalPerson.SECONDPERSON &&
            x.Number == AvailableGrammaticalNumber.PLURAL &&
            x.Gender == AvailableGrammaticalGender.ANY &&
            x.Tense == AvailableGrammaticalTense.FUTURE &&
            x.Aspect == AvailableGrammaticalAspect.PERFECT &&
            x.Mood == AvailableGrammaticalMood.SUBJUNCTIVE
        ).FirstOrDefault();
        subjunctiveFutureUstedes = conjugations.Where(x =>
            x.Person == AvailableGrammaticalPerson.SECONDPERSON_FORMAL &&
            x.Number == AvailableGrammaticalNumber.PLURAL &&
            x.Gender == AvailableGrammaticalGender.ANY &&
            x.Tense == AvailableGrammaticalTense.FUTURE &&
            x.Aspect == AvailableGrammaticalAspect.PERFECT &&
            x.Mood == AvailableGrammaticalMood.SUBJUNCTIVE
        ).FirstOrDefault();
        subjunctiveFutureEllos = conjugations.Where(x =>
            x.Person == AvailableGrammaticalPerson.THIRDPERSON &&
            x.Number == AvailableGrammaticalNumber.PLURAL &&
            x.Gender == AvailableGrammaticalGender.MASCULINE &&
            x.Tense == AvailableGrammaticalTense.FUTURE &&
            x.Aspect == AvailableGrammaticalAspect.PERFECT &&
            x.Mood == AvailableGrammaticalMood.SUBJUNCTIVE
        ).FirstOrDefault();
        subjunctiveFutureEllas = conjugations.Where(x =>
            x.Person == AvailableGrammaticalPerson.THIRDPERSON &&
            x.Number == AvailableGrammaticalNumber.PLURAL &&
            x.Gender == AvailableGrammaticalGender.FEMININE &&
            x.Tense == AvailableGrammaticalTense.FUTURE &&
            x.Aspect == AvailableGrammaticalAspect.PERFECT &&
            x.Mood == AvailableGrammaticalMood.SUBJUNCTIVE
        ).FirstOrDefault();
    }

    private void ApplyAffirmativeImperativeConjugations()
    {
        affirmativeImperativeTu = conjugations.Where(x =>
            x.Person == AvailableGrammaticalPerson.SECONDPERSON &&
            x.Number == AvailableGrammaticalNumber.SINGULAR &&
            x.Gender == AvailableGrammaticalGender.ANY &&
            x.Tense == AvailableGrammaticalTense.PRESENT &&
            x.Aspect == AvailableGrammaticalAspect.PERFECT &&
            x.Mood == AvailableGrammaticalMood.IMPERATIVE
        ).FirstOrDefault();
        affirmativeImperativeUsted = conjugations.Where(x =>
            x.Person == AvailableGrammaticalPerson.SECONDPERSON_FORMAL &&
            x.Number == AvailableGrammaticalNumber.SINGULAR &&
            x.Gender == AvailableGrammaticalGender.ANY &&
            x.Tense == AvailableGrammaticalTense.PRESENT &&
            x.Aspect == AvailableGrammaticalAspect.PERFECT &&
            x.Mood == AvailableGrammaticalMood.IMPERATIVE
        ).FirstOrDefault();
        affirmativeImperativeNosotros = conjugations.Where(x =>
            x.Person == AvailableGrammaticalPerson.FIRSTPERSON &&
            x.Number == AvailableGrammaticalNumber.PLURAL &&
            x.Gender == AvailableGrammaticalGender.ANY &&
            x.Tense == AvailableGrammaticalTense.PRESENT &&
            x.Aspect == AvailableGrammaticalAspect.PERFECT &&
            x.Mood == AvailableGrammaticalMood.IMPERATIVE
        ).FirstOrDefault();
        affirmativeImperativeVosotros = conjugations.Where(x =>
            x.Person == AvailableGrammaticalPerson.SECONDPERSON &&
            x.Number == AvailableGrammaticalNumber.PLURAL &&
            x.Gender == AvailableGrammaticalGender.ANY &&
            x.Tense == AvailableGrammaticalTense.PRESENT &&
            x.Aspect == AvailableGrammaticalAspect.PERFECT &&
            x.Mood == AvailableGrammaticalMood.IMPERATIVE
        ).FirstOrDefault();
        affirmativeImperativeUstedes = conjugations.Where(x =>
            x.Person == AvailableGrammaticalPerson.SECONDPERSON_FORMAL &&
            x.Number == AvailableGrammaticalNumber.PLURAL &&
            x.Gender == AvailableGrammaticalGender.ANY &&
            x.Tense == AvailableGrammaticalTense.PRESENT &&
            x.Aspect == AvailableGrammaticalAspect.PERFECT &&
            x.Mood == AvailableGrammaticalMood.IMPERATIVE
        ).FirstOrDefault();
    }
    private void ApplyNegativeImperativeConjugations()
    {
        negativeImperativeTu = conjugations.Where(x =>
            x.Person == AvailableGrammaticalPerson.SECONDPERSON &&
            x.Number == AvailableGrammaticalNumber.SINGULAR &&
            x.Gender == AvailableGrammaticalGender.ANY &&
            x.Tense == AvailableGrammaticalTense.PRESENT &&
            x.Aspect == AvailableGrammaticalAspect.PERFECT &&
            x.Mood == AvailableGrammaticalMood.NEGATIVE_IMPERATIVE
        ).FirstOrDefault();
        negativeImperativeUsted = conjugations.Where(x =>
            x.Person == AvailableGrammaticalPerson.SECONDPERSON_FORMAL &&
            x.Number == AvailableGrammaticalNumber.SINGULAR &&
            x.Gender == AvailableGrammaticalGender.ANY &&
            x.Tense == AvailableGrammaticalTense.PRESENT &&
            x.Aspect == AvailableGrammaticalAspect.PERFECT &&
            x.Mood == AvailableGrammaticalMood.NEGATIVE_IMPERATIVE
        ).FirstOrDefault();
        negativeImperativeNosotros = conjugations.Where(x =>
            x.Person == AvailableGrammaticalPerson.FIRSTPERSON &&
            x.Number == AvailableGrammaticalNumber.PLURAL &&
            x.Gender == AvailableGrammaticalGender.ANY &&
            x.Tense == AvailableGrammaticalTense.PRESENT &&
            x.Aspect == AvailableGrammaticalAspect.PERFECT &&
            x.Mood == AvailableGrammaticalMood.NEGATIVE_IMPERATIVE
        ).FirstOrDefault();
        negativeImperativeVosotros = conjugations.Where(x =>
            x.Person == AvailableGrammaticalPerson.SECONDPERSON &&
            x.Number == AvailableGrammaticalNumber.PLURAL &&
            x.Gender == AvailableGrammaticalGender.ANY &&
            x.Tense == AvailableGrammaticalTense.PRESENT &&
            x.Aspect == AvailableGrammaticalAspect.PERFECT &&
            x.Mood == AvailableGrammaticalMood.NEGATIVE_IMPERATIVE
        ).FirstOrDefault();
        negativeImperativeUstedes = conjugations.Where(x =>
            x.Person == AvailableGrammaticalPerson.SECONDPERSON_FORMAL &&
            x.Number == AvailableGrammaticalNumber.PLURAL &&
            x.Gender == AvailableGrammaticalGender.ANY &&
            x.Tense == AvailableGrammaticalTense.PRESENT &&
            x.Aspect == AvailableGrammaticalAspect.PERFECT &&
            x.Mood == AvailableGrammaticalMood.NEGATIVE_IMPERATIVE
        ).FirstOrDefault();
    }
}
