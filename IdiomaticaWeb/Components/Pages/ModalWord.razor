@page "/ModalWord"
@using Logic.Services.API
@rendermode InteractiveServer
@inject UserService UserService;
@inject IDbContextFactory<IdiomaticaContext> DbContextFactory;

<Modal @ref="modal" Title="@_title" Size="ModalSize.Large">
    <BodyTemplate>
        <div>
            <label for="inputTranslation" class="form-label">Translation</label>
            <textarea rows="4"
                        cols="150"
                        class="form-control"
                        id="inputTranslation"
                        @bind="_wordUser.Translation"
                        @bind:event="oninput">
                        </textarea>
        </div>
        <div>
            <label class="form-label">Word status</label><br />
            <span class="readToken @GetTokenClass(AvailableWordUserStatus.UNKNOWN) @GetTokenClassSelected(8)"
                    @onclick="@(e => UpdateWordStatusSelected(8))">
                @UserService.GetUILabel($"statusLabel{8}")
            </span>
            <span class="readToken @GetTokenClass(AvailableWordUserStatus.NEW1) @GetTokenClassSelected(1)"
                    @onclick="@(e => UpdateWordStatusSelected(1))">
                @UserService.GetUILabel($"statusLabel{1}")
            </span>
            <span class="readToken @GetTokenClass(AvailableWordUserStatus.NEW2) @GetTokenClassSelected(2)"
                    @onclick="@(e => UpdateWordStatusSelected(2))">
                @UserService.GetUILabel($"statusLabel{2}")
            </span>
            <span class="readToken @GetTokenClass(AvailableWordUserStatus.LEARNING3) @GetTokenClassSelected(3)"
                    @onclick="@(e => UpdateWordStatusSelected(3))">
                @UserService.GetUILabel($"statusLabel{3}")
            </span>
            <span class="readToken @GetTokenClass(AvailableWordUserStatus.LEARNING4) @GetTokenClassSelected(4)"
                    @onclick="@(e => UpdateWordStatusSelected(4))">
                @UserService.GetUILabel($"statusLabel{4}")
            </span>
            <span class="readToken @GetTokenClass(AvailableWordUserStatus.LEARNED) @GetTokenClassSelected(5)"
                    @onclick="@(e => UpdateWordStatusSelected(5))">
                @UserService.GetUILabel($"statusLabel{5}")
            </span>
            <span class="readToken @GetTokenClass(AvailableWordUserStatus.IGNORED) @GetTokenClassSelected(6)"
                    @onclick="@(e => UpdateWordStatusSelected(6))">
                @UserService.GetUILabel($"statusLabel{6}")
            </span>
            <span class="readToken @GetTokenClass(AvailableWordUserStatus.WELLKNOWN) @GetTokenClassSelected(7)"
                    @onclick="@(e => UpdateWordStatusSelected(7))">
                @UserService.GetUILabel($"statusLabel{7}")
            </span>
        </div>

    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="OnHideModalClick">
            @UserService.GetUILabel("closeButton")
        </Button>
        <Button Color="ButtonColor.Primary" @onclick="OnSaveModalAsync">
            @UserService.GetUILabel("saveButton")
        </Button>
    </FooterTemplate>
</Modal>


@code {
    [Parameter]
    public Read? Parent { get; set; }
    [Parameter]
    public ReadDataPacket ReadDataPacket { get; set; } = new();

    private Modal modal = default!;
    private Token? _token = null;
    private WordUser? _wordUser = null;
    private Word? _word = null;

    private bool _isDataInit = false;
    private string? _title = null;
    private string? _translation = null;
    private string? _selectedStatus = null;



    public async Task OnShowModalClick(Token thisToken)
    {
        try
        {
            var context = await DbContextFactory.CreateDbContextAsync();

            if (thisToken == null || thisToken.Id == null || thisToken.Id < 1)
            {
                ErrorHandler.LogAndThrow();
                return;
            }
            if (thisToken.WordId == null || thisToken.WordId < 1)
            {
                ErrorHandler.LogAndThrow();
                return;
            }
            _word = WordApi.WordGetById(context, (int)thisToken.WordId);
            if (_word == null || _word.Id is null || _word.Id < 1 || _word.TextLowerCase is null)
            {
                ErrorHandler.LogAndThrow();
                return;
            }
            if (ReadDataPacket == null || ReadDataPacket.AllWordUsersInPage is null)
            {
                ErrorHandler.LogAndThrow();
                return;
            }
            if (!ReadDataPacket.AllWordUsersInPage.ContainsKey(_word.TextLowerCase))
            {
                ErrorHandler.LogAndThrow();
                return;
            }
            _wordUser = ReadDataPacket.AllWordUsersInPage[_word.TextLowerCase];
            _token = thisToken;
            _token.Word = _word;
            
            if (_wordUser == null || _wordUser.Id < 1)
            {
                ErrorHandler.LogAndThrow(2430);
                return;
            }
            _wordUser.Status = _wordUser.Status is null ? AvailableWordUserStatus.UNKNOWN : _wordUser.Status;

            _title = (_word is null) ? "" : _word.TextLowerCase;
            _translation = _wordUser.Translation;
            _selectedStatus = UserService.GetUILabel($"statusLabel{(int)_wordUser.Status}");
            await modal.ShowAsync();
        }
        catch 
        {
            StateHasChanged();
            throw;
        }


    }
    private string GetTokenClassSelected(int statusToCheck)
    {
        if (_wordUser is null || _wordUser.Status is null) return "unselectedWordStatus";
        if ((int)_wordUser.Status == statusToCheck) return "selectedWordStatus";
        return "unselectedWordStatus";
    }
    private async Task OnHideModalClick()
    {
        await modal.HideAsync();
    }

    private async Task OnSaveModalAsync()
    {
        try
        {
            if (_wordUser is null || _wordUser.Id is null || _wordUser.Id < 1)
            {
                ErrorHandler.LogAndThrow();
                return;
            }
            if (_wordUser.Status is null)
            {
                _wordUser.Status = AvailableWordUserStatus.UNKNOWN;
            }
            if (_wordUser.Translation is null)
            {
                _wordUser.Translation = string.Empty;
            }
            var context = await DbContextFactory.CreateDbContextAsync();
            await WordUserApi.WordUserUpdateAsync(
                context, (int)_wordUser.Id, (AvailableWordUserStatus)_wordUser.Status, _wordUser.Translation);
            if (Parent is not null) Parent.RefreshState();
            await modal.HideAsync();
        }
        catch
        {
            StateHasChanged();
            throw;
        }
    }
    /// <summary>
    /// this updates the status on the word object w/out saving it
    /// </summary>
    /// <param name="newStatusInt"></param>
    private void UpdateWordStatusSelected(int newStatusInt)
    {
        if (_wordUser is null) return;
        _wordUser.Status = (AvailableWordUserStatus)newStatusInt;
    }
    
    private string GetTokenClass(AvailableWordUserStatus status)
    {
        if (status == AvailableWordUserStatus.UNKNOWN) return "statusUNKNOWN";
        if (status == AvailableWordUserStatus.NEW1) return "statusNEW1";
        if (status == AvailableWordUserStatus.NEW2) return "statusNEW2";
        if (status == AvailableWordUserStatus.LEARNING3) return "statusLEARNING3";
        if (status == AvailableWordUserStatus.LEARNING4) return "statusLEARNING4";
        if (status == AvailableWordUserStatus.LEARNED) return "statusLEARNED";
        if (status == AvailableWordUserStatus.WELLKNOWN) return "statusWELLKNOWN";
        if (status == AvailableWordUserStatus.IGNORED) return "statusIGNORED";
        return "statusUNKNOWN";
    }
    

}
