@page "/ModalWord"
@using Logic.Services.API
@using Model.Enums
@rendermode InteractiveServer
@inject UserService UserService;
@inject IDbContextFactory<IdiomaticaContext> DbContextFactory;

<Modal @ref="modal" Title="@_title" Size="ModalSize.Large">
    <BodyTemplate>
        <div>
            @if (_wordUser is not null)
            {
                @if (_shouldShowTranslationForm)
                {
                    <div class="m-1 border">
                        <h4>@UserService.GetUILabel("provideTranslation")</h4>
                        @if (_isFormattingTranslation)
                        {
                            <Button Color="ButtonColor.Info" Loading="true" LoadingText="@UserService.GetUILabel("loading")" />
                        }
                        else
                        {

                            <textarea rows="4"
                                      cols="150"
                                      class="form-control"
                                      id="inputTranslation"
                                      @bind="_wordUser.Translation"
                                      @bind:event="oninput">
                                             </textarea>

                            <div class="m-1">
                                <Button Color="ButtonColor.Secondary" Size="Size.Small" @onclick="OnFormatTranslationInputAsync">
                                    @UserService.GetUILabel("formatTranslationInput")
                                </Button>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <div class="m-1">
                        <Button Color="ButtonColor.Primary" @onclick="OnShowTranslationFormButtonClick">
                            @UserService.GetUILabel("provideTranslation")
                        </Button>
                    </div>
                }
            }

            @if(_defaultTranslations.Count > 0)
            {
                <div class="m-1 border">
                    <h4>@UserService.GetUILabel("wordModalDefaultTranslations")</h4>
                    <ul>
                    @foreach(var t in _defaultTranslations)
                    {
                        <li>@t</li>
                    }
                    </ul>
                </div>
            }


        </div>
        <div>
            <label class="form-label">Word status</label><br />
            <span class="readToken @GetTokenClass(AvailableWordUserStatus.UNKNOWN) @GetTokenClassSelected(8)"
                    @onclick="@(e => UpdateWordStatusSelected(8))">
                @UserService.GetUILabel($"statusLabel{8}")
            </span>
            <span class="readToken @GetTokenClass(AvailableWordUserStatus.NEW1) @GetTokenClassSelected(1)"
                    @onclick="@(e => UpdateWordStatusSelected(1))">
                @UserService.GetUILabel($"statusLabel{1}")
            </span>
            <span class="readToken @GetTokenClass(AvailableWordUserStatus.NEW2) @GetTokenClassSelected(2)"
                    @onclick="@(e => UpdateWordStatusSelected(2))">
                @UserService.GetUILabel($"statusLabel{2}")
            </span>
            <span class="readToken @GetTokenClass(AvailableWordUserStatus.LEARNING3) @GetTokenClassSelected(3)"
                    @onclick="@(e => UpdateWordStatusSelected(3))">
                @UserService.GetUILabel($"statusLabel{3}")
            </span>
            <span class="readToken @GetTokenClass(AvailableWordUserStatus.LEARNING4) @GetTokenClassSelected(4)"
                    @onclick="@(e => UpdateWordStatusSelected(4))">
                @UserService.GetUILabel($"statusLabel{4}")
            </span>
            <span class="readToken @GetTokenClass(AvailableWordUserStatus.LEARNED) @GetTokenClassSelected(5)"
                    @onclick="@(e => UpdateWordStatusSelected(5))">
                @UserService.GetUILabel($"statusLabel{5}")
            </span>
            <span class="readToken @GetTokenClass(AvailableWordUserStatus.IGNORED) @GetTokenClassSelected(6)"
                    @onclick="@(e => UpdateWordStatusSelected(6))">
                @UserService.GetUILabel($"statusLabel{6}")
            </span>
            <span class="readToken @GetTokenClass(AvailableWordUserStatus.WELLKNOWN) @GetTokenClassSelected(7)"
                    @onclick="@(e => UpdateWordStatusSelected(7))">
                @UserService.GetUILabel($"statusLabel{7}")
            </span>
        </div>

    </BodyTemplate>
    <FooterTemplate>
        @if (_doesFlashCardExist == false)
        {
            @if (_isSavingFlashCard)
            {
                <Button Color="ButtonColor.Info" Loading="true" LoadingText="@UserService.GetUILabel("loading")" />
            }
            else
            {
                <Button Color="ButtonColor.Info" @onclick="OnMakeFlashCard">
                    @UserService.GetUILabel("createFlashCard")
                </Button>
            }
        }
        <Button Color="ButtonColor.Secondary" @onclick="OnHideModalClick">
            @UserService.GetUILabel("closeButton")
        </Button>
        <Button Color="ButtonColor.Primary" @onclick="OnSaveModalAsync">
            @UserService.GetUILabel("saveButton")
        </Button>
    </FooterTemplate>
</Modal>


@code {
    [Parameter]
    public Read? Parent { get; set; }
    [Parameter]
    public ReadDataPacket ReadDataPacket { get; set; } = new();

    private Modal modal = default!;
    private Token? _token = null;
    private WordUser? _wordUser = null;
    private Word? _word = null;

    private bool _isDataInit = false;
    private string? _title = null;
    private string? _translation = null;
    private string? _selectedStatus = null;

    private bool _doesFlashCardExist = false;
    private bool _isSavingFlashCard = false;
    private bool _isFormattingTranslation = false;
    const int LoadingDelayMiliseconds = 500;

    private List<string> _defaultTranslations = [];
    private bool _shouldShowTranslationForm = false;


    public async Task OnShowModalClick(Token thisToken)
    {
        try
        {
            var context = await DbContextFactory.CreateDbContextAsync();

            if (thisToken == null || thisToken.Id == null)
            {
                ErrorHandler.LogAndThrow();
                return;
            }
            if (thisToken.WordId == null)
            {
                ErrorHandler.LogAndThrow();
                return;
            }
            _word = thisToken.Word; 
            if (_word == null || _word.TextLowerCase is null)
            {
                ErrorHandler.LogAndThrow();
                return;
            }
            if (ReadDataPacket == null || ReadDataPacket.LanguageUser is null)
            {
                ErrorHandler.LogAndThrow();
                return;
            }
            _wordUser = _word.WordUsers
               .Where(x => x.LanguageUserId == (Guid)ReadDataPacket.LanguageUser.Id)
               .FirstOrDefault();
            _token = thisToken;

            if (_wordUser is null)
            {
                // it shouldn't be, but create it if so
                _wordUser = WordUserApi.WordUserCreate(context, _word,
                    ReadDataPacket.LanguageUser, "", AvailableWordUserStatus.UNKNOWN);
            }
            if (_wordUser is null)
                { ErrorHandler.LogAndThrow(); return; }
            
            _title = (_word is null) ? "" : _word.TextLowerCase;
            _translation = _wordUser.Translation;
            _defaultTranslations = GetDefaultTranslations(thisToken);

            _selectedStatus = UserService.GetUILabel($"statusLabel{(int)_wordUser.Status}");

            // check to display the "create card" button
            var existingCard = FlashCardApi.FlashCardReadByWordUserId(context, (Guid)_wordUser.Id);
            if (existingCard is null) _doesFlashCardExist = false;
            else _doesFlashCardExist = true;

            if (!string.IsNullOrEmpty(_wordUser.Translation)) _shouldShowTranslationForm = true;
            if (_defaultTranslations.Count == 0) _shouldShowTranslationForm = true;

            await modal.ShowAsync();
        }
        catch 
        {
            StateHasChanged();
            throw;
        }


    }

    private void OnShowTranslationFormButtonClick()
    {
        _shouldShowTranslationForm = true;
    }
    private List<string> GetDefaultTranslations(Token thisToken)
    {
        if (thisToken == null || thisToken.Word == null)
        {
            ErrorHandler.LogAndThrow();
            return [];
        }

        List<string> translationStrings = [];
        // get any default translations
        var defaultTranslations = thisToken.Word.WordTranslations
            .OrderBy(x => x.Ordinal)
            .ToList();
        foreach (var t in defaultTranslations)
        {
            if (t.Translation is null) continue;
            translationStrings.Add(t.Translation);
        }

        return translationStrings;
    }
    private string GetTokenClassSelected(int statusToCheck)
    {
        if (_wordUser is null) return "unselectedWordStatus";
        if ((int)_wordUser.Status == statusToCheck) return "selectedWordStatus";
        return "unselectedWordStatus";
    }
    private async Task OnHideModalClick()
    {
        await modal.HideAsync();
    }

    private async Task OnSaveModalAsync()
    {
        try
        {
            if (_wordUser is null)
            {
                ErrorHandler.LogAndThrow();
                return;
            }
            if (_wordUser.Translation is null)
            {
                _wordUser.Translation = string.Empty;
            }
            var context = await DbContextFactory.CreateDbContextAsync();

            await WordUserApi.WordUserUpdateAsync(
                context, (Guid)_wordUser.Id, (AvailableWordUserStatus)_wordUser.Status, _wordUser.Translation);
            if (Parent is not null) Parent.RefreshState();
            await modal.HideAsync();
        }
        catch
        {
            StateHasChanged();
            throw;
        }
    }
    private async Task OnFormatTranslationInputAsync()
    {
        var t_delay = Task.Delay(LoadingDelayMiliseconds);
        try
        {
            _isFormattingTranslation = true;
            if (_wordUser is null)
            {
                ErrorHandler.LogAndThrow();
                return;
            }
            if (_wordUser.Translation is null)
            {
                _wordUser.Translation = string.Empty;
            }
            var context = await DbContextFactory.CreateDbContextAsync();

            if (ReadDataPacket.LanguageToCode is not null)
            {
                var formattedTranslation = await WordUserApi.WordUserTranslationFormatAsync(
                    context, _wordUser.Translation, ReadDataPacket.LanguageToCode.Code);
                if (formattedTranslation is not null) _wordUser.Translation = formattedTranslation;
            }
        }
        catch
        {
            StateHasChanged();
            throw;
        }
        finally
        {
            await t_delay;
            _isFormattingTranslation = false;
        }
    }
    /// <summary>
    /// this updates the status on the word object w/out saving it
    /// </summary>
    /// <param name="newStatusInt"></param>
    private void UpdateWordStatusSelected(int newStatusInt)
    {
        if (_wordUser is null) return;
        _wordUser.Status = (AvailableWordUserStatus)newStatusInt;
    }

    private string GetTokenClass(AvailableWordUserStatus status)
    {
        if (status == AvailableWordUserStatus.UNKNOWN) return "statusUNKNOWN";
        if (status == AvailableWordUserStatus.NEW1) return "statusNEW1";
        if (status == AvailableWordUserStatus.NEW2) return "statusNEW2";
        if (status == AvailableWordUserStatus.LEARNING3) return "statusLEARNING3";
        if (status == AvailableWordUserStatus.LEARNING4) return "statusLEARNING4";
        if (status == AvailableWordUserStatus.LEARNED) return "statusLEARNED";
        if (status == AvailableWordUserStatus.WELLKNOWN) return "statusWELLKNOWN";
        if (status == AvailableWordUserStatus.IGNORED) return "statusIGNORED";
        return "statusUNKNOWN";
    }
    private async Task OnMakeFlashCard()
    {
        var t_delay = Task.Delay(LoadingDelayMiliseconds);

        _isSavingFlashCard = true;
        if (_doesFlashCardExist) return;

        if (_wordUser is null)
        {
            ErrorHandler.LogAndThrow();
            return;
        }
        var uiLanguage = ReadDataPacket.LanguageToCode;
        if (uiLanguage is null)
        {
            ErrorHandler.LogAndThrow();
            return;
        }
        if (_wordUser.Translation is null)
        {
            _wordUser.Translation = string.Empty;
        }
        var context = await DbContextFactory.CreateDbContextAsync();

        // save the wordUser first
        await WordUserApi.WordUserUpdateAsync(
                context, (Guid)_wordUser.Id, (AvailableWordUserStatus)_wordUser.Status, _wordUser.Translation);

        // now make the card
        await FlashCardApi.FlashCardCreateAsync(context, (Guid)_wordUser.Id, uiLanguage.Code);

        _isSavingFlashCard = false;
        _doesFlashCardExist = true;
        await t_delay;
    }


}
