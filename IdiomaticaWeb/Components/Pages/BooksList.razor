@rendermode InteractiveServer
@inject BookService BookService;
@inject UserService UserService;
@inject IDbContextFactory<IdiomaticaContext> DbContextFactory
@inject ILogger<IdiomaticaLogger> Logger;
@inject ErrorHandler ErrorHandler;

<style>
    .visibleBlRow {
        display: block;
    }
    .invisibleBlRow {
        display: none;
    }

    .transport-control {
        font-size: 0.8rem;
    }

    
</style>

<ErrorAlert ErrorState="errorState"></ErrorAlert>
<AuthorizeView>
    <Authorized>

        
        
        @if (_isLoading)
        {
            <Button Color="ButtonColor.Primary" Loading="true" LoadingText="@UserService.GetUILabel("loading")" />
        }
        
        else
        {
                <div class="row">
                    @if (!BookService.BookListRows.Any())
                    {
                        <p>
                            @UserService.GetUILabel("bookListNoBookNotice")
                        </p>
                    }
                </div>
                @if(IsBrowse == false)
                {
                    <div class="row">
                        <Button Color="ButtonColor.Primary" Type="ButtonType.Link" To="/Books/Browse">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-eye-fill" viewBox="0 0 16 16">
                                <path d="M10.5 8a2.5 2.5 0 1 1-5 0 2.5 2.5 0 0 1 5 0" />
                                <path d="M0 8s3-5.5 8-5.5S16 8 16 8s-3 5.5-8 5.5S0 8 0 8m8 3.5a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7" />
                            </svg>
                            @UserService.GetUILabel("bookListBrowseForBooks")
                        </Button>
                    </div>
                }
                
                
            <BookListTransport BookService="BookService"
                               GetNext="GetNext"
                               GetPrevious="GetPrevious"
                               FilterAndSort="FilterAndSort" />
            
            <div>
                @foreach (var row in BookService.BookListRows)
                {
                    <BookListRowView Class="@OnGetBookListRowClass(row).Result" BookService="BookService" Row="row" OnArchiveAsync="OnArchiveBookUser" />
                }
            </div>

        }
    </Authorized>
    <NotAuthorized>
        <p>@UserService.GetUILabel("notLoggedIn")</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    [Parameter] public bool IsBrowse { get; set;  }

    public ErrorState errorState = new ErrorState() { isError = false, errorMessage = "" };
    private bool _isLoading = false;




    #region sorting and filtering
    private string _filter;
    private string _activeSortColumn = "Title";
    private string _sortDirection = "Ascending";

    #endregion







    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (BookService.IsDataInitBookList == false)
            {
                _isLoading = true;
                var t_delay = Task.Delay(BookService.LoadingDelayMiliseconds);
                var context = await DbContextFactory.CreateDbContextAsync();
                await BookService.InitDataBookList(context, IsBrowse);
                await t_delay;
                _isLoading = false;
            }
            

        }
        catch (IdiomaticaException ex)
        {
            errorState.isError = true;
            errorState.errorMessage = UserService.GetUILabel("bookListInitializationError");
            errorState.code = ex.code;
            StateHasChanged();
            return;
        }
        catch (Exception ex)
        {
            errorState.isError = true;
            errorState.errorMessage = UserService.GetUILabel("bookListInitializationError");
            StateHasChanged();
        }
    }
    private async Task<string> OnGetBookListRowClass(BookListRow row)
    {
        if (await OnIsVisibleInListCheck(row.BookId, row.LanguageName, row.Title)) return "visibleBlRow";
        return "invisibleBlRow";
    }
    private async Task<bool> OnIsVisibleInListCheck(int? bookId, string? languageName, string? title)
    {
        try
        {
            if (string.IsNullOrEmpty(_filter))
                return true;

            string languageNameNotNull = languageName == null ? "" : (string)languageName;
            string titleNotNull = title == null ? "" : (string)title;
            if (languageNameNotNull.Contains(_filter, StringComparison.OrdinalIgnoreCase))
                return true;
            if (titleNotNull.Contains(_filter, StringComparison.OrdinalIgnoreCase))
                return true;
            var context = await DbContextFactory.CreateDbContextAsync();
            return await BookService.BookDoesContainTagLikeText(context, bookId, _filter);
        }
        catch (IdiomaticaException ex)
        {
            errorState.isError = true;
            errorState.errorMessage = UserService.GetUILabel("bookListIsVisibleError");
            errorState.code = ex.code;
            StateHasChanged();
            return false;
        }
        catch (Exception ex)
        {
            errorState.isError = true;
            errorState.errorMessage = UserService.GetUILabel("bookListIsVisibleError");
            StateHasChanged();
            return false;
        }
    }
    private async Task OnSortTableAsync()
    {
        try
        {
            var sortAscending = (_sortDirection == "Ascending") ? true : false;
            //await BookService.BookListRowsSort(_activeSortColumn, sortAscending);
        }
        catch (IdiomaticaException ex)
        {
            errorState.isError = true;
            errorState.errorMessage = UserService.GetUILabel("bookListSortTableError");
            errorState.code = ex.code;
            StateHasChanged();
            return;
        }
        catch (Exception ex)
        {
            errorState.isError = true;
            errorState.errorMessage = UserService.GetUILabel("bookListSortTableError");
            StateHasChanged();
        }

    }
    private async Task OnArchiveBookUser(int bookId)
    {
        try
        {
            _isLoading = true;
            var t_delay = Task.Delay(BookService.LoadingDelayMiliseconds);
            var context = await DbContextFactory.CreateDbContextAsync();
            await BookService.BookUserArchiveAsync(context, bookId);
            // re-apply sort
            var sortAscending = (_sortDirection == "Ascending") ? true : false;
            //await BookService.BookListRowsSort(_activeSortColumn, sortAscending);
            await t_delay;
            _isLoading = false;

        }
        catch (IdiomaticaException ex)
        {
            errorState.isError = true;
            errorState.errorMessage = UserService.GetUILabel("bookListRemoveBookError");
            errorState.code = ex.code;
            StateHasChanged();
            return;
        }
    }


    private async Task GetNext()
    {
        try
        {
            _isLoading = true;
            var t_delay = Task.Delay(BookService.LoadingDelayMiliseconds);
            var context = await DbContextFactory.CreateDbContextAsync();
            await BookService.BookListRowsNext(context);
            await t_delay;
            _isLoading = false;

        }
        catch (IdiomaticaException ex)
        {
            errorState.isError = true;
            errorState.errorMessage = UserService.GetUILabel("bookListRefreshError");
            errorState.code = ex.code;
            StateHasChanged();
            return;
        }
    }
    private async Task GetPrevious()
    {
        try
        {
            _isLoading = true;
            var t_delay = Task.Delay(BookService.LoadingDelayMiliseconds);
            var context = await DbContextFactory.CreateDbContextAsync();
            await BookService.BookListRowsPrevious(context);
            await t_delay;
            _isLoading = false;

        }
        catch (IdiomaticaException ex)
        {
            errorState.isError = true;
            errorState.errorMessage = UserService.GetUILabel("bookListRefreshError");
            errorState.code = ex.code;
            StateHasChanged();
            return;
        }
    }
    private async Task FilterAndSort()
    {
        try
        {
            _isLoading = true;
            var t_delay = Task.Delay(BookService.LoadingDelayMiliseconds);
            var context = await DbContextFactory.CreateDbContextAsync();
            await BookService.BookListRowsFilterAndSort(context);
            await t_delay;
            _isLoading = false;

        }
        catch (IdiomaticaException ex)
        {
            errorState.isError = true;
            errorState.errorMessage = UserService.GetUILabel("bookListRefreshError");
            errorState.code = ex.code;
            StateHasChanged();
            return;
        }
    }
}
