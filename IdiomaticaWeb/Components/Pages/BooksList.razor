@page "/Books"
@rendermode InteractiveServer
@inject BookService BookService;
@inject UserService UserService;
@inject IDbContextFactory<IdiomaticaContext> DbContextFactory
@inject ILogger<IdiomaticaLogger> Logger;
@inject ErrorHandler ErrorHandler;

<style>
    .visibleBlRow {
        display: block;
    }
    .invisibleBlRow {
        display: none;
    }

    
</style>

<ErrorAlert ErrorState="errorState"></ErrorAlert>
<AuthorizeView>
    <Authorized>

        
        
        @if (_isLoading)
        {
            <Button Color="ButtonColor.Primary" Loading="true" LoadingText="@UserService.GetUILabel("loading")" />
        }
        else if (!BookService.BookListRows.Any())
        {
            <p>
                @UserService.GetUILabel("bookListNoBookNotice")
            </p>
            @* todo: add an "add books" button *@
        }
        else
        {
            <div class="container">
                <div class="row align-items-center mb-2">
                    <div class="col-6">
                        <input class="form-control" 
                               type="text" 
                               placeholder="@UserService.GetUILabel("bookListFormFilter")"
                               @bind="_filter"
                               @bind:event="oninput" />
                    </div>
                    <div class="col-6">
                        <div class="container">
                            <div class="row input-group p-2 align-items-center bg-primary-subtle border border-primary-subtle rounded-3">
                                <div class="col-5">
                                    <InputSelect class="form-control"
                                                 @bind-Value="_activeSortColumn">
                                        <option value="Title" selected disabled>@UserService.GetUILabel("bookListFormSortColumn")</option>
                                        <option value="Language">@UserService.GetUILabel("bookListLanguageColumnHead")</option>
                                        <option value="ISCOMPLETE">@UserService.GetUILabel("bookListCompletedColumnHead")</option>
                                        <option value="Title">@UserService.GetUILabel("bookListTitleColumnHead")</option>
                                        <option value="PROGRESSPERCENT">@UserService.GetUILabel("bookListProgressColumnHead")</option>
                                        <option value="TOTALWORDCOUNT">@UserService.GetUILabel("bookListTotalWordCountColumnHead")</option>
                                        <option value="DISTINCTWORDCOUNT">@UserService.GetUILabel("bookListDistinctWordCountColumnHead")</option>
                                        <option value="DISTINCTKNOWNPERCENT">@UserService.GetUILabel("bookListDistinctKnownPercentColumnHead")</option>
                                    </InputSelect>
                                </div>
                                <div class="col-5">
                                    <InputSelect class="form-control"
                                                 @bind-Value="_sortDirection">
                                        <option selected disabled value="">@UserService.GetUILabel("bookListFormSortDirection")</option>
                                        <option value="Ascending">@UserService.GetUILabel("bookListFormSortAscending")</option>
                                        <option value="Descending">@UserService.GetUILabel("bookListFormSortDescending")</option>
                                    </InputSelect>
                                </div>
                                <div class="col-2">
                                    <Button Color="ButtonColor.Primary" Size="Size.Small" @onclick="OnSortTableAsync">
                                        Sort
                                    </Button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <div>
                @foreach (var row in BookService.BookListRows)
                {
                    <BookListRowView Class="@OnGetBookListRowClass(row).Result" BookService="BookService" Row="row" OnArchiveAsync="OnArchiveBookUser" />
                }
            </div>

        }
    </Authorized>
    <NotAuthorized>
        <p>@UserService.GetUILabel("notLoggedIn")</p>
    </NotAuthorized>
</AuthorizeView>

@code {

    public ErrorState errorState = new ErrorState() { isError = false, errorMessage = "" };
    private bool _isLoading = false;




    #region sorting and filtering
    private string _filter;
    private string _activeSortColumn = "Title";
    private string _sortDirection = "Ascending";

    #endregion







    protected override async Task OnInitializedAsync()
    {
        try
        {
            _isLoading = true;
            var t_delay = Task.Delay(BookService.LoadingDelayMiliseconds);
            var context = await DbContextFactory.CreateDbContextAsync();
            await BookService.InitDataBookList(context);
            await t_delay;
            _isLoading = false;

        }
        catch (IdiomaticaException ex)
        {
            errorState.isError = true;
            errorState.errorMessage = UserService.GetUILabel("bookListInitializationError");
            errorState.code = ex.code;
            StateHasChanged();
            return;
        }
        catch (Exception ex)
        {
            errorState.isError = true;
            errorState.errorMessage = UserService.GetUILabel("bookListInitializationError");
            StateHasChanged();
        }
    }
    private async Task<string> OnGetBookListRowClass(BookListRow row)
    {
        if (await OnIsVisibleInListCheck(row.BookId, row.LanguageName, row.Title)) return "visibleBlRow";
        return "invisibleBlRow";
    }
    private async Task<bool> OnIsVisibleInListCheck(int? bookId, string? languageName, string? title)
    {
        try
        {
            if (string.IsNullOrEmpty(_filter))
                return true;

            string languageNameNotNull = languageName == null ? "" : (string)languageName;
            string titleNotNull = title == null ? "" : (string)title;
            if (languageNameNotNull.Contains(_filter, StringComparison.OrdinalIgnoreCase))
                return true;
            if (titleNotNull.Contains(_filter, StringComparison.OrdinalIgnoreCase))
                return true;
            var context = await DbContextFactory.CreateDbContextAsync();
            return await BookService.BookDoesContainTagLikeText(context, bookId, _filter);
        }
        catch (IdiomaticaException ex)
        {
            errorState.isError = true;
            errorState.errorMessage = UserService.GetUILabel("bookListIsVisibleError");
            errorState.code = ex.code;
            StateHasChanged();
            return false;
        }
        catch (Exception ex)
        {
            errorState.isError = true;
            errorState.errorMessage = UserService.GetUILabel("bookListIsVisibleError");
            StateHasChanged();
            return false;
        }
    }
    private async Task OnSortTableAsync()
    {
        try
        {
            var sortAscending = (_sortDirection == "Ascending") ? true : false;
            await BookService.BookListRowsSort(_activeSortColumn, sortAscending);
        }
        catch (IdiomaticaException ex)
        {
            errorState.isError = true;
            errorState.errorMessage = UserService.GetUILabel("bookListSortTableError");
            errorState.code = ex.code;
            StateHasChanged();
            return;
        }
        catch (Exception ex)
        {
            errorState.isError = true;
            errorState.errorMessage = UserService.GetUILabel("bookListSortTableError");
            StateHasChanged();
        }

    }
    private async Task OnArchiveBookUser(int bookId)
    {
        try
        {
            _isLoading = true;
            var t_delay = Task.Delay(BookService.LoadingDelayMiliseconds);
            var context = await DbContextFactory.CreateDbContextAsync();
            await BookService.BookUserArchiveAsync(context, bookId);
            // re-apply sort
            var sortAscending = (_sortDirection == "Ascending") ? true : false;
            await BookService.BookListRowsSort(_activeSortColumn, sortAscending);
            await t_delay;
            _isLoading = false;

        }
        catch (IdiomaticaException ex)
        {
            errorState.isError = true;
            errorState.errorMessage = UserService.GetUILabel("bookListRemoveBookError");
            errorState.code = ex.code;
            StateHasChanged();
            return;
        }
    }
}
