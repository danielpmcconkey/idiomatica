@page "/Books"
@rendermode InteractiveServer
@inject BookService BookService;
@inject UserService UserService;
@inject IDbContextFactory<IdiomaticaContext> DbContextFactory

<link href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet">
<style>
    .sort-th {
        cursor: pointer;
    }
    .fa {
        float: right;
    }    
</style>
<ErrorAlert ErrorState="errorState"></ErrorAlert>
<AuthorizeView>
    <Authorized>
        
        <div class="form-group mb-2">
            <input class="form-control" type="text" placeholder="@UserService.GetUILabel("bookListFormFilter")"
                   @bind="_filter"
                   @bind:event="oninput" />
        </div>
        @if (_bookListRows is null)
        {
            <p>
                @UserService.GetUILabel("loading")
            </p>
        }
        else if (!_bookListRows.Any())
        {
            <p>
                @UserService.GetUILabel("bookListNoBookNotice")
            </p>
            @* todo: add an "add books" button *@
        }
        else
        {

            <table class="table table-striped table-bordered table-hover">
                <thead class="thead-light">
                    <tr>
                        <th scope="col" class="sort-th" @onclick="@(() => OnSortTableClick("Id"))">
                            #
                            <span class="fa @(OnSetSortIcon("Id"))"></span>
                        </th>
                        <th scope="col" class="sort-th" @onclick="@(() => OnSortTableClick("Language"))">
                            @UserService.GetUILabel("bookListLanguageColumnHead")
                            <span class="fa @(OnSetSortIcon("Language"))"></span>
                        </th>
                        <th scope="col" class="sort-th text-center" @onclick="@(() => OnSortTableClick("ISCOMPLETE"))">
                            @UserService.GetUILabel("bookListCompletedColumnHead")
                            <span class="fa @(OnSetSortIcon("ISCOMPLETE"))"></span>
                        </th>
                        <th scope="col" class="sort-th" @onclick="@(() => OnSortTableClick("Title"))">
                            @UserService.GetUILabel("bookListTitleColumnHead")
                            <span class="fa @(OnSetSortIcon("Title"))"></span>
                        </th>
                        <th scope="col" class="sort-th text-center" @onclick="@(() => OnSortTableClick("PROGRESSPERCENT"))">
                            @UserService.GetUILabel("bookListProgressColumnHead")
                            <span class="fa @(OnSetSortIcon("PROGRESSPERCENT"))"></span>
                        </th>
                        <th scope="col" class="sort-th text-end" @onclick="@(() => OnSortTableClick("TOTALWORDCOUNT"))">
                            @UserService.GetUILabel("bookListTotalWordCountColumnHead")
                            <span class="fa @(OnSetSortIcon("TOTALWORDCOUNT"))"></span>
                        </th>
                        <th scope="col" class="sort-th text-end" @onclick="@(() => OnSortTableClick("TOTALKNOWNPERCENT"))">
                            @UserService.GetUILabel("bookListTotalKnownPercentColumnHead")
                            <span class="fa @(OnSetSortIcon("TOTALKNOWNPERCENT"))"></span>
                        </th>
                        <th scope="col" class="sort-th text-end" @onclick="@(() => OnSortTableClick("DISTINCTWORDCOUNT"))">
                            @UserService.GetUILabel("bookListDistinctWordCountColumnHead")
                            <span class="fa @(OnSetSortIcon("DISTINCTWORDCOUNT"))"></span>
                        </th>
                        <th scope="col" class="sort-th text-end" @onclick="@(() => OnSortTableClick("DISTINCTKNOWNPERCENT"))">
                            @UserService.GetUILabel("bookListDistinctKnownPercentColumnHead")
                            <span class="fa @(OnSetSortIcon("DISTINCTKNOWNPERCENT"))"></span>
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var row in _bookListRows)
                    {
                        if (!OnIsVisibleInListCheck(row.LanguageName, row.Title))
                            continue;

                        <tr>
                            <td scope="row">@row.BookId</td>
                            <td scope="row">@row.LanguageName</td>
                            <td scope="row" class="text-center">
                                @if (OnFormatIsComplete(row.IsComplete))
                                {
                                    <span class="completedMarker">&#x2713;</span>
                                }
                            </td>
                            <td scope="row">
                                <p>
                                    @OnFormatTitle(row.Title)
                                </p>
                                <p>
                                    <Button Color="ButtonColor.Primary"
                                            Type="ButtonType.Link"
                                            Size="Size.Small"
                                            To="@OnGetBookLinkRead(row.BookId)">
                                        Read
                                    </Button>
                                    <Button Color="ButtonColor.Secondary"
                                            Type="ButtonType.Link"
                                            Size="Size.Small"
                                            To="@OnGetBookLinkUpdate(row.BookId)">
                                        Update
                                    </Button>
                                    <Button Color="ButtonColor.Warning"
                                            Size="Size.Small"
                                            @onclick="((args) => OnClickRemove(args, row.BookId))">
                                        Remove
                                    </Button>
                                    
                                    
                                </p>
                            </td>
                            <td scope="row" class="text-center">@OnFormatProgress(row.Progress)</td>
                            <td scope="row" class="text-end">@OnFormatCount(row.TotalWordCount)</td>
                            <td scope="row" class="text-end">@OnFormatCount(row.TotalKnownPercent)</td>
                            <td scope="row" class="text-end">@OnFormatCount(row.DistinctWordCount)</td>
                            <td scope="row" class="text-end">@OnFormatCount(row.DistinctKnownPercent)</td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </Authorized>
    <NotAuthorized>
        <p>@UserService.GetUILabel("notLoggedIn")</p>
    </NotAuthorized>
</AuthorizeView>

@code {

    public ErrorState errorState = new ErrorState() { isError = false, errorMessage = "" };

    // private List<BookUser>? _bookUsers;
    // private List<BookUserStat>? _bookUserStats;
    private List<BookListRow> _bookListRows;

    private User _loggedInUser { get { return UserService.GetLoggedInUser(); } }

    #region sorting and filtering
    private string _filter;
    private bool _isSortedAscending;
    private string _activeSortColumn;
    Dictionary<string, Func<BookListRow, object>> orderByFunctions =
        new Dictionary<string, Func<BookListRow, object>>();
    #endregion







    protected override async Task OnInitializedAsync()
    {
        try
        {
            var context = await DbContextFactory.CreateDbContextAsync();
            _bookListRows = await DataCache.BookListRowsByUserIdReadAsync((int)_loggedInUser.Id, context);
        }
        catch (Exception ex)
        {
            errorState.isError = true;
            errorState.errorMessage = UserService.GetUILabel("bookListInitializationError");
            StateHasChanged();
        }
    }
    protected override void OnInitialized()
    {
        try
        {
            orderByFunctions.Add("Language", (x => x.LanguageName));
            orderByFunctions.Add("Id", (x => x.BookId));
            orderByFunctions.Add("Title", (x => x.Title));
            orderByFunctions.Add("PROGRESSPERCENT", (x => x.ProgressPercent));
            orderByFunctions.Add("ISCOMPLETE", (x => x.IsComplete));
            orderByFunctions.Add("TOTALWORDCOUNT", (x => x.TotalWordCount));
            orderByFunctions.Add("TOTALKNOWNPERCENT", (x => x.TotalKnownPercent));
            orderByFunctions.Add("DISTINCTWORDCOUNT", (x => x.DistinctWordCount));
            orderByFunctions.Add("DISTINCTKNOWNPERCENT", (x => x.DistinctKnownPercent));
        }
        catch (Exception ex)
        {
            errorState.isError = true;
            errorState.errorMessage = UserService.GetUILabel("bookListInitializationError");
            StateHasChanged();
        }
    }
    private string OnFormatTitle(string? title)
    {
        try
        {
            if (title == null) return null;
            int maxCharsInBookListTitle = 60;
            if (title.Length > maxCharsInBookListTitle)
            {
                title = title.Substring(0, maxCharsInBookListTitle) + "...";
            }
            return title;
        }
        catch (Exception ex)
        {
            errorState.isError = true;
            errorState.errorMessage = UserService.GetUILabel("bookListInitializationError");
            StateHasChanged();
            return string.Empty;
        }
    }
    private string OnGetBookLinkRead(int? bookId)
    {
        try
        {
            if (bookId == null) return "";
            return $"/Book/{bookId}/Read";
        }
        catch (Exception ex)
        {
            errorState.isError = true;
            errorState.errorMessage = UserService.GetUILabel("bookListInitializationError");
            StateHasChanged();
            return string.Empty;
        }
    }
    private string OnGetBookLinkUpdate(int? bookId)
    {
        try
        {
            if (bookId == null) return "";
            return $"/Book/{bookId}/Update";
        }
        catch (Exception ex)
        {
            errorState.isError = true;
            errorState.errorMessage = UserService.GetUILabel("bookListInitializationError");
            StateHasChanged();
            return string.Empty;
        }
    }
    private void OnClickRemove(EventArgs args, int? bookId)
    {
        try
        {
            throw new NotImplementedException("book removal not yet implemented");

        }
        catch (Exception ex)
        {
            errorState.isError = true;
            errorState.errorMessage = UserService.GetUILabel("bookListRemoveBookError");
            StateHasChanged();
        }

    }
    private bool OnIsVisibleInListCheck(string? languageName, string? title)
    {
        try
        {
            if (string.IsNullOrEmpty(_filter))
                return true;

            string languageNameNotNull = languageName == null ? "" : (string)languageName;
            string titleNotNull = title == null ? "" : (string)title;
            if (languageNameNotNull.Contains(_filter, StringComparison.OrdinalIgnoreCase))
                return true;
            if (titleNotNull.Contains(_filter, StringComparison.OrdinalIgnoreCase))
                return true;
            return false;
        }
        catch (Exception ex)
        {
            errorState.isError = true;
            errorState.errorMessage = UserService.GetUILabel("bookListIsVisibleError");
            StateHasChanged();
            return false;
        }
    }
    private void OnSortTableClick(string columnName)
    {
        try
        {
            if (_bookListRows is null) return;
            if (!orderByFunctions.ContainsKey(columnName)) return;

            if (columnName != _activeSortColumn)
            {
                _bookListRows = _bookListRows.OrderBy(orderByFunctions[columnName]).ToList();
                _isSortedAscending = true;
                _activeSortColumn = columnName;
            }
            else
            {
                if (_isSortedAscending)
                {
                    _bookListRows = _bookListRows.OrderByDescending(orderByFunctions[columnName]).ToList();
                }
                else
                {
                    _bookListRows = _bookListRows.OrderBy(orderByFunctions[columnName]).ToList();
                }
                _isSortedAscending = !_isSortedAscending;
            }
        }
        catch (Exception ex)
        {
            errorState.isError = true;
            errorState.errorMessage = UserService.GetUILabel("bookListSortTableError");
            StateHasChanged();
        }

    }
    private string OnSetSortIcon(string columnName)
    {
        try
        {
            if (_activeSortColumn != columnName)
            {
                return string.Empty;
            }
            if (_isSortedAscending)
            {
                return "fa-sort-up";
            }
            else
            {
                return "fa-sort-down";
            }
        }
        catch (Exception ex)
        {
            errorState.isError = true;
            errorState.errorMessage = UserService.GetUILabel("bookListInitializationError");
            StateHasChanged();
            return string.Empty;
        }
    }
    private string OnFormatCount(decimal? dbStat)
    {
        try
        {
            if (dbStat is null) return "0";
            var flooredVal = Math.Floor((decimal)dbStat);
            return flooredVal.ToString("N0");
        }
        catch (Exception ex)
        {
            errorState.isError = true;
            errorState.errorMessage = UserService.GetUILabel("bookListInitializationError");
            StateHasChanged();
            return string.Empty;
        }
    }
    private string OnFormatProgress(string? progress)
    {
        try
        {
            if (progress is null) return "0 / 0";
            return progress;
        }
        catch (Exception ex)
        {
            errorState.isError = true;
            errorState.errorMessage = UserService.GetUILabel("bookListInitializationError");
            StateHasChanged();
            return string.Empty;
        }
    }
    private bool OnFormatIsComplete(string? isComplete)
    {
        try
        {
            
            if (isComplete is null) return false;
            bool outVal = false;
            if (bool.TryParse(isComplete, out outVal) == false) return false;
            return outVal;
        }
        catch (Exception ex)
        {
            errorState.isError = true;
            errorState.errorMessage = UserService.GetUILabel("bookListInitializationError");
            StateHasChanged();
            return false;
        }
    }
}
