@using Model
@using Logic
@using Model.DAL
@using Logic.UILabels
@using System.Globalization
@using System.Linq.Expressions;
@using Microsoft.EntityFrameworkCore;

@page "/books-list"
@rendermode InteractiveServer
@inject IDbContextFactory<IdiomaticaContext> DbFactory

<link href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet">
<style>
	.sort-th {
		cursor: pointer;
	}

	.fa {
		float: right;
	}	
</style>
@if(_isError)
{
    <div><h3>Error</h3><p>@_errorMessage</p></div>
}
<div class="d-flex flex-row-reverse mb-2">
    <button type="button" class="btn btn-primary" @onclick="@(e => _books = UpdateBookStats())">
        @_uiLabels.GetLabel("btnUpdateBookListStats")
    </button>
</div>

<div class="form-group mb-2">
	<input class="form-control" type="text" placeholder="@_uiLabels.GetLabel("bookListFormFilter")"
		   @bind="_filter"
		   @bind:event="oninput" />
</div>
@if (_books is null)
{
	<p>
		@_uiLabels.GetLabel("loading")red
	</p>
}
else if(!_books.Any())
{
	<p>
		@_uiLabels.GetLabel("bookListNoBookNotice")
	</p>
	@* todo: add an "add books" button *@
}
else
{
	<table class="table table-striped table-bordered table-hover">
		<thead class="thead-light">
			<tr>
				<th scope="col" class="sort-th" @onclick="@(() => SortTable("Id"))">
					#
					<span class="fa @(SetSortIcon("Id"))"></span>
				</th>
				<th scope="col" class="sort-th" @onclick="@(() => SortTable("Language"))">
					@_uiLabels.GetLabel("bookListLanguageColumnHead")
					<span class="fa @(SetSortIcon("Language"))"></span>
				</th>
				<th scope="col" class="sort-th text-center" @onclick="@(() => SortTable("IsComplete"))">
					@_uiLabels.GetLabel("bookListCompletedColumnHead")
					<span class="fa @(SetSortIcon("IsComplete"))"></span>
				</th>
				<th scope="col" class="sort-th" @onclick="@(() => SortTable("Title"))">
					@_uiLabels.GetLabel("bookListTitleColumnHead")
					<span class="fa @(SetSortIcon("Title"))"></span>
				</th>
				<th scope="col" class="sort-th text-center" @onclick="@(() => SortTable("Progress"))">
					@_uiLabels.GetLabel("bookListProgressColumnHead")
					<span class="fa @(SetSortIcon("Progress"))"></span>
				</th>
				<th scope="col" class="sort-th text-end" @onclick="@(() => SortTable("TOTALWORDCOUNT"))">
					@_uiLabels.GetLabel("bookListTotalWordCountColumnHead")
					<span class="fa @(SetSortIcon("TOTALWORDCOUNT"))"></span>
				</th>
				<th scope="col" class="sort-th text-end" @onclick="@(() => SortTable("TOTALKNOWNPERCENT"))">
					@_uiLabels.GetLabel("bookListTotalKnownPercentColumnHead")
					<span class="fa @(SetSortIcon("TOTALKNOWNPERCENT"))"></span>
				</th>
				<th scope="col" class="sort-th text-end" @onclick="@(() => SortTable("DISTINCTWORDCOUNT"))">
					@_uiLabels.GetLabel("bookListDistinctWordCountColumnHead")
					<span class="fa @(SetSortIcon("DISTINCTWORDCOUNT"))"></span>
				</th>
				<th scope="col" class="sort-th text-end" @onclick="@(() => SortTable("DISTINCTKNOWNPERCENT"))">
					@_uiLabels.GetLabel("bookListDistinctKnownPercentColumnHead")
					<span class="fa @(SetSortIcon("DISTINCTKNOWNPERCENT"))"></span>
				</th>
			</tr>
		</thead>
		<tbody>
			@foreach(var book in _books)
			{
				if (!IsVisibleInList(book))
					continue;

				
				<tr>
					<td scope="row">@book.Id</td>
					<td scope="row">@book.LanguageUser.Language.Name</td>
					<td scope="row" class="text-center">
					@if (book.IsComplete)
					{
						<span class="completedMarker">&#x2713;</span>
					}
					</td>
					<td scope="row"><a href="@GetBookLink(book)">@FormatTitle(book)</a></td>
					<td scope="row" class="text-center">@FormatProgress(book)</td>
                    <td scope="row" class="text-end">@FormatCount(book, AvailableBookStat.TOTALWORDCOUNT)</td>
                    <td scope="row" class="text-end">@FormatCount(book, AvailableBookStat.TOTALKNOWNPERCENT)</td>
                    <td scope="row" class="text-end">@FormatCount(book, AvailableBookStat.DISTINCTWORDCOUNT)</td>
                    <td scope="row" class="text-end">@FormatCount(book, AvailableBookStat.DISTINCTKNOWNPERCENT)</td>
				</tr>
			}
		</tbody>
	</table>
}

@code {
    private int _loggedInUserId = 1;  // todo: replace this filter with an actual logged in user
    private List<LanguageUser> _languageUsers;
    private string _filter;
    private bool _isSortedAscending;
    private string _activeSortColumn;
    private List<Book>? _books;
    Dictionary<string, Func<Book, object>> orderByFunctions =
        new Dictionary<string, Func<Book, object>>();
    private UILabels _uiLabels = UILabelFactory.GetUILabels(UILanguage.ENG_US);
    private bool _isError = false;
    private string _errorMessage = "";

    protected override void OnInitialized()
    {
        try
        {
            orderByFunctions.Add("Language", (x => x.LanguageUser.Language.Name));
            orderByFunctions.Add("Id", (x => x.Id));
            orderByFunctions.Add("IsComplete", (x => x.IsComplete));
            orderByFunctions.Add("Title", (x => x.Title));
            orderByFunctions.Add("Progress", (x => GetBookProgressPercent(x)));
            orderByFunctions.Add("TOTALWORDCOUNT", (x => Logic.StatisticsHelper.GetBookStat_int(x, AvailableBookStat.TOTALWORDCOUNT)));
            orderByFunctions.Add("TOTALKNOWNPERCENT", (x => Logic.StatisticsHelper.GetBookStat_int(x, AvailableBookStat.TOTALKNOWNPERCENT)));
            orderByFunctions.Add("DISTINCTWORDCOUNT", (x => Logic.StatisticsHelper.GetBookStat_int(x, AvailableBookStat.DISTINCTWORDCOUNT)));
            orderByFunctions.Add("DISTINCTKNOWNPERCENT", (x => Logic.StatisticsHelper.GetBookStat_int(x, AvailableBookStat.DISTINCTKNOWNPERCENT)));

            using (var context = DbFactory.CreateDbContext())
            {
                _languageUsers = Fetch.LanguageUsersAndBooksAndBookStatsAndLanguageAndUserAndUserStats(
                    context, (x => x.UserId == _loggedInUserId));
            }
            _books = FetchBooks();
        }
        catch(Exception ex)
        {
            _isError = true;
            _errorMessage = ex.Message;
        }
    }
    private List<Book> FetchBooks(bool refreshFromDb = false)
    {
        var books = new List<Book>();
        foreach (var languageUser in _languageUsers) 
        {
            if (refreshFromDb)
            {
                using (var context = DbFactory.CreateDbContext())
                {
                    var dbResult = Fetch.BooksAndBookStatsAndLanguage(context,
                        x => x.LanguageUserId == languageUser.Id);
                    languageUser.Books = dbResult;
                    books.AddRange(dbResult);
                }
            }
            else books.AddRange(languageUser.Books);
        }
        return books;
    }

    private string FormatTitle(Book book)
    {
        int maxCharsInBookListTitle = 60;
        string title = book.Title;
        if(title.Length > maxCharsInBookListTitle)
        {
            title = title.Substring(0, maxCharsInBookListTitle) + "...";
        }
        return title;
    }
    private string GetBookLink(Book book)
    {
        return $"/read/{book.Id}";
    }
    private float GetBookProgressPercent(Book book)
    {
        if (book.TotalPages == 0) return 0f;
        return book.LastPageRead / (float)book.TotalPages;
    }
    private bool IsVisibleInList(Book book)
    {
        if (string.IsNullOrEmpty(_filter))
            return true;
        if (book.LanguageUser.Language.Name.Contains(_filter, StringComparison.OrdinalIgnoreCase))
            return true;
        if (book.Title.Contains(_filter, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
    private void SortTable(string columnName)
    {
        if (!orderByFunctions.ContainsKey(columnName)) return;

        if (columnName != _activeSortColumn)
        {
            _books = _books.OrderBy(orderByFunctions[columnName]).ToList();
            _isSortedAscending = true;
            _activeSortColumn = columnName;

        }
        else
        {
            if (_isSortedAscending)
            {
                _books = _books.OrderByDescending(orderByFunctions[columnName]).ToList();
            }
            else
            {
                _books = _books.OrderBy(orderByFunctions[columnName]).ToList();
            }

            _isSortedAscending = !_isSortedAscending;
        }
    }
    private string SetSortIcon(string columnName)
    {
        if (_activeSortColumn != columnName)
        {
            return string.Empty;
        }
        if (_isSortedAscending)
        {
            return "fa-sort-up";
        }
        else
        {
            return "fa-sort-down";
        }
    }
    private string FormatCount(Book book, AvailableBookStat key)
    {
        var existingStat = StatisticsHelper.GetBookStat_int(book, key);        
        return existingStat.ToString("N0");		
    }
    private string FormatProgress(Book book)
    {
        if (book.TotalPages == 0) return "0";
        return $"{book.LastPageRead} / {book.TotalPages}";
    }
    private List<Book> UpdateBookStats()
    {
        try
        {
            using (var context = DbFactory.CreateDbContext())
            {
                StatisticsHelper.UpdateAllBookStatsForUserId(context, _loggedInUserId);
                var newBooks = FetchBooks(true);
                return newBooks;
            }
        }
        catch (Exception ex)
        {
            _isError = true;
            _errorMessage = ex.Message;
            return new List<Book>();
        }
    }

}
