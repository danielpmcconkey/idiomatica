@using Model
@using Logic
@using Model.DAL
@using Logic.UILabels
@using System.Globalization
@using System.Linq.Expressions;
@using Microsoft.EntityFrameworkCore;

@page "/books-list"
@rendermode InteractiveServer
@inject IDbContextFactory<IdiomaticaContext> DbFactory

<link href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet">
<style>
	.sort-th {
		cursor: pointer;
	}

	.fa {
		float: right;
	}	
</style>
@if(_isError)
{
    <div><h3>Error</h3><p>@_errorMessage</p></div>
}
<div class="d-flex flex-row-reverse mb-2">
    <button type="button" class="btn btn-primary" @onclick="@(e => _bookUsers = UpdateBookUserStats())">
        @_uiLabels.GetLabel("btnUpdateBookListStats")
    </button>
</div>

<div class="form-group mb-2">
	<input class="form-control" type="text" placeholder="@_uiLabels.GetLabel("bookListFormFilter")"
		   @bind="_filter"
		   @bind:event="oninput" />
</div>
@if (_bookUsers is null)
{
	<p>
		@_uiLabels.GetLabel("loading")red
	</p>
}
else if (!_bookUsers.Any())
{
	<p>
		@_uiLabels.GetLabel("bookListNoBookNotice")
	</p>
	@* todo: add an "add books" button *@
}
else
{
	<table class="table table-striped table-bordered table-hover">
		<thead class="thead-light">
			<tr>
				<th scope="col" class="sort-th" @onclick="@(() => SortTable("Id"))">
					#
					<span class="fa @(SetSortIcon("Id"))"></span>
				</th>
				<th scope="col" class="sort-th" @onclick="@(() => SortTable("Language"))">
					@_uiLabels.GetLabel("bookListLanguageColumnHead")
					<span class="fa @(SetSortIcon("Language"))"></span>
				</th>
                <th scope="col" class="sort-th text-center" @onclick="@(() => SortTable("ISCOMPLETE"))">
					@_uiLabels.GetLabel("bookListCompletedColumnHead")
                    <span class="fa @(SetSortIcon("ISCOMPLETE"))"></span>
				</th>
				<th scope="col" class="sort-th" @onclick="@(() => SortTable("Title"))">
					@_uiLabels.GetLabel("bookListTitleColumnHead")
					<span class="fa @(SetSortIcon("Title"))"></span>
				</th>
                <th scope="col" class="sort-th text-center" @onclick="@(() => SortTable("PROGRESSPERCENT"))">
					@_uiLabels.GetLabel("bookListProgressColumnHead")
                    <span class="fa @(SetSortIcon("PROGRESSPERCENT"))"></span>
				</th>
				<th scope="col" class="sort-th text-end" @onclick="@(() => SortTable("TOTALWORDCOUNT"))">
					@_uiLabels.GetLabel("bookListTotalWordCountColumnHead")
					<span class="fa @(SetSortIcon("TOTALWORDCOUNT"))"></span>
				</th>
				<th scope="col" class="sort-th text-end" @onclick="@(() => SortTable("TOTALKNOWNPERCENT"))">
					@_uiLabels.GetLabel("bookListTotalKnownPercentColumnHead")
					<span class="fa @(SetSortIcon("TOTALKNOWNPERCENT"))"></span>
				</th>
				<th scope="col" class="sort-th text-end" @onclick="@(() => SortTable("DISTINCTWORDCOUNT"))">
					@_uiLabels.GetLabel("bookListDistinctWordCountColumnHead")
					<span class="fa @(SetSortIcon("DISTINCTWORDCOUNT"))"></span>
				</th>
				<th scope="col" class="sort-th text-end" @onclick="@(() => SortTable("DISTINCTKNOWNPERCENT"))">
					@_uiLabels.GetLabel("bookListDistinctKnownPercentColumnHead")
					<span class="fa @(SetSortIcon("DISTINCTKNOWNPERCENT"))"></span>
				</th>
			</tr>
		</thead>
		<tbody>
			@foreach(var bookUser in _bookUsers)
			{
                if (!IsVisibleInList(bookUser))
					continue;

				
				<tr>
                    <td scope="row">@bookUser.Book.Id</td>
					<td scope="row">@bookUser.LanguageUser.Language.Name</td>
					<td scope="row" class="text-center">
                    @if (StatisticsHelper.GetBookUserStat_bool(bookUser, AvailableBookUserStat.ISCOMPLETE))
					{
						<span class="completedMarker">&#x2713;</span>
					}
					</td>
                    <td scope="row"><a href="@GetBookLink(bookUser.Book)">@FormatTitle(bookUser.Book)</a></td>
                    <td scope="row" class="text-center">@FormatProgress(bookUser)</td>
                    <td scope="row" class="text-end">@FormatCount(bookUser, AvailableBookUserStat.TOTALWORDCOUNT)</td>
                    <td scope="row" class="text-end">@FormatCount(bookUser, AvailableBookUserStat.TOTALKNOWNPERCENT)</td>
                    <td scope="row" class="text-end">@FormatCount(bookUser, AvailableBookUserStat.DISTINCTWORDCOUNT)</td>
                    <td scope="row" class="text-end">@FormatCount(bookUser, AvailableBookUserStat.DISTINCTKNOWNPERCENT)</td>
				</tr>
			}
		</tbody>
	</table>
}

@code {
    private int _loggedInUserId = 1;  // todo: replace this with an actual logged in user
    private IQueryable<BookUser>? _bookUsers;

    #region sorting and filtering
    private string _filter;
    private bool _isSortedAscending;
    private string _activeSortColumn;
    Dictionary<string, Func<BookUser, object>> orderByFunctions =
        new Dictionary<string, Func<BookUser, object>>();
    #endregion

    private UILabels _uiLabels = Factory.GetUILabels(UILanguage.ENG_US);

    private bool _isError = false;
    private string _errorMessage = "";

    protected override void OnInitialized()
    {
        try
        {
            orderByFunctions.Add("Language", (x => x.LanguageUser.Language.Name));
            orderByFunctions.Add("Id", (x => x.Id));
            orderByFunctions.Add("Title", (x => x.Book.Title));
            orderByFunctions.Add("PROGRESSPERCENT", (x => Logic.StatisticsHelper.GetBookUserStat_int(x, AvailableBookUserStat.PROGRESSPERCENT)));
            orderByFunctions.Add("ISCOMPLETE", (x => Logic.StatisticsHelper.GetBookUserStat_bool(x, AvailableBookUserStat.ISCOMPLETE)));
            orderByFunctions.Add("TOTALWORDCOUNT", (x => Logic.StatisticsHelper.GetBookUserStat_int(x, AvailableBookUserStat.TOTALWORDCOUNT)));
            orderByFunctions.Add("TOTALKNOWNPERCENT", (x => Logic.StatisticsHelper.GetBookUserStat_int(x, AvailableBookUserStat.TOTALKNOWNPERCENT)));
            orderByFunctions.Add("DISTINCTWORDCOUNT", (x => Logic.StatisticsHelper.GetBookUserStat_int(x, AvailableBookUserStat.DISTINCTWORDCOUNT)));
            orderByFunctions.Add("DISTINCTKNOWNPERCENT", (x => Logic.StatisticsHelper.GetBookUserStat_int(x, AvailableBookUserStat.DISTINCTKNOWNPERCENT)));

            _bookUsers = FetchBookUsers();
        }
        catch(Exception ex)
        {
            _isError = true;
            _errorMessage = ex.Message;
        }
    }
    private IQueryable<BookUser> FetchBookUsers()
    {
        using (var context = DbFactory.CreateDbContext())
        {
            Expression<Func<BookUser, bool>> filter = (x => x.LanguageUser.UserId == _loggedInUserId);
            return context.BookUsers
                .Where(filter)
                .Include(bu => bu.LanguageUser).ThenInclude(lu => lu.Language)
                .Include(bu => bu.Book).ThenInclude(b => b.BookStats)
                .Include(bu => bu.BookUserStats)
                ;
        }
    }

    private string FormatTitle(Book book)
    {
        int maxCharsInBookListTitle = 60;
        string title = book.Title;
        if(title.Length > maxCharsInBookListTitle)
        {
            title = title.Substring(0, maxCharsInBookListTitle) + "...";
        }
        return title;
    }
    private string GetBookLink(Book book)
    {
        return $"/read/{book.Id}";
    }
    private bool IsVisibleInList(BookUser bookUser)
    {
        if (string.IsNullOrEmpty(_filter))
            return true;
        if (bookUser.LanguageUser.Language.Name.Contains(_filter, StringComparison.OrdinalIgnoreCase))
            return true;
        if (bookUser.Book.Title.Contains(_filter, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
    private void SortTable(string columnName)
    {
        if (_bookUsers is null) return;
        if (!orderByFunctions.ContainsKey(columnName)) return;

        if (columnName != _activeSortColumn)
        {
            _bookUsers = _bookUsers.OrderBy(orderByFunctions[columnName]).AsQueryable();
            _isSortedAscending = true;
            _activeSortColumn = columnName;

        }
        else
        {
            if (_isSortedAscending)
            {
                _bookUsers = _bookUsers.OrderByDescending(orderByFunctions[columnName]).AsQueryable();
            }
            else
            {
                _bookUsers = _bookUsers.OrderBy(orderByFunctions[columnName]).AsQueryable();
            }

            _isSortedAscending = !_isSortedAscending;
        }
    }
    private string SetSortIcon(string columnName)
    {
        if (_activeSortColumn != columnName)
        {
            return string.Empty;
        }
        if (_isSortedAscending)
        {
            return "fa-sort-up";
        }
        else
        {
            return "fa-sort-down";
        }
    }
    private string FormatCount(BookUser bookUser, AvailableBookUserStat key)
    {
        var existingStat = StatisticsHelper.GetBookUserStat_int(bookUser, key);
        return existingStat.ToString("N0");		
    }
    private string FormatProgress(BookUser bookUser)
    {
        var totalPages = StatisticsHelper.GetBookStat_int(bookUser.Book, AvailableBookStat.TOTALPAGES);
        var lastPageRead = StatisticsHelper.GetBookUserStat_int(bookUser, AvailableBookUserStat.LASTPAGEREAD);
        return $"{lastPageRead} / {totalPages}";
    }
    private IQueryable<BookUser> UpdateBookUserStats()
    {
        try
        {
            throw new NotImplementedException("need to redo the book stats query");
            using (var context = DbFactory.CreateDbContext())
            {
                //StatisticsHelper.UpdateAllBookStatsForUserId(context, _loggedInUserId);
                return FetchBookUsers();
            }
        }
        catch (Exception ex)
        {
            _isError = true;
            _errorMessage = ex.Message;
            return null;
        }
    }

}
