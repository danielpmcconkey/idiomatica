@using Model
@using Logic
@using Model.DAL
@using Logic.UILabels
@using System.Globalization

@page "/books-list"
@rendermode InteractiveServer

<link href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet">
<style>
	.sort-th {
		cursor: pointer;
	}

	.fa {
		float: right;
	}	
</style>

<div class="form-group mb-2">
	<input class="form-control" type="text" placeholder="@uILabels.GetLabel("bookListFormFilter")"
		   @bind="_filter"
		   @bind:event="oninput" />
</div>
@if (_books is null)
{
	<p>
		@uILabels.GetLabel("loading")red
	</p>
}
else if(!_books.Any())
{
	<p>
		@uILabels.GetLabel("bookListNoBookNotice")
	</p>
	@* todo: add an "add books" button *@
}
else
{
	<table class="table table-striped table-bordered table-hover">
		<thead class="thead-light">
			<tr>
				<th scope="col" class="sort-th" @onclick="@(() => SortTable("Id"))">
					#
					<span class="fa @(SetSortIcon("Id"))"></span>
				</th>
				<th scope="col" class="sort-th" @onclick="@(() => SortTable("Language"))">
					@uILabels.GetLabel("bookListLanguageColumnHead")
					<span class="fa @(SetSortIcon("Language"))"></span>
				</th>
				<th scope="col" class="sort-th text-center" @onclick="@(() => SortTable("IsComplete"))">
					@uILabels.GetLabel("bookListCompletedColumnHead")
					<span class="fa @(SetSortIcon("IsComplete"))"></span>
				</th>
				<th scope="col" class="sort-th" @onclick="@(() => SortTable("Title"))">
					@uILabels.GetLabel("bookListTitleColumnHead")
					<span class="fa @(SetSortIcon("Title"))"></span>
				</th>
				<th scope="col" class="sort-th text-center" @onclick="@(() => SortTable("Progress"))">
					@uILabels.GetLabel("bookListProgressColumnHead")
					<span class="fa @(SetSortIcon("Progress"))"></span>
				</th>
				<th scope="col" class="sort-th text-end" @onclick="@(() => SortTable("TOTALWORDCOUNT"))">
					@uILabels.GetLabel("bookListTotalWordCountColumnHead")
					<span class="fa @(SetSortIcon("TOTALWORDCOUNT"))"></span>
				</th>
				<th scope="col" class="sort-th text-end" @onclick="@(() => SortTable("TOTALKNOWNPERCENT"))">
					@uILabels.GetLabel("bookListTotalKnownPercentColumnHead")
					<span class="fa @(SetSortIcon("TOTALKNOWNPERCENT"))"></span>
				</th>
				<th scope="col" class="sort-th text-end" @onclick="@(() => SortTable("DISTINCTWORDCOUNT"))">
					@uILabels.GetLabel("bookListDistinctWordCountColumnHead")
					<span class="fa @(SetSortIcon("DISTINCTWORDCOUNT"))"></span>
				</th>
				<th scope="col" class="sort-th text-end" @onclick="@(() => SortTable("DISTINCTKNOWNPERCENT"))">
					@uILabels.GetLabel("bookListDistinctKnownPercentColumnHead")
					<span class="fa @(SetSortIcon("DISTINCTKNOWNPERCENT"))"></span>
				</th>
			</tr>
		</thead>
		<tbody>
			@foreach(var book in _books)
			{
				if (!IsVisibleInList(book))
					continue;

				
				<tr>
					<td scope="row">@book.Id</td>
					<td scope="row">@book.LanguageUser.Language.Name</td>
					<td scope="row" class="text-center">
					@if (book.IsComplete)
					{
						<span class="completedMarker">&#x2713;</span>
					}
					</td>
					<td scope="row"><a href="@GetBookLink(book)">@FormatTitle(book)</a></td>
					<td scope="row" class="text-center">@FormatProgress(book)</td>
					<td scope="row" class="text-end">@FormatCount(book, "TOTALWORDCOUNT")</td>
					<td scope="row" class="text-end">@FormatCount(book, "TOTALKNOWNPERCENT")</td>
					<td scope="row" class="text-end">@FormatCount(book, "DISTINCTWORDCOUNT")</td>
					<td scope="row" class="text-end">@FormatCount(book, "DISTINCTKNOWNPERCENT")</td>
				</tr>
			}
		</tbody>
	</table>
}

@code {

    private string _filter;
    private bool _isSortedAscending;
    private string _activeSortColumn;
    private List<Book>? _books;
    Dictionary<string, Func<Book, object>> orderByFunctions =
        new Dictionary<string, Func<Book, object>>();
    private UILabels uILabels = UILabelFactory.GetUILabels(UILanguage.ENG_US);


    protected override void OnInitialized()
    {
        orderByFunctions.Add("Language", (x => x.LanguageUser.Language.Name));
        orderByFunctions.Add("Id", (x => x.Id));
        orderByFunctions.Add("IsComplete", (x => x.IsComplete));
        orderByFunctions.Add("Title", (x => x.Title));
        orderByFunctions.Add("Progress", (x => GetBookProgressPercent(x)));
        orderByFunctions.Add("TOTALWORDCOUNT", (x => Logic.StatisticsHelper.GetBookStat_int(x, "TOTALWORDCOUNT")));
        orderByFunctions.Add("TOTALKNOWNPERCENT", (x => Logic.StatisticsHelper.GetBookStat_int(x, "TOTALKNOWNPERCENT")));
        orderByFunctions.Add("DISTINCTWORDCOUNT", (x => Logic.StatisticsHelper.GetBookStat_int(x, "DISTINCTWORDCOUNT")));
        orderByFunctions.Add("DISTINCTKNOWNPERCENT", (x => Logic.StatisticsHelper.GetBookStat_int(x, "DISTINCTKNOWNPERCENT")));

        _books = GetBooksForLoggedInUser();
    }

    private List<Book> GetBooksForLoggedInUser()
    {
        using (var context = new IdiomaticaContext())
        {
            return BookHelper.GetBooksForUserId(context, 1);
        }
    }
    private string FormatTitle(Book book)
    {
        int maxCharsInBookListTitle = 60;
        string title = book.Title;
        if(title.Length > maxCharsInBookListTitle)
        {
            title = title.Substring(0, maxCharsInBookListTitle) + "...";
        }
        return title;
    }
    private string GetBookLink(Book book)
    {
        return $"/read/{book.Id}";
    }
    private float GetBookProgressPercent(Book book)
    {
        if (book.TotalPages == 0) return 0f;
        return book.LastPageRead / (float)book.TotalPages;
    }
    private bool IsVisibleInList(Book book)
    {
        if (string.IsNullOrEmpty(_filter))
            return true;
        if (book.LanguageUser.Language.Name.Contains(_filter, StringComparison.OrdinalIgnoreCase))
            return true;
        if (book.Title.Contains(_filter, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
    private void SortTable(string columnName)
    {
        if (!orderByFunctions.ContainsKey(columnName)) return;

        if (columnName != _activeSortColumn)
        {
            _books = _books.OrderBy(orderByFunctions[columnName]).ToList();
            _isSortedAscending = true;
            _activeSortColumn = columnName;

        }
        else
        {
            if (_isSortedAscending)
            {
                _books = _books.OrderByDescending(orderByFunctions[columnName]).ToList();
            }
            else
            {
                _books = _books.OrderBy(orderByFunctions[columnName]).ToList();
            }

            _isSortedAscending = !_isSortedAscending;
        }
    }
    private string SetSortIcon(string columnName)
    {
        if (_activeSortColumn != columnName)
        {
            return string.Empty;
        }
        if (_isSortedAscending)
        {
            return "fa-sort-up";
        }
        else
        {
            return "fa-sort-down";
        }
    }
    private string FormatCount(Book book, string field)
    {
        var existingStat = StatisticsHelper.GetBookStat_int(book, field);        
        return existingStat.ToString("N0");		
	}
	private string FormatProgress(Book book)
	{
		if (book.TotalPages == 0) return "0";
		return $"{book.LastPageRead} / {book.TotalPages}";
	}

}
