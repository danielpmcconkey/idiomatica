@rendermode InteractiveServer
@inject UserService UserService
@inject IDbContextFactory<IdiomaticaContext> DbContextFactory
@inject ILogger<IdiomaticaLogger> Logger;
@using Logic.Services.API

<style>
    .visibleBlRow {
        display: block;
    }
    .invisibleBlRow {
        display: none;
    }

    .transport-control {
        font-size: 0.8rem;
    }

    
</style>

<ErrorAlert ErrorState="errorState"></ErrorAlert>
<AuthorizeView>
    <Authorized>

        
        
        @if (_isLoading)
        {
            <Button Color="ButtonColor.Primary" Loading="true" LoadingText="@UserService.GetUILabel("loading")" />
        }
        
        else
        {
                <div class="row">
                    @if (BookListDataPacket.BookListRows is not null && BookListDataPacket.BookListRows.Count > 0)
                    {
                        <p>
                            @UserService.GetUILabel("bookListNoBookNotice")
                        </p>
                    }
                </div>
                @if(IsBrowse == false)
                {
                    <div class="row">
                        <Button Color="ButtonColor.Primary" Type="ButtonType.Link" To="/Books/Browse">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-eye-fill" viewBox="0 0 16 16">
                                <path d="M10.5 8a2.5 2.5 0 1 1-5 0 2.5 2.5 0 0 1 5 0" />
                                <path d="M0 8s3-5.5 8-5.5S16 8 16 8s-3 5.5-8 5.5S0 8 0 8m8 3.5a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7" />
                            </svg>
                            @UserService.GetUILabel("bookListBrowseForBooks")
                        </Button>
                    </div>
                }


            <BookListTransport BookListDataPacket="BookListDataPacket"
                               GetNext="GetNext"
                               GetPrevious="GetPrevious"
                               FilterAndSort="FilterAndSort" />
            
            <div>
                @if (BookListDataPacket.BookListRows is not null && BookListDataPacket.BookListRows.Count > 0)
                {
                    @foreach (var row in BookListDataPacket.BookListRows)
                    {
                        <BookListRowView Row="row"
                                         OnArchiveAsync="OnArchiveBookUser"
                                         OnAddAsync="OnAddBookUser" />
                    }
                }

            </div>

        }
    </Authorized>
    <NotAuthorized>
        <p>@UserService.GetUILabel("notLoggedIn")</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    [Parameter] public bool IsBrowse { get; set;  }

    public ErrorState errorState = new ErrorState() { isError = false, errorMessage = "" };
    private bool _isLoading = false;
    private bool _isDataInitBookList = false;
    private User? _loggedInUser = null;
    private BookListDataPacket BookListDataPacket = new();
    const int LoadingDelayMiliseconds = 500;





    protected override async Task OnInitializedAsync()
    {

        try
        {
            if (_isDataInitBookList == false)
            {
                _isLoading = true;

                var t_delay = Task.Delay(LoadingDelayMiliseconds);
                var context = await DbContextFactory.CreateDbContextAsync();
                BookListDataPacket = new BookListDataPacket(context, IsBrowse);
                _loggedInUser = await UserService.GetLoggedInUserAsync(context);
                await ResetBookListAsync();
                _isDataInitBookList = true;
                await t_delay;
                _isLoading = false;
            }


        }
        catch (IdiomaticaException ex)
        {
            errorState.isError = true;
            errorState.errorMessage = UserService.GetUILabel("bookListInitializationError");
            errorState.code = ex.code;
            errorState.memberName = ex.memberName;
            errorState.sourceFilePath = ex.sourceFilePath;
            errorState.sourceLineNumber = ex.sourceLineNumber;
            StateHasChanged();
            return;
        }
        catch (Exception ex)
        {
            errorState.isError = true;
            errorState.errorMessage = UserService.GetUILabel("bookListInitializationError");
            StateHasChanged();
        }
    }

    private async Task ResetBookListAsync()
    {
        var context = await DbContextFactory.CreateDbContextAsync();
        if (_loggedInUser is null || _loggedInUser.Id is null) return;


        BookListDataPacket = await BookApi.BookListReadAsync(
            context, (int)_loggedInUser.Id, BookListDataPacket);

    }


    private async Task OnArchiveBookUser(int bookId)
    {
        try
        {
            _isLoading = true;
            var t_delay = Task.Delay(LoadingDelayMiliseconds);
            var context = await DbContextFactory.CreateDbContextAsync();
            if (_loggedInUser is null || _loggedInUser.Id is null)
            {
                ErrorHandler.LogAndThrow();
                return;
            }
            var bookUser = await BookUserApi.BookUserByBookIdAndUserIdReadAsync(context, bookId, (int)_loggedInUser.Id);
            if (bookUser is null || bookUser.Id is null || bookUser.Id < 1)
            {
                ErrorHandler.LogAndThrow();
                return;
            }
            await BookUserApi.BookUserArchiveAsync(context, (int)bookUser.Id);
            // now pull a fresh copy of the book list
            await ResetBookListAsync();
            await t_delay;
            _isLoading = false;

        }
        catch (IdiomaticaException ex)
        {
            errorState.isError = true;
            errorState.errorMessage = UserService.GetUILabel("bookListRemoveBookError");
            errorState.code = ex.code;
            errorState.memberName = ex.memberName;
            errorState.sourceFilePath = ex.sourceFilePath;
            errorState.sourceLineNumber = ex.sourceLineNumber;
            StateHasChanged();
            return;
        }
    }
    private async Task OnAddBookUser(int bookId)
    {
        try
        {
            _isLoading = true;
            var t_delay = Task.Delay(LoadingDelayMiliseconds);
            var context = await DbContextFactory.CreateDbContextAsync();
            if (_loggedInUser is null || _loggedInUser.Id is null)
            {
                ErrorHandler.LogAndThrow();
                return;
            }
            await BookUserApi.BookUserCreateAsync(context, bookId, (int)_loggedInUser.Id);
            await t_delay;
            _isLoading = false;

        }
        catch (IdiomaticaException ex)
        {
            errorState.isError = true;
            errorState.errorMessage = UserService.GetUILabel("bookListRemoveBookError");
            errorState.code = ex.code;
            errorState.memberName = ex.memberName;
            errorState.sourceFilePath = ex.sourceFilePath;
            errorState.sourceLineNumber = ex.sourceLineNumber;
            StateHasChanged();
            return;
        }
    }

    private async Task GetNext()
    {
        try
        {
            _isLoading = true;
            var t_delay = Task.Delay(LoadingDelayMiliseconds);
            await BookListRowsNext();
            await t_delay;
            _isLoading = false;

        }
        catch (IdiomaticaException ex)
        {
            errorState.isError = true;
            errorState.errorMessage = UserService.GetUILabel("bookListRefreshError");
            errorState.code = ex.code;
            errorState.memberName = ex.memberName;
            errorState.sourceFilePath = ex.sourceFilePath;
            errorState.sourceLineNumber = ex.sourceLineNumber;
            StateHasChanged();
            return;
        }
    }
    private async Task GetPrevious()
    {
        try
        {
            _isLoading = true;
            var t_delay = Task.Delay(LoadingDelayMiliseconds);
            await BookListRowsPrevious();
            await t_delay;
            _isLoading = false;

        }
        catch (IdiomaticaException ex)
        {
            errorState.isError = true;
            errorState.errorMessage = UserService.GetUILabel("bookListRefreshError");
            errorState.code = ex.code;
            errorState.memberName = ex.memberName;
            errorState.sourceFilePath = ex.sourceFilePath;
            errorState.sourceLineNumber = ex.sourceLineNumber;
            StateHasChanged();
            return;
        }
    }
    private async Task FilterAndSort()
    {
        try
        {
            _isLoading = true;
            var t_delay = Task.Delay(LoadingDelayMiliseconds);
            await BookListRowsFilterAndSort();
            await t_delay;
            _isLoading = false;

        }
        catch (IdiomaticaException ex)
        {
            errorState.isError = true;
            errorState.errorMessage = UserService.GetUILabel("bookListRefreshError");
            errorState.code = ex.code;
            StateHasChanged();
            return;
        }
    }
    private async Task BookListRowsNext()
    {
        BookListDataPacket.SkipRecords += BookListDataPacket.BookListRowsToDisplay;
        await ResetBookListAsync();
    }
    private async Task BookListRowsPrevious()
    {
        BookListDataPacket.SkipRecords -= BookListDataPacket.BookListRowsToDisplay;
        if (BookListDataPacket.SkipRecords < 0) BookListDataPacket.SkipRecords = 0;
        await ResetBookListAsync();
    }
    public async Task BookListRowsFilterAndSort()
    {
        BookListDataPacket.SkipRecords = 0;
        await ResetBookListAsync();
    }
}
