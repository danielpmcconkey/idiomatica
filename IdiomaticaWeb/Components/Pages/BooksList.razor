@page "/books-list"
@rendermode InteractiveServer
@inject BookService BookService;
@inject UserService UserService;

<link href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet">
<style>
    .sort-th {
        cursor: pointer;
    }
    .fa {
        float: right;
    }
</style>

<AuthorizeView>
    <Authorized>
        @if (_isError)
        {
            <div><h3>Error</h3><p>@_errorMessage</p></div>
        }
        <div class="form-group mb-2">
            <input class="form-control" type="text" placeholder="@UserService.GetUILabel("bookListFormFilter")"
                   @bind="_filter"
                   @bind:event="oninput" />
        </div>
        @if (_bookUsers is null)
        {
            <p>
                @UserService.GetUILabel("loading")red
            </p>
        }
        else if (!_bookUsers.Any())
        {
            <p>
                @UserService.GetUILabel("bookListNoBookNotice")
            </p>
            @* todo: add an "add books" button *@
        }
        else
        {

            <table class="table table-striped table-bordered table-hover">
                <thead class="thead-light">
                    <tr>
                        <th scope="col" class="sort-th" @onclick="@(() => SortTable("Id"))">
                            #
                            <span class="fa @(SetSortIcon("Id"))"></span>
                        </th>
                        <th scope="col" class="sort-th" @onclick="@(() => SortTable("Language"))">
                            @UserService.GetUILabel("bookListLanguageColumnHead")
                            <span class="fa @(SetSortIcon("Language"))"></span>
                        </th>
                        <th scope="col" class="sort-th text-center" @onclick="@(() => SortTable("ISCOMPLETE"))">
                            @UserService.GetUILabel("bookListCompletedColumnHead")
                            <span class="fa @(SetSortIcon("ISCOMPLETE"))"></span>
                        </th>
                        <th scope="col" class="sort-th" @onclick="@(() => SortTable("Title"))">
                            @UserService.GetUILabel("bookListTitleColumnHead")
                            <span class="fa @(SetSortIcon("Title"))"></span>
                        </th>
                        <th scope="col" class="sort-th text-center" @onclick="@(() => SortTable("PROGRESSPERCENT"))">
                            @UserService.GetUILabel("bookListProgressColumnHead")
                            <span class="fa @(SetSortIcon("PROGRESSPERCENT"))"></span>
                        </th>
                        <th scope="col" class="sort-th text-end" @onclick="@(() => SortTable("TOTALWORDCOUNT"))">
                            @UserService.GetUILabel("bookListTotalWordCountColumnHead")
                            <span class="fa @(SetSortIcon("TOTALWORDCOUNT"))"></span>
                        </th>
                        <th scope="col" class="sort-th text-end" @onclick="@(() => SortTable("TOTALKNOWNPERCENT"))">
                            @UserService.GetUILabel("bookListTotalKnownPercentColumnHead")
                            <span class="fa @(SetSortIcon("TOTALKNOWNPERCENT"))"></span>
                        </th>
                        <th scope="col" class="sort-th text-end" @onclick="@(() => SortTable("DISTINCTWORDCOUNT"))">
                            @UserService.GetUILabel("bookListDistinctWordCountColumnHead")
                            <span class="fa @(SetSortIcon("DISTINCTWORDCOUNT"))"></span>
                        </th>
                        <th scope="col" class="sort-th text-end" @onclick="@(() => SortTable("DISTINCTKNOWNPERCENT"))">
                            @UserService.GetUILabel("bookListDistinctKnownPercentColumnHead")
                            <span class="fa @(SetSortIcon("DISTINCTKNOWNPERCENT"))"></span>
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var bookUser in _bookUsers)
                    {
                        if (!IsVisibleInList(bookUser))
                            continue;

                        <tr>
                            <td scope="row">@bookUser.Book.Id</td>
                            <td scope="row">@bookUser.LanguageUser.Language.Name</td>
                            <td scope="row" class="text-center">
                                @if (GetBookUserStat_bool(bookUser, AvailableBookUserStat.ISCOMPLETE))
                                {
                                    <span class="completedMarker">&#x2713;</span>
                                }
                            </td>
                            <td scope="row"><a href="@GetBookLink(bookUser.Book)">@FormatTitle(bookUser.Book)</a></td>
                            <td scope="row" class="text-center">@FormatProgress(bookUser.BookId)</td>
                            <td scope="row" class="text-end">@FormatCount(bookUser.BookId, AvailableBookUserStat.TOTALWORDCOUNT)</td>
                            <td scope="row" class="text-end">@FormatCount(bookUser.BookId, AvailableBookUserStat.TOTALKNOWNPERCENT)</td>
                            <td scope="row" class="text-end">@FormatCount(bookUser.BookId, AvailableBookUserStat.DISTINCTWORDCOUNT)</td>
                            <td scope="row" class="text-end">@FormatCount(bookUser.BookId, AvailableBookUserStat.DISTINCTKNOWNPERCENT)</td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </Authorized>
    <NotAuthorized>
        <p>@UserService.GetUILabel("notLoggedIn")</p>
    </NotAuthorized>
</AuthorizeView>

@code {


    private List<BookUser>? _bookUsers;
    private List<BookUserStat>? _bookUserStats;

    private User _loggedInUser { get { return UserService.GetLoggedInUser(); } }

    #region sorting and filtering
    private string _filter;
    private bool _isSortedAscending;
    private string _activeSortColumn;
    Dictionary<string, Func<BookUser, object>> orderByFunctions =
        new Dictionary<string, Func<BookUser, object>>();
    #endregion

    

    private bool _isError = false;
    private string _errorMessage = "";


    protected override async Task OnInitializedAsync()
    {
        try
        {
            _bookUsers = BookService.FetchBookUsersWithoutStats((int)_loggedInUser.Id).ToList();
            _bookUserStats = BookService.FetchBookUserStats((int)_loggedInUser.Id).ToList();
        }
        catch (Exception ex)
        {
            _isError = true;
            _errorMessage = ex.Message;
        }
    }
    protected override void OnInitialized()
    {
        try
        {
            orderByFunctions.Add("Language", (x => x.LanguageUser.Language.Name));
            orderByFunctions.Add("Id", (x => x.Id));
            orderByFunctions.Add("Title", (x => x.Book.Title));
            orderByFunctions.Add("PROGRESSPERCENT", (x => GetBookUserStat_int(x, AvailableBookUserStat.PROGRESSPERCENT)));
            orderByFunctions.Add("ISCOMPLETE", (x => GetBookUserStat_bool(x, AvailableBookUserStat.ISCOMPLETE)));
            orderByFunctions.Add("TOTALWORDCOUNT", (x => GetBookUserStat_int(x, AvailableBookUserStat.TOTALWORDCOUNT)));
            orderByFunctions.Add("TOTALKNOWNPERCENT", (x => GetBookUserStat_int(x, AvailableBookUserStat.TOTALKNOWNPERCENT)));
            orderByFunctions.Add("DISTINCTWORDCOUNT", (x => GetBookUserStat_int(x, AvailableBookUserStat.DISTINCTWORDCOUNT)));
            orderByFunctions.Add("DISTINCTKNOWNPERCENT", (x => GetBookUserStat_int(x, AvailableBookUserStat.DISTINCTKNOWNPERCENT)));
        }
        catch (Exception ex)
        {
            _isError = true;
            _errorMessage = ex.Message;
        }
    }
    private string FormatTitle(Book book)
    {
        int maxCharsInBookListTitle = 60;
        string title = book.Title;
        if(title.Length > maxCharsInBookListTitle)
        {
            title = title.Substring(0, maxCharsInBookListTitle) + "...";
        }
        return title;
    }
    private string GetBookLink(Book book)
    {
        return $"/read/{book.Id}";
    }
    private bool IsVisibleInList(BookUser bookUser)
    {
        if (string.IsNullOrEmpty(_filter))
            return true;
        if (bookUser.LanguageUser.Language.Name.Contains(_filter, StringComparison.OrdinalIgnoreCase))
            return true;
        if (bookUser.Book.Title.Contains(_filter, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
    private void SortTable(string columnName)
    {
        if (_bookUsers is null) return;
        if (!orderByFunctions.ContainsKey(columnName)) return;

        if (columnName != _activeSortColumn)
        {
            _bookUsers = _bookUsers.OrderBy(orderByFunctions[columnName]).ToList();
            _isSortedAscending = true;
            _activeSortColumn = columnName;
        }
        else
        {
            if (_isSortedAscending)
            {
                _bookUsers = _bookUsers.OrderByDescending(orderByFunctions[columnName]).ToList();
            }
            else
            {
                _bookUsers = _bookUsers.OrderBy(orderByFunctions[columnName]).ToList();
            }
            _isSortedAscending = !_isSortedAscending;
        }
    }
    private string SetSortIcon(string columnName)
    {
        if (_activeSortColumn != columnName)
        {
            return string.Empty;
        }
        if (_isSortedAscending)
        {
            return "fa-sort-up";
        }
        else
        {
            return "fa-sort-down";
        }
    }
    private string FormatCount(int bookId, AvailableBookUserStat key)
    {
        var dbStat = _bookUserStats.Where(x => x.BookId == bookId && x.Key == key)
            .FirstOrDefault();
        if (dbStat is null) return "0";

        int outValInt = 0;
        if(int.TryParse(dbStat.Value, out outValInt) == false) return "0";
        return outValInt.ToString("N0");
    }
    private string FormatProgress(int bookId)
    {
        var dbStat = _bookUserStats.Where(x => x.BookId == bookId && x.Key == AvailableBookUserStat.PROGRESS)
            .FirstOrDefault();
        if (dbStat is null) return "0 / 0";

        return dbStat.Value;
    }
    private int GetBookUserStat_int(BookUser bookUser, AvailableBookUserStat stat)
    {
        var dbStat = _bookUserStats.Where(x => x.BookId == bookUser.BookId && x.Key == stat)
            .FirstOrDefault();
        if (dbStat is null) return 0;
        int outVal = 0;
        if (int.TryParse(dbStat.Value, out outVal) == false) return 0;
        return outVal;
    }
    private bool GetBookUserStat_bool(BookUser bookUser, AvailableBookUserStat stat)
    {
        var dbStat = _bookUserStats.Where(x => x.BookId == bookUser.BookId && x.Key == stat)
            .FirstOrDefault();
        if (dbStat is null) return false;
        bool outVal = false;
        if (bool.TryParse(dbStat.Value, out outVal) == false) return false;
        return outVal;
    }
}
