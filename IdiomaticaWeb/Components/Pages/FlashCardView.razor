@rendermode InteractiveServer
@inject UserService UserService;
@inject IDbContextFactory<IdiomaticaContext> DbContextFactory

    
<style>
    .flashCardVisible {
        display: block;
    }

    .flashCardInvisible {
        display: none;
    }
</style>
    
<ErrorAlert ErrorState="errorState"></ErrorAlert>


<Card Class="@CardCss">
    <CardBody>
        <CardTitle>@FlashCardService.CardTitle</CardTitle>
        <CardText>@FlashCardService.ExampleParagraph</CardText>
        @if(_isAnswerVisible == false)
        {
            <Button Color="ButtonColor.Primary" Type="ButtonType.Button" @onclick="OnShowAnswerClick">
                @UserService.GetUILabel("fcSeeAnswer")
            </Button>
        }
        
    </CardBody>
    @if (_isAnswerVisible)
    {
        <hr />
        @if(_isLoading)
        {
            <Button Color="ButtonColor.Primary" Size="Size.Small" Loading="true" LoadingText="@UserService.GetUILabel("loading")" />
        }
        else
        {
            <CardBody>
                <CardTitle>@FlashCardService.CardTranslation</CardTitle>
                <CardText>@FlashCardService.ParagraphTranslation</CardText>
            </CardBody>
        }
            
    }
    <CardFooter>
        @if (_isLoading)
        {
            <Button Color="ButtonColor.Primary" Size="Size.Small" Loading="true" LoadingText="@UserService.GetUILabel("loading")" />
        }
        else
        {
            <div class="container">
                <div class="row">
                    <div class="col-9">
                        <Button Color="ButtonColor.Warning" Type="ButtonType.Button" Outline="true"
                                @onclick="@(e => OnNextCardClickAsync(@AvailableFlashCardAttemptStatus.WRONG))">
                            @UserService.GetUILabel("fcWrong")
                        </Button>
                        <Button Color="ButtonColor.Warning" Type="ButtonType.Button" Outline="true"
                                @onclick="@(e => OnNextCardClickAsync(@AvailableFlashCardAttemptStatus.HARD))">
                            @UserService.GetUILabel("fcHard")
                        </Button>
                        <Button Color="ButtonColor.Success" Type="ButtonType.Button" Outline="true"
                                @onclick="@(e => OnNextCardClickAsync(@AvailableFlashCardAttemptStatus.GOOD))">
                            @UserService.GetUILabel("fcGood")
                        </Button>
                        <Button Color="ButtonColor.Success" Type="ButtonType.Button" Outline="true"
                                @onclick="@(e => OnNextCardClickAsync(@AvailableFlashCardAttemptStatus.EASY))">
                            @UserService.GetUILabel("fcEasy")
                        </Button>
                    </div>
                    <div class="col-3">
                        <Button Color="ButtonColor.Danger" Type="ButtonType.Button" Outline="false"
                                @onclick="@(e => OnNextCardClickAsync(@AvailableFlashCardAttemptStatus.STOP))">
                            @UserService.GetUILabel("fcStop")
                        </Button>
                    </div>
                </div>
            </div>
        }
    </CardFooter>
</Card>


@code {
    [Parameter] public FlashCardService FlashCardService { get; set; }
    [Parameter] public string? CardCss { get; set; }





    private bool _isLoading = false;
    private bool _isAnswerVisible = false;
    public ErrorState errorState = new ErrorState() { isError = false, errorMessage = "" };
    

    private async Task OnShowAnswerClick()
    {
        
        try
        {
            _isLoading = true;
            var t_delay = Task.Delay(FlashCardService.LoadingDelayMiliseconds);
            var context = await DbContextFactory.CreateDbContextAsync();
            _isAnswerVisible = true;
            await t_delay;
            _isLoading = false;
        }
        catch (IdiomaticaException ex)
        {
            errorState.isError = true;
            errorState.errorMessage = UserService.GetUILabel("flashCardReviewInitializationError");
            errorState.code = ex.code;
            StateHasChanged();
            return;
        }
        catch (Exception ex)
        {
            errorState.isError = true;
            errorState.errorMessage = UserService.GetUILabel("getLoggflashCardReviewInitializationErroredInUserError");
            StateHasChanged();
        }
    }
    
    public async Task OnNextCardClickAsync(AvailableFlashCardAttemptStatus previousCardsStatus)
    {
        try
        {
            _isLoading = true;
            var t_delay = Task.Delay(FlashCardService.LoadingDelayMiliseconds);
            var context = await DbContextFactory.CreateDbContextAsync();
            await FlashCardService.DeckAdvanceCardAsync(context, previousCardsStatus);
            _isAnswerVisible = false;
            await t_delay;
            _isLoading = false;
        }
        catch (IdiomaticaException ex)
        {
            errorState.isError = true;
            errorState.errorMessage = UserService.GetUILabel("flashCardReviewInitializationError");
            errorState.code = ex.code;
            StateHasChanged();
            return;
        }
        catch (Exception ex)
        {
            errorState.isError = true;
            errorState.errorMessage = UserService.GetUILabel("getLoggflashCardReviewInitializationErroredInUserError");
            StateHasChanged();
        }
    }
    
    
}
