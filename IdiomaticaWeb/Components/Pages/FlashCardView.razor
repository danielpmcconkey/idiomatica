@rendermode InteractiveServer
@inject UserService UserService;
@inject IDbContextFactory<IdiomaticaContext> DbContextFactory
@using Logic.Services.API;
@using Model.Enums;

    
<style>
    .flashCardVisible {
        display: block;
    }

    .flashCardInvisible {
        display: none;
    }
</style>
    
<ErrorAlert ErrorState="errorState"></ErrorAlert>


<Card Class="@CardCss">
    <CardBody>
        <CardTitle>@CardTitle</CardTitle>
        <CardText>@ExampleParagraph</CardText>
        @if(_isAnswerVisible == false)
        {
            <Button Color="ButtonColor.Primary" Type="ButtonType.Button" @onclick="OnShowAnswerClick">
                @UserService.GetUILabel("fcSeeAnswer")
            </Button>
        }
        
    </CardBody>
    @if (_isAnswerVisible)
    {
        <hr />
        @if(_isLoading)
        {
            <Button Color="ButtonColor.Primary" Size="Size.Small" Loading="true" LoadingText="@UserService.GetUILabel("loading")" />
        }
        else
        {

            @if (!string.IsNullOrEmpty(CustomTranslation))
            {
                <CardBody>

                    <CardTitle>@UserService.GetUILabel("fcCustomTranslationHead")</CardTitle>
                    <CardText>@CustomTranslation</CardText>
                    
                </CardBody>
            }

            @if (DefaultTranslations.Count > 0)
            {
                <CardBody>
                    <CardTitle>@UserService.GetUILabel("wordModalDefaultTranslations")</CardTitle>
                    <CardText>
                    <ul>
                        @foreach (var t in DefaultTranslations)
                        {
                            <li>
                                    <span class="m-1">@t.Translation</span>
                                @if(t.Verb is not null)
                                {
                                    <Button Color="ButtonColor.Primary"
                                            Type="ButtonType.Link"
                                            Size="Size.Small"
                                            Outline="true"
                                            @onclick="@(e => OnShowConjugationTableClick(t.Verb))">

                                            @UserService.GetUILabel("fcShowConjugationTable")
                                            
                                    </Button>
                                }
                                    
                            </li>
                        }
                    </ul>
                    </CardText>
                </CardBody>
            }


            <CardBody>
                <CardText>@ParagraphTranslation</CardText>
            </CardBody>
        }
            
    }
    <CardFooter>
        @if (_isLoading)
        {
            <Button Color="ButtonColor.Primary" Size="Size.Small" Loading="true" LoadingText="@UserService.GetUILabel("loading")" />
        }
        else
        {
            <div class="container">
                <div class="row">
                    <div class="col-9">
                        <Button Color="ButtonColor.Warning" Type="ButtonType.Button" Outline="true"
                                @onclick="@(e => OnNextCardClickAsync(@AvailableFlashCardAttemptStatus.WRONG))">
                            @UserService.GetUILabel("fcWrong")
                        </Button>
                        <Button Color="ButtonColor.Warning" Type="ButtonType.Button" Outline="true"
                                @onclick="@(e => OnNextCardClickAsync(@AvailableFlashCardAttemptStatus.HARD))">
                            @UserService.GetUILabel("fcHard")
                        </Button>
                        <Button Color="ButtonColor.Success" Type="ButtonType.Button" Outline="true"
                                @onclick="@(e => OnNextCardClickAsync(@AvailableFlashCardAttemptStatus.GOOD))">
                            @UserService.GetUILabel("fcGood")
                        </Button>
                        <Button Color="ButtonColor.Success" Type="ButtonType.Button" Outline="true"
                                @onclick="@(e => OnNextCardClickAsync(@AvailableFlashCardAttemptStatus.EASY))">
                            @UserService.GetUILabel("fcEasy")
                        </Button>
                    </div>
                    <div class="col-3">
                        <Button Color="ButtonColor.Danger" Type="ButtonType.Button" Outline="false"
                                @onclick="@(e => OnNextCardClickAsync(@AvailableFlashCardAttemptStatus.STOP))">
                            @UserService.GetUILabel("fcStop")
                        </Button>
                    </div>
                </div>
            </div>
        }
    </CardFooter>
</Card>

<ConjugationTable @ref="ConjugationTable"
    ShouldDisplay="_shouldShowConjugationTable" />



@code {
    [Parameter] public FlashCardDataPacket? FlashCardDataPacket { get; set; }
    [Parameter] public AvailableLanguageCode? UiLanguageCode { get; set; }
    [Parameter] public string? CardCss { get; set; }
    [Parameter] public EventCallback<int> ResetFormFunction { get; set; }

    private ConjugationTable ConjugationTable = default!;

    public string? ExampleParagraph { get; set; } = null;
    public string? ParagraphTranslation { get; set; } = null;
    public string? CardTitle { get; set; } = null;
    //public string? CardTranslation { get; set; } = null;
    public string? CustomTranslation { get; set; } = null;
    private List<WordTranslation> DefaultTranslations = [];


    private bool _isLoading = false;
    private bool _isAnswerVisible = false;
    public ErrorState errorState = new ErrorState() { isError = false, errorMessage = "" };
    private int LoadingDelayMiliseconds = 500;

    private bool _shouldShowConjugationTable = false;


    private Verb? _conjugationVerb;

    public void ResetCardProperties()
    {
        CardTitle = null;
        CustomTranslation = null;
        ExampleParagraph = null;
        ParagraphTranslation = null;
        _shouldShowConjugationTable = false;

        if (FlashCardDataPacket is null) return;
        if (FlashCardDataPacket.CurrentCard is null) return;
        if (UiLanguageCode is null) return;

        var context = DbContextFactory.CreateDbContext();
        var ppExample = ParagraphApi.ParagraphExamplePullRandomByFlashCardId(
            context, (Guid)FlashCardDataPacket.CurrentCard.Id, (AvailableLanguageCode)UiLanguageCode);
        ExampleParagraph = ppExample.example;
        ParagraphTranslation = ppExample.translation;

        if (FlashCardDataPacket.CurrentCard.WordUser is null) return;
        if (FlashCardDataPacket.CurrentCard.WordUser.Word is null) return;
        CardTitle = $"{FlashCardDataPacket.CurrentCard.WordUser.Word.TextLowerCase}";

        if (FlashCardDataPacket.CurrentCard.WordUser.Translation is null) return;
        CustomTranslation = FlashCardDataPacket.CurrentCard.WordUser.Translation;

        DefaultTranslations = WordApi.WordTranslationsReadByWordId(
            context, (Guid)FlashCardDataPacket.CurrentCard.WordUser.Word.Id);
    }
    private async Task OnShowAnswerClick()
    {
        try
        {
            _isLoading = true;
            var t_delay = Task.Delay(LoadingDelayMiliseconds);
            _isAnswerVisible = true;
            await t_delay;
            _isLoading = false;
        }
        catch (IdiomaticaException ex)
        {
            errorState.isError = true;
            errorState.errorMessage = UserService.GetUILabel("flashCardReviewInitializationError");
            errorState.code = ex.code;
            StateHasChanged();
            return;
        }
        catch (Exception ex)
        {
            errorState.isError = true;
            errorState.errorMessage = UserService.GetUILabel("getLoggflashCardReviewInitializationErroredInUserError");
            StateHasChanged();
        }
    }
    private void ProcessAndAdvance(AvailableFlashCardAttemptStatus previousCardsStatus)
    {
        var context = DbContextFactory.CreateDbContext();
        FlashCardDataPacket = OrchestrationApi.OrchestrateFlashCardDispositionAndAdvance(
            context, FlashCardDataPacket, previousCardsStatus);
        if (FlashCardDataPacket is null)
        {
            ErrorHandler.LogAndThrow();
            return;
        }

        ResetCardProperties();
    }
    public async Task OnNextCardClickAsync(AvailableFlashCardAttemptStatus previousCardsStatus)
    {
        try
        {
            _isLoading = true;
            var t_delay = Task.Delay(LoadingDelayMiliseconds);
            await Task.Run(() => ProcessAndAdvance(previousCardsStatus));
            if (FlashCardDataPacket is not null && 
                FlashCardDataPacket.CurrentCardPosition >= FlashCardDataPacket.Deck.Count)
            {
                await ResetFormFunction.InvokeAsync();
            }


            _isAnswerVisible = false;
            await t_delay;
            _isLoading = false;
        }
        catch (IdiomaticaException ex)
        {
            errorState.isError = true;
            errorState.errorMessage = UserService.GetUILabel("flashCardReviewInitializationError");
            errorState.code = ex.code;
            StateHasChanged();
            return;
        }
        catch (Exception ex)
        {
            errorState.isError = true;
            errorState.errorMessage = UserService.GetUILabel("getLoggflashCardReviewInitializationErroredInUserError");
            StateHasChanged();
        }
    }
    public async Task OnShowConjugationTableClick(Verb verb)
    {
        _shouldShowConjugationTable = true;
        await ConjugationTable.ResetConjugationAsync(verb);
    }

}
