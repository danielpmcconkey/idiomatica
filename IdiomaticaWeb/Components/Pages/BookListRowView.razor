@page "/BookListRowView"
@rendermode InteractiveServer
@inject UserService UserService;
@inject IDbContextFactory<IdiomaticaContext> DbContextFactory;
@inject ILogger<IdiomaticaLogger> Logger;
@inject ErrorHandler ErrorHandler;



@if (_isLoading)
{
    <Button Color="ButtonColor.Primary" Loading="true" LoadingText="@UserService.GetUILabel("loading")" />
}
else
{
    <div class="card mb-3">
        <div class="card-header">
            <div class="container">
                <div class="row">
                    <div class="col-1">
                        @if (OnFormatIsComplete(Row.IsComplete))
                        {
                            <span class="completedMarker">&#x2713;</span>
                        }
                    </div>
                    <div class="col-6">
                        <h5 class="card-title"># @Row.BookId @OnFormatTitle(Row.Title)</h5>
                    </div>
                    <div class="col-5">
                        <Button Color="ButtonColor.Primary"
                                Type="ButtonType.Link"
                                Size="Size.Small"
                                To="@OnGetBookLinkRead()">
                            @UserService.GetUILabel("bookListRead")
                        </Button>
                        <Button Color="ButtonColor.Warning"
                                TooltipTitle="@UserService.GetUILabel("bookListRemoveToolTip")"
                                Size="Size.Small"
                                @onclick="OnClickRemove">
                            @UserService.GetUILabel("bookListRemove")
                        </Button>
                        <Button Color="ButtonColor.Info"
                                Size="Size.Small"
                                @onclick="OnClickRefresh">
                            @UserService.GetUILabel("bookListRefreshBookStats")
                        </Button>
                    </div>
                </div>
            </div>
            
        
            
        </div>
    
        <div class="container card-body">
            <div class="row">
                <div class="col">
                    <p class="fs-6 mb-0">@UserService.GetUILabel("bookListLanguageColumnHead")</p>
                    <p class="fs-5 mt-0">@Row.LanguageName</p>
                </div>
                <div class="col">
                    <p class="fs-6 mb-0">@UserService.GetUILabel("bookListProgressColumnHead")</p>
                    <p class="fs-5 mt-0">
                        @if (_isLoading)
                        {
                            <Button Color="ButtonColor.Primary" Size="Size.Small" Loading="true" LoadingText="@UserService.GetUILabel("loading")" />
                        }
                        else
                        {
                            @OnFormatProgress(Row.Progress)
                        }
                    </p>
                </div>
                <div class="col">
                    <p class="fs-6 mb-0">@UserService.GetUILabel("bookListTotalWordCountColumnHead")</p>
                    <p class="fs-5 mt-0">@OnFormatCount(Row.TotalWordCount)</p>
                </div>
                <div class="col">
                    <p class="fs-6 mb-0">@UserService.GetUILabel("bookListDistinctWordCountColumnHead")</p>
                    <p class="fs-5 mt-0">@OnFormatCount(Row.DistinctWordCount)</p>
                </div>
                <div class="col">
                    <p class="fs-6 mb-0">@UserService.GetUILabel("bookListDistinctKnownPercentColumnHead")</p>
                    <p class="fs-5 mt-0">@OnFormatPercent(Row.DistinctKnownPercent)</p>
                </div>
            </div>
        
        </div>
        <div class="container card-footer">
            <div class="row">
                <div class="col">

                    @foreach (var tag in _tags)
                    {
                        <Badge class="m-1" IndicatorType="BadgeIndicatorType.RoundedPill">@tag.Tag</Badge>
                    }

                </div>
                <div class="col">
                    <form method="post" @onsubmit="OnAddTagAsync">
                        <div class="input-group">
                            <InputText @bind-Value="_addTagInput" />
                            <Button Color="ButtonColor.Secondary" 
                                Type="ButtonType.Submit" 
                                Size="Size.Small">
                                @UserService.GetUILabel("bookListAddTag")
                            </Button>
                        </div>
                    </form>
                </div>
            </div>
            
        </div>
    </div>
}






@code {
    [Parameter]
    public BookService BookService { get; set; }// = new BookService(Logger);
    [Parameter]
    public BookListRow Row { get; set; } = new BookListRow();
    [Parameter]
    public EventCallback<int> OnArchiveAsync { get; set; }

    public ErrorState errorState = new ErrorState() { isError = false, errorMessage = "" };
    private bool _isLoading = false;
    private List<BookTag> _tags = new List<BookTag>();
    private string? _addTagInput;
    private User? _loggedInUser;
    private int? _bookId;


    protected override async Task OnInitializedAsync()
    {
        try
        {
            _isLoading = true;
            var t_delay = Task.Delay(BookService.LoadingDelayMiliseconds);
            _bookId = Row.BookId;
            var context = await DbContextFactory.CreateDbContextAsync();
            _loggedInUser = await UserService.GetLoggedInUserAsync(context);
            if (_loggedInUser == null)
            {
                ErrorHandler.LogAndThrow(2450);
                return;
            }
            _tags = await BookService.BookTagsGetByBookIdAndUserId(context, _bookId, _loggedInUser.Id);
            await t_delay;
            _isLoading = false;
        }
        catch (IdiomaticaException ex)
        {
            errorState.isError = true;
            errorState.errorMessage = UserService.GetUILabel("readInitializationError");
            errorState.code = ex.code;
            StateHasChanged();
            return;
        }
        catch (Exception ex)
        {
            errorState.isError = true;
            errorState.errorMessage = UserService.GetUILabel("readInitializationError");
            StateHasChanged();
            return;
        }
    }

    private string OnFormatTitle(string? title)
    {
        try
        {
            if (title == null) return null;
            int maxCharsInBookListTitle = 60;
            if (title.Length > maxCharsInBookListTitle)
            {
                title = title.Substring(0, maxCharsInBookListTitle) + "...";
            }
            return title;
        }
        catch (IdiomaticaException ex)
        {
            errorState.isError = true;
            errorState.errorMessage = UserService.GetUILabel("bookListInitializationError");
            errorState.code = ex.code;
            StateHasChanged();
            return "";
        }
        catch (Exception ex)
        {
            errorState.isError = true;
            errorState.errorMessage = UserService.GetUILabel("bookListInitializationError");
            StateHasChanged();
            return string.Empty;
        }
    }
    private string OnGetBookLinkRead()
    {
        try
        {
            if (_bookId == null) return "";
            return $"/Book/{_bookId}/Read";
        }
        catch (IdiomaticaException ex)
        {
            errorState.isError = true;
            errorState.errorMessage = UserService.GetUILabel("bookListInitializationError");
            errorState.code = ex.code;
            StateHasChanged();
            return "";
        }
        catch (Exception ex)
        {
            errorState.isError = true;
            errorState.errorMessage = UserService.GetUILabel("bookListInitializationError");
            StateHasChanged();
            return string.Empty;
        }
    }
    private string OnGetBookLinkUpdate()
    {
        try
        {
            if (_bookId == null) return "";
            return $"/Book/{_bookId}/Update";
        }
        catch (IdiomaticaException ex)
        {
            errorState.isError = true;
            errorState.errorMessage = UserService.GetUILabel("bookListInitializationError");
            errorState.code = ex.code;
            StateHasChanged();
            return "";
        }
        catch (Exception ex)
        {
            errorState.isError = true;
            errorState.errorMessage = UserService.GetUILabel("bookListInitializationError");
            StateHasChanged();
            return string.Empty;
        }
    }
    private async Task OnClickRemove()
    {
        if (_bookId == null || _bookId < 1) return;
        await OnArchiveAsync.InvokeAsync((int)_bookId);
    }
    private string OnFormatCount(decimal? dbStat)
    {
        try
        {
            if (dbStat is null) return "0";
            var flooredVal = Math.Floor((decimal)dbStat);
            return flooredVal.ToString("N0");
        }
        catch (IdiomaticaException ex)
        {
            errorState.isError = true;
            errorState.errorMessage = UserService.GetUILabel("bookListInitializationError");
            errorState.code = ex.code;
            StateHasChanged();
            return "";
        }
        catch (Exception ex)
        {
            errorState.isError = true;
            errorState.errorMessage = UserService.GetUILabel("bookListInitializationError");
            StateHasChanged();
            return string.Empty;
        }
    }
    private string OnFormatPercent(decimal? dbStat)
    {
        const string percentFormat = "P2";
        try
        {
            if (dbStat is null) return (0M).ToString(percentFormat);
            return ((decimal)dbStat).ToString(percentFormat);
        }
        catch (IdiomaticaException ex)
        {
            errorState.isError = true;
            errorState.errorMessage = UserService.GetUILabel("bookListInitializationError");
            errorState.code = ex.code;
            StateHasChanged();
            return "";
        }
        catch (Exception ex)
        {
            errorState.isError = true;
            errorState.errorMessage = UserService.GetUILabel("bookListInitializationError");
            StateHasChanged();
            return string.Empty;
        }
    }
    private string OnFormatProgress(string? progress)
    {
        try
        {
            if (progress is null) return "0 / 0";
            return progress;
        }
        catch (IdiomaticaException ex)
        {
            errorState.isError = true;
            errorState.errorMessage = UserService.GetUILabel("bookListInitializationError");
            errorState.code = ex.code;
            StateHasChanged();
            return "";
        }
        catch (Exception ex)
        {
            errorState.isError = true;
            errorState.errorMessage = UserService.GetUILabel("bookListInitializationError");
            StateHasChanged();
            return string.Empty;
        }
    }
    private bool OnFormatIsComplete(string? isComplete)
    {
        try
        {

            if (isComplete is null) return false;
            bool outVal = false;
            if (bool.TryParse(isComplete, out outVal) == false) return false;
            return outVal;
        }
        catch (IdiomaticaException ex)
        {
            errorState.isError = true;
            errorState.errorMessage = UserService.GetUILabel("bookListInitializationError");
            errorState.code = ex.code;
            StateHasChanged();
            return false;
        }
        catch (Exception ex)
        {
            errorState.isError = true;
            errorState.errorMessage = UserService.GetUILabel("bookListInitializationError");
            StateHasChanged();
            return false;
        }
    }
    private async Task OnClickRefresh()
    {
        try
        {
            _isLoading = true;
            var t_delay = Task.Delay(BookService.LoadingDelayMiliseconds);
            var context = await DbContextFactory.CreateDbContextAsync();
            await BookService.BookUserUpdateStats(context, _bookId);
            await t_delay;
            _isLoading = false;
        }
        catch (IdiomaticaException ex)
        {
            errorState.isError = true;
            errorState.errorMessage = UserService.GetUILabel("bookListRefreshStatsError");
            errorState.code = ex.code;
            StateHasChanged();
            return;
        }
        catch (Exception ex)
        {
            errorState.isError = true;
            errorState.errorMessage = UserService.GetUILabel("bookListRefreshStatsError");
            StateHasChanged();
        }
    }
    private async Task OnAddTagAsync()
    {
        if (_loggedInUser == null || _loggedInUser.Id == null || _loggedInUser.Id < 1) return;
        if (_addTagInput == null) return;
        var sanitized = _addTagInput.Trim().ToLower();
        if (sanitized == string.Empty) return;

        try
        {
            _isLoading = true;
            var t_delay = Task.Delay(BookService.LoadingDelayMiliseconds);
            var context = await DbContextFactory.CreateDbContextAsync();
            await BookService.BookTagAdd(context, _bookId, _loggedInUser.Id, sanitized);
            await t_delay;
            _isLoading = false;
        }
        catch (IdiomaticaException ex)
        {
            errorState.isError = true;
            errorState.errorMessage = UserService.GetUILabel("bookListAddTagError");
            errorState.code = ex.code;
            StateHasChanged();
            return;
        }
    }
}
