@page "/ParagraphView"
@rendermode InteractiveServer
@inject UserService UserService;
@inject IDbContextFactory<IdiomaticaContext> DbContextFactory;
@inject ErrorHandler ErrorHandler;

@if(_isDataInit)
{
    <div class="row  g-2">
        <div class="col-1">
            <div class="">
                <Button class="btn-sm" Color="ButtonColor.Primary"
                        Outline="true" TooltipTitle="Translate paragraph"
                        @onclick="@(e => OnPpTranslateClick())">
                    &#182;
                </Button>
            </div>
        </div>
        <div class="col-10">
            <div>
                <p class="readParagraph">
                    @foreach (var sentence in _sentences)
                    {
                        foreach (var token in GetSentenceTokens(sentence))
                        {
                        
                            <span class="readToken @GetTokenClass(token)"
                                  data-toggle="tooltip"
                                  data-placement="top"
                                  title="@GetTokenTranslation(token)"
                                  @onclick="@(e => OnTokenClick(@token))">
                                @token.Display
                            </span>
                        }
                    }
                </p>
            </div>
        </div>
        <div class="col-1">
            <div class="">
                <Button class="btn-sm" Color="ButtonColor.Primary"
                        Outline="true" TooltipTitle="Translate paragraph"
                        @onclick="@(e => OnPpTranslateClick())">
                    &#182;
                </Button>
            </div>
        </div>
    </div>
}
else
{
    <Button Color="ButtonColor.Primary"
        Size="Size.Small" Loading="true" LoadingText="@UserService.GetUILabel("loading")" />
}
@code {
    [Parameter]
    public BookService BookService { get; set; }// = new BookService();
    [Parameter]
    public Paragraph ParagraphAndChildren { get; set; } = new Paragraph();
    [Parameter]
    public EventCallback<Token> OnShowWordModal { get; set; }
    [Parameter]
    public EventCallback<Paragraph> OnShowPpModal { get; set; }

    private bool _isDataInit = false;
    private bool _isLoadingLoggedInUser = false;
    private User? _loggedInUser = null;
    private List<Sentence> _sentences = new List<Sentence>();

    private async Task InitData()
    {
        if(ParagraphAndChildren.Id == null || ParagraphAndChildren.Id == 0)
        {
            ErrorHandler.LogAndThrow(2210);
            return;
        }
        var context = await DbContextFactory.CreateDbContextAsync();
        _sentences = ParagraphAndChildren.Sentences.OrderBy(s => s.Ordinal).ToList();
        _isDataInit = true;
    }
    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (_isDataInit == false) await InitData();
        }
        catch (Exception ex)
        {
            throw;
        }
    }

    private void OnTokenClick(Token token)
    {
        OnShowWordModal.InvokeAsync(token);
    }
    private void OnPpTranslateClick()
    {
        OnShowPpModal.InvokeAsync(ParagraphAndChildren);
    }
    public string GetTokenClass(Token token)
    {
        if (token.Word is null) return "statusUNKNOWN";
        if (!BookService.AllWordUsersInPage.ContainsKey(token.Word.TextLowerCase)) return "statusUNKNOWN";
        var wordUser = BookService.AllWordUsersInPage[token.Word.TextLowerCase];
        return $"status{wordUser.Status}";
    }
    private string GetTokenTranslation(Token token)
    {
        if (token.Word is null) return "";
        if (!BookService.AllWordUsersInPage.ContainsKey(token.Word.TextLowerCase)) return "";
        var wordUser = BookService.AllWordUsersInPage[token.Word.TextLowerCase];
        return wordUser.Translation;
    }
    private List<Token> GetSentenceTokens(Sentence sentence)
    {
        if (sentence.Id == null || sentence.Id == 0)
        {
            ErrorHandler.LogAndThrow(2230);
            return new List<Token>();
        }

        var context = DbContextFactory.CreateDbContext();
        sentence = BookService.SentenceFillChildObjects(context, sentence).Result;
        return sentence.Tokens;
        
    }
    
}
