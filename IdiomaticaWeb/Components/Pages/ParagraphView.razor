@page "/ParagraphView"
@rendermode InteractiveServer
@inject BookService BookService;
@inject UserService UserService;
@inject IDbContextFactory<IdiomaticaContext> DbContextFactory;

@if(_isDataInit)
{
    <div class="row  g-2">
        <div class="col-1">
            <div class="">
                <Button class="btn-sm" Color="ButtonColor.Primary"
                        Outline="true" TooltipTitle="Translate paragraph"
                        @onclick="@(e => OnPpTranslateClick())">
                    &#182;
                </Button>
            </div>
        </div>
        <div class="col-10">
            <div>
                <p class="readParagraph">
                    @foreach (var sentence in _sentences)
                    {
                        foreach (var token in GetSentenceTokens(sentence))
                        {
                        
                            <span class="readToken @GetTokenClass(token)"
                                  data-toggle="tooltip"
                                  data-placement="top"
                                  title="@GetTokenTranslation(token)"
                                  @onclick="@(e => OnTokenClick(@token))">
                                @token.Display
                            </span>
                        }
                    }
                </p>
            </div>
        </div>
        <div class="col-1">
            <div class="">
                <Button class="btn-sm" Color="ButtonColor.Primary"
                        Outline="true" TooltipTitle="Translate paragraph"
                        @onclick="@(e => OnPpTranslateClick())">
                    &#182;
                </Button>
            </div>
        </div>
    </div>
}
else
{
    <Button Color="ButtonColor.Primary"
        Size="Size.Small" Loading="true" LoadingText="@UserService.GetUILabel("loading")" />
}
@code {

    [Parameter]
    public Paragraph paragraphAndChildren { get; set; }
    [Parameter]
    public Dictionary<string, WordUser> allWordUsersInPage { get; set; }
    [Parameter]
    public EventCallback<Token> OnShowWordModal { get; set; }
    [Parameter]
    public EventCallback<Paragraph> OnShowPpModal { get; set; }
    /// <summary>
    /// The language the book was written in
    /// </summary>
    [Parameter]
    public Language Language { get; set; }
    private bool _isDataInit = false;
    private bool _isLoadingLoggedInUser = false;
    private User? _loggedInUser = null;
    private LanguageUser _languageUser
    {
        get // todo: move _languageUser population to an initializer
        {
            return BookService.LanguageUserFetch((int)_loggedInUser.Id, (int)Language.Id);
        }
    }
    private List<Sentence> _sentences = null;

    private async Task InitData()
    {
        if(paragraphAndChildren.Id == null || paragraphAndChildren.Id == 0)
        {
            ErrorHandler.LogAndThrow(2210);
            return;
        }
        var context = await DbContextFactory.CreateDbContextAsync();
        _loggedInUser = await UserService.GetLoggedInUserAsync();
        _sentences = paragraphAndChildren.Sentences.OrderBy(s => s.Ordinal).ToList();
        _isDataInit = true;
    }
    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (_isDataInit == false) await InitData();
        }
        catch (Exception ex)
        {
            throw;
        }
    }

    private void OnTokenClick(Token token)
    {
        OnShowWordModal.InvokeAsync(token);
    }
    private void OnPpTranslateClick()
    {
        OnShowPpModal.InvokeAsync(paragraphAndChildren);
    }
    public string GetTokenClass(Token token)
    {
        if (token.Word is null) return "statusUNKNOWN";
        if (!allWordUsersInPage.ContainsKey(token.Word.TextLowerCase)) return "statusUNKNOWN";
        var wordUser = allWordUsersInPage[token.Word.TextLowerCase];
        return $"status{wordUser.Status}";
    }
    private string GetTokenTranslation(Token token)
    {
        if (token.Word is null) return "";
        if (!allWordUsersInPage.ContainsKey(token.Word.TextLowerCase)) return "";
        var wordUser = allWordUsersInPage[token.Word.TextLowerCase];
        return wordUser.Translation;
    }
    private List<Token> GetSentenceTokens(Sentence sentence)
    {
        if (sentence.Tokens is null || sentence.Tokens.Count == 0)
        {
            if (sentence.Id == null || sentence.Id == 0)
            {
                ErrorHandler.LogAndThrow(2230);
                return new List<Token>();
            }
            var context = DbContextFactory.CreateDbContext();
            sentence.Tokens = DataCache.TokensBySentenceIdReadAsync((int)sentence.Id, context).Result;
        }
        // make sure each token has a word user and is in the dictionary
        // doing it here allows there to be continuity between the same word
        // in different paragraphs, so that, when you edit one, it updates
        // the other.
        foreach (var token in sentence.Tokens)
        {
            if (!allWordUsersInPage.ContainsKey(token.Word.TextLowerCase))
            {
                AddTokenToWordDict(token);
            }
        }
        return sentence.Tokens;
        
    }
    private void AddTokenToWordDict(Token token)
    {
        BookService.WordUserCreateAndSave(_languageUser, token.Word);
        // pull from the DB fresh
        var newWordUser = BookService.WordUserFetch(_languageUser, token.Word);
        // and add to the dict
        allWordUsersInPage[token.Word.TextLowerCase] = newWordUser;
    }
}
