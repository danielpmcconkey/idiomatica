@page "/ParagraphView"
@rendermode InteractiveServer
@inject BookService BookService;
@inject UserService UserService;


<div class="row  g-2">
    <div class="col-1">
        <div class="">
            <Button class="btn-sm" Color="ButtonColor.Primary"
                    Outline="true" TooltipTitle="Translate paragraph"
                    @onclick="@(e => OnPpTranslateClick())">
                &#182;
            </Button>
        </div>
    </div>
    <div class="col-10">
        <div>
            <p class="readParagraph">
                @foreach (var sentence in paragraph.Sentences.OrderBy(x => x.Ordinal))
                {
                    foreach (var token in GetSentenceTokens(sentence).OrderBy(x => x.Ordinal))
                    {
                        
                        <span class="readToken @GetTokenClass(token)"
                              data-toggle="tooltip"
                              data-placement="top"
                              title="@GetTokenTranslation(token)"
                              @onclick="@(e => OnTokenClick(@token))">
                            @token.Display
                        </span>
                    }
                }
            </p>
        </div>
    </div>
    <div class="col-1">
        <div class="">
            <Button class="btn-sm" Color="ButtonColor.Primary"
                    Outline="true" TooltipTitle="Translate paragraph"
                    @onclick="@(e => OnPpTranslateClick())">
                &#182;
            </Button>
        </div>
    </div>
</div>
@code {

    [Parameter]
    public Paragraph paragraph { get; set; }
    [Parameter]
    public Dictionary<string, WordUser> allWordUsersInLanguage { get; set; }
    [Parameter]
    public EventCallback<Token> OnShowWordModal { get; set; }
    [Parameter]
    public EventCallback<Paragraph> OnShowPpModal { get; set; }
    /// <summary>
    /// The language the book was written in
    /// </summary>
    [Parameter]
    public Language Language { get; set; }
    private User _loggedInUser
    {
        get // todo: move _loggedInUser population to an initializer
        {
            return UserService.GetLoggedInUser();
        }
    }
    private LanguageUser _languageUser
    {
        get // todo: move _languageUser population to an initializer
        {
            return BookService.LanguageUserFetch((int)_loggedInUser.Id, (int)Language.Id);
        }
    }
    private void OnTokenClick(Token token)
    {
        OnShowWordModal.InvokeAsync(token);
    }
    private void OnPpTranslateClick()
    {
        OnShowPpModal.InvokeAsync(paragraph);
    }
    public string GetTokenClass(Token token)
    {
        if (token.Word is null) return "statusUNKNOWN";
        if (!allWordUsersInLanguage.ContainsKey(token.Word.TextLowerCase)) return "statusUNKNOWN";
        var wordUser = allWordUsersInLanguage[token.Word.TextLowerCase];
        return $"status{wordUser.Status}";
    }
    private string GetTokenTranslation(Token token)
    {
        if (token.Word is null) return "";
        if (!allWordUsersInLanguage.ContainsKey(token.Word.TextLowerCase)) return "";
        var wordUser = allWordUsersInLanguage[token.Word.TextLowerCase];
        return wordUser.Translation;
    }
    private List<Token> GetSentenceTokens(Sentence sentence)
    {
        if (sentence.Tokens is not null && sentence.Tokens.Count > 0) 
        {
            // make sure each token has a word user and is in the dictionary
            // doing it here allows there to be continuity between the same word
            // in different paragraphs, so that, when you edit one, it updates
            // the other.
            foreach (var token in sentence.Tokens)
            {
                if (!allWordUsersInLanguage.ContainsKey(token.Word.TextLowerCase))
                {
                    AddTokenToWordDict(token);
                }
            }
            return sentence.Tokens;
        }
        // todo: log error. there should not be a sentence w/out tokens at this point
        return new List<Token>();
    }
    private void AddTokenToWordDict(Token token)
    {
        BookService.WordUserCreateAndSave(_languageUser, token.Word);
        // pull from the DB fresh
        var newWordUser = BookService.WordUserFetch(_languageUser, token.Word);
        // and add to the dict
        allWordUsersInLanguage[token.Word.TextLowerCase] = newWordUser;
    }
}
