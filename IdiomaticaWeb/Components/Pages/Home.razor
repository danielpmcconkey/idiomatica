@page "/"
@rendermode InteractiveServer
@inject UserService UserService;

<PageTitle>Blazor Bootstrap - WebAssembly Standalone App (.NET 8) - Starter Template</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new Blazor Bootstrap - Web App (.NET 8). 
<br /> 
<br />
Interactive render mode: Server 
<br />
Interactive location: Global

<ErrorAlert ErrorState="errorState"></ErrorAlert>
<div>
    <Button Color="ButtonColor.Primary" @onclick="OnAsyncTest">Async test</Button>
</div>


<AuthorizeView>
    <Authorized>
        <p>Hello, @context.User.Identity?.Name!</p>
    </Authorized>
    <NotAuthorized>
        <p>You're not authorized.</p>
    </NotAuthorized>
</AuthorizeView>


@foreach(var item in words)
{
    <Deleteme burp="@item" />
}




@code {
    private Modal modal;
    public ErrorState errorState = new ErrorState() { isError = false, errorMessage = "" };
    string[] longs = ["long 0", "long 1"];
    private string[] shorts = ["short 0", "short 1", "short 2", "short 3", "short 4"];
    private List<string> words = new List<string>();
    private bool _isDataInit = false;
    private bool _burp = false;

    private async Task InitData()
    {
        foreach (var item in longs) words.Add(item);

        // fin
        _isDataInit = true;
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (_isDataInit == false) await InitData();
        }
        catch (Exception ex)
        {
            errorState.isError = true;
            errorState.errorMessage = UserService.GetUILabel("readInitializationError");
            StateHasChanged();
            return;
        }
    }

    private async Task OnAsyncTest()
    {
        _burp = !_burp;
        words = new List<string>();
        if (_burp) foreach (var item in shorts) words.Add(item);
        else foreach (var item in longs) words.Add(item);

    }
    
}