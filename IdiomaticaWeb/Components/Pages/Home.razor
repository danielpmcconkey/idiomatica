@page "/"
@using Logic.Services.API
@rendermode InteractiveServer
@inject LoginService UserService;
@inject IDbContextFactory<IdiomaticaContext> DbContextFactory

<PageTitle>Blazor Bootstrap - WebAssembly Standalone App (.NET 8) - Starter Template</PageTitle>



<ErrorAlert ErrorState="errorState"></ErrorAlert>



<AuthorizeView>
    <Authorized>
        <p>Hello, @context.User.Identity?.Name!</p>
        <div class="container">
            <div class="row">
                <div class="col">
                    @if(_wordsReadCountList.Any())
                    {
                        <Card>
                            <CardBody>
                                <CardTitle>@_wordCountCardTitle</CardTitle>
                                <dl class="row">
                                    @foreach (var item in _wordsReadCountList)
                                    {
                            
                                        <dt class="col-sm-3">
                                            @item.language:</dt>
                                        <dd class="col-sm-9">
                                            @OnFormatCount(item.wordCount)
                                        </dd>

                                    }
                                </dl>
                                <Button Color="ButtonColor.Primary" To="/Books/Mine" Type="ButtonType.Link">
                                    @_bookshelfButtonText
                                </Button>
                            </CardBody>
                        </Card>
                    }
                </div
                <div class="col">
                    <PickBackUp UserId="@UserId" />
                </div>
            </div>

        </div>
        

    </Authorized>
    <NotAuthorized>
        <p>You're not authorized.</p>
    </NotAuthorized>
</AuthorizeView>







@code {
    public ErrorState errorState = new ErrorState() { isError = false, errorMessage = "" };
    private bool _isDataInit = false;
    private List<(string language, int wordCount)> _wordsReadCountList = new List<(string language, int wordCount)>();
    private string? _wordCountCardTitle;
    private string? _bookshelfButtonText;
    private Guid? UserId;

    private async Task InitData()
    {
        var loggedInUser = UserService.GetLoggedInUser(DbContextFactory);
        if (loggedInUser is null) return;
        UserId = loggedInUser.Id;
        _wordCountCardTitle = UserService.GetUILabel("homeWordCountsHeader");
        _wordsReadCountList = WordApi.WordsGetListOfReadCount(
            DbContextFactory, (Guid)loggedInUser.Id);

        _bookshelfButtonText = UserService.GetUILabel("homeBookshelfButtonText");

        // fin
        _isDataInit = true;
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (_isDataInit == false) await InitData();
        }
        catch (Exception ex)
        {
            errorState.isError = true;
            errorState.errorMessage = UserService.GetUILabel("homeInitializationError");
            StateHasChanged();
            return;
        }
    }
    private string OnFormatCount(int? stat)
    {
        try
        {
            if (stat is null) return "0";
            return ((int)stat).ToString("N0");
        }
        catch (IdiomaticaException ex)
        {
            errorState.isError = true;
            errorState.errorMessage = UserService.GetUILabel("homeInitializationError");
            errorState.code = ex.code;
            StateHasChanged();
            return "";
        }
        catch (Exception ex)
        {
            errorState.isError = true;
            errorState.errorMessage = UserService.GetUILabel("homeInitializationError");
            StateHasChanged();
            return string.Empty;
        }
    }
    
    
}