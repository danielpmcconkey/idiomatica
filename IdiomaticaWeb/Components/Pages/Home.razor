@page "/"
@rendermode InteractiveServer

<PageTitle>Blazor Bootstrap - WebAssembly Standalone App (.NET 8) - Starter Template</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new Blazor Bootstrap - Web App (.NET 8). 
<br /> 
<br />
Interactive render mode: Server 
<br />
Interactive location: Global


<div>
    <Button Color="ButtonColor.Primary" @onclick="OnAsyncTest">Async test</Button>
</div>

<AuthorizeView>
    <Authorized>
        <p>Hello, @context.User.Identity?.Name!</p>
    </Authorized>
    <NotAuthorized>
        <p>You're not authorized.</p>
    </NotAuthorized>
</AuthorizeView>

<p>@longs[0]</p>
<p>@longs[1]</p>
<p>@shorts[0]</p>
<p>@shorts[1]</p>
<p>@shorts[2]</p>
<p>@shorts[3]</p>
<p>@shorts[4]</p>


@code {
    private Modal modal;
    string[] longs = ["long 0", "long 1"];
    private string[] shorts = ["short 0", "short 1", "short 2", "short 3", "short 4"];



    private async Task OnAsyncTest()
    {
        // these will start immediately and run concurrently
        Task[] tasks = [
            ShortRunning(0),
            ShortRunning(1),
            ShortRunning(2)
        ];
        StateHasChanged();
        await Task.WhenAll(tasks);

        // this will start when all the 3 above finish
        await LongRunning(0);
        StateHasChanged();
        // this will start when the above finishes
        await ShortRunning(3);
        StateHasChanged();
        // this will start when the above finishes
        await ShortRunning(4);
        StateHasChanged();
        await LongRunning(1);
        StateHasChanged();
    }
    private async Task LongRunning(int ordinal)
    {
        longs[ordinal] = $"long running {ordinal} started at {GetTimeStamp()}. ";
        await SleepFor(3);
        longs[ordinal] += $"long running {ordinal} done at {GetTimeStamp()}";
    }
    private async Task ShortRunning(int ordinal)
    {
        shorts[ordinal] = $"short running {ordinal} started at {GetTimeStamp()}. ";
        await SleepFor(1);
        shorts[ordinal] += $"short running {ordinal} done at {GetTimeStamp()}";
    }
    private string GetTimeStamp()
    {
        return DateTime.Now.ToString("HH:mm:ss.ffffzzz");
    }
    private async Task SleepFor(int seconds)
    {
        await Task.Delay(seconds * 1000);
    }
}