@rendermode InteractiveServer
@inject UserService UserService;
@inject IDbContextFactory<IdiomaticaContext> DbContextFactory

<div class="container-fluid w-100 my-1 mx-0 px-0 transport-control">
    <div class="row align-items-center m-1 p-1">
        @* transport *@
        <div class="col-2 border rounded my-1 mx-0 p-2">
            @if (_isLoadingCounts)
            {
                <Button Color="ButtonColor.Primary" Size="Size.Small" Loading="true" LoadingText="@UserService.GetUILabel("loading")" />
            }
            else
            {
                <div class="text-center">
                    Showing @BookListFirstRowShown - @BookListLastRowShown of @BookListTotalRowsAtCurrentFilter
                </div>
                <div class="text-center">
                    <Button Color="ButtonColor.Primary"
                            Size="Size.Small"
                            @onclick="async () => await OnGetPrevious()">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-chevron-left" viewBox="0 0 16 16">
                            <path fill-rule="evenodd" d="M11.354 1.646a.5.5 0 0 1 0 .708L5.707 8l5.647 5.646a.5.5 0 0 1-.708.708l-6-6a.5.5 0 0 1 0-.708l6-6a.5.5 0 0 1 .708 0" />
                        </svg>
                    </Button>
                    <Button Color="ButtonColor.Primary"
                            Size="Size.Small"
                            @onclick="async () => await OnGetNext()">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-chevron-right" viewBox="0 0 16 16">
                            <path fill-rule="evenodd" d="M4.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L10.293 8 4.646 2.354a.5.5 0 0 1 0-.708" />
                        </svg>
                    </Button>
                </div>

            }
        </div>
        @* filter *@
        <div class="col-6 border rounded m-1 p-2">
            <div class="container m-0">
                <div class="row align-items-center">
                    <div class="col">
                        @if (_isLoadingFilterAndSort)
                        {
                            <Button Color="ButtonColor.Primary" Size="Size.Small" Loading="true" LoadingText="@UserService.GetUILabel("loading")" />
                        }
                        else
                        {
                            <div class="text-center">
                                @UserService.GetUILabel("bookListFormFilterLanguage")
                            </div>
                            <div class="text-center  align-items-center">
                                <InputSelect id="LanguageInput"
                                             @bind-Value="BookListDataPacket.LcFilterGuidString">
                                    <option selected disabled>@UserService.GetUILabel("bookListFormFilterNone")</option>
                                    @foreach (var (key, value) in BookListDataPacket.LanguageOptions)
                                    {
                                        <option value="@key">@value.Name</option>
                                    }
                                </InputSelect>
                            </div>
                        }
                    </div>

                    <div class="col">
                        @if (_isLoadingFilterAndSort)
                        {
                            <Button Color="ButtonColor.Primary" Size="Size.Small" Loading="true" LoadingText="@UserService.GetUILabel("loading")" />
                        }
                        else
                        {
                            <div class="text-center">
                                @UserService.GetUILabel("bookListFormFilterTitle")
                            </div>
                            <div class="text-center  align-items-center">
                                <InputText id="TitleInput"
                                           @bind-Value="BookListDataPacket.TitleFilter">
                                </InputText>
                            </div>
                        }
                    </div>

                    <div class="col">
                        @if (_isLoadingFilterAndSort)
                        {
                            <Button Color="ButtonColor.Primary" Size="Size.Small" Loading="true" LoadingText="@UserService.GetUILabel("loading")" />
                        }
                        else
                        {
                            <div class="text-center">
                                @UserService.GetUILabel("bookListFormFilterTags")
                            </div>
                            <div class="text-center  align-items-center">
                                <InputText id="TagsInput"
                                           @bind-Value="BookListDataPacket.TagsFilter">
                                </InputText>
                            </div>
                        }
                    </div>
                    <div class="col">
                        @if (_isLoadingFilterAndSort)
                        {
                            <Button Color="ButtonColor.Primary" Size="Size.Small" Loading="true" LoadingText="@UserService.GetUILabel("loading")" />
                        }
                        else
                        {
                            <div class="text-center">
                                <Button Color="ButtonColor.Primary"
                                        Size="Size.Small"
                                        @onclick="async () => await OnFilter()">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-filter" viewBox="0 0 16 16">
                                        <path d="M6 10.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 0 1h-3a.5.5 0 0 1-.5-.5m-2-3a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7a.5.5 0 0 1-.5-.5m-2-3a.5.5 0 0 1 .5-.5h11a.5.5 0 0 1 0 1h-11a.5.5 0 0 1-.5-.5" />
                                    </svg>
                                    Filter
                                </Button>
                            </div>
                        }
                    </div>
                </div>
            </div>

        </div>

        @* sort *@
        <div class="col-3 border rounded m-1 p-2">
            @if (_isLoadingFilterAndSort)
            {
                <Button Color="ButtonColor.Primary" Size="Size.Small" Loading="true" LoadingText="@UserService.GetUILabel("loading")" />
            }
            else
            {
                <div class="container m-0">
                    <div class="row align-items-center">
                        <div class="col text-center">
                            <InputSelect id="SortSelect"
                                         @bind-Value="BookListDataPacket.OrderBy">
                                <option selected disabled>@UserService.GetUILabel("bookListFormSortColumn")</option>
                                @foreach (var (key, value) in BookListDataPacket.OrderByOptions)
                                {
                                    <option value="@key">@UserService.GetUILabel("bookListFormSortColumn") @value</option>
                                }
                            </InputSelect>
                        </div>
                        <div class="col text-center">
                            <Button Color="ButtonColor.Primary"
                                    Size="Size.Small"
                                    TooltipTitle="@UserService.GetUILabel("bookListFormSortAscending")"
                                    @onclick="async () => await OnSort(true)">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-sort-alpha-down" viewBox="0 0 16 16">
                                    <path fill-rule="evenodd" d="M10.082 5.629 9.664 7H8.598l1.789-5.332h1.234L13.402 7h-1.12l-.419-1.371zm1.57-.785L11 2.687h-.047l-.652 2.157z" />
                                    <path d="M12.96 14H9.028v-.691l2.579-3.72v-.054H9.098v-.867h3.785v.691l-2.567 3.72v.054h2.645zM4.5 2.5a.5.5 0 0 0-1 0v9.793l-1.146-1.147a.5.5 0 0 0-.708.708l2 1.999.007.007a.497.497 0 0 0 .7-.006l2-2a.5.5 0 0 0-.707-.708L4.5 12.293z" />
                                </svg>
                            </Button>
                            <Button Color="ButtonColor.Primary"
                                    Size="Size.Small"
                                    TooltipTitle="@UserService.GetUILabel("bookListFormSortDescending")"
                                    @onclick="async () => await OnSort(false)">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-sort-alpha-up" viewBox="0 0 16 16">
                                    <path fill-rule="evenodd" d="M10.082 5.629 9.664 7H8.598l1.789-5.332h1.234L13.402 7h-1.12l-.419-1.371zm1.57-.785L11 2.687h-.047l-.652 2.157z" />
                                    <path d="M12.96 14H9.028v-.691l2.579-3.72v-.054H9.098v-.867h3.785v.691l-2.567 3.72v.054h2.645zm-8.46-.5a.5.5 0 0 1-1 0V3.707L2.354 4.854a.5.5 0 1 1-.708-.708l2-1.999.007-.007a.5.5 0 0 1 .7.006l2 2a.5.5 0 1 1-.707.708L4.5 3.707z" />
                                </svg>
                            </Button>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>
@code {
    [Parameter]
    public BookListDataPacket BookListDataPacket { get; set; } = new();
    [Parameter]
    public EventCallback<int> GetNext { get; set; }
    [Parameter]
    public EventCallback<int> GetPrevious { get; set; }
    [Parameter]
    public EventCallback<int> FilterAndSort { get; set; }
    private bool _isLoadingCounts = false;
    private bool _isLoadingFilterAndSort = false;
    const int LoadingDelayMiliseconds = 500;
    public long? BookListFirstRowShown
    {
        get
        {
            if (BookListDataPacket.BookListRows == null || 
                BookListDataPacket.BookListRows.Count < 1) return 0L;
            else return BookListDataPacket.BookListRows.Min(x => x.RowNumber);
        }
    }
    public long? BookListLastRowShown
    {
        get
        {
            if (BookListDataPacket.BookListRows == null || 
                BookListDataPacket.BookListRows.Count < 1) return 0L;
            else return BookListDataPacket.BookListRows.Max(x => x.RowNumber);
        }
    }
    public long? BookListTotalRowsAtCurrentFilter
    {
        get
        {
            return BookListDataPacket.BookListTotalRowsAtCurrentFilter;
        }
    }


    private async Task OnGetNext()
    {
        _isLoadingCounts = true;
        var t_delay = Task.Delay(LoadingDelayMiliseconds);
        await GetNext.InvokeAsync();
        await t_delay;
        StateHasChanged();
        _isLoadingCounts = false;
    }
    private async Task OnGetPrevious()
    {
        _isLoadingCounts = true;
        var t_delay = Task.Delay(LoadingDelayMiliseconds);
        await GetPrevious.InvokeAsync();
        await t_delay;
        StateHasChanged();
        _isLoadingCounts = false;
    }
    private async Task OnFilter()
    {
        _isLoadingCounts = true;
        var t_delay = Task.Delay(LoadingDelayMiliseconds);
        await FilterAndSort.InvokeAsync();
        await t_delay;
        StateHasChanged();
        _isLoadingCounts = false;
    }
    private async Task OnSort(bool isAscending)
    {
        _isLoadingCounts = true;
        var t_delay = Task.Delay(LoadingDelayMiliseconds);
        BookListDataPacket.ShouldSortAscending = isAscending;
        await FilterAndSort.InvokeAsync();
        await t_delay;
        StateHasChanged();
        _isLoadingCounts = false;
    }
}
