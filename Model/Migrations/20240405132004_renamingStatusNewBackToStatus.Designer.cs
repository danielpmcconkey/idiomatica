// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Model.DAL;

#nullable disable

namespace Model.Migrations
{
    [DbContext(typeof(IdiomaticaContext))]
    [Migration("20240405132004_renamingStatusNewBackToStatus")]
    partial class renamingStatusNewBackToStatus
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Model.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AudioBookmarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("AudioCurrentPos")
                        .HasColumnType("real");

                    b.Property<string>("AudioFilename")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CurrentPageID")
                        .HasColumnType("int");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<bool>("IsComplete")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageUserId")
                        .HasColumnType("int");

                    b.Property<int>("LastPageRead")
                        .HasColumnType("int");

                    b.Property<string>("SourceURI")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalPages")
                        .HasColumnType("int");

                    b.Property<int>("WordCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LanguageUserId");

                    b.ToTable("Book");
                });

            modelBuilder.Entity("Model.BookStat", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BookId", "Key");

                    b.ToTable("BookStat");
                });

            modelBuilder.Entity("Model.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CharacterSubstitutions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dict1URI")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dict2URI")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExceptionsSplitSentences")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GoogleTranslateURI")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParserType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegexpSplitSentences")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegexpWordCharacters")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RemoveSpaces")
                        .HasColumnType("bit");

                    b.Property<bool>("RightToLeft")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowRomanization")
                        .HasColumnType("bit");

                    b.Property<bool>("SplitEachChar")
                        .HasColumnType("bit");

                    b.Property<int>("TotalWordsRead")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Language");
                });

            modelBuilder.Entity("Model.LanguageUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int>("TotalWordsRead")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("LanguageUser");
                });

            modelBuilder.Entity("Model.Page", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("Ordinal")
                        .HasColumnType("int");

                    b.Property<string>("OriginalText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReadDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("Page");
                });

            modelBuilder.Entity("Model.Paragraph", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Ordinal")
                        .HasColumnType("int");

                    b.Property<int>("PageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PageId");

                    b.ToTable("Paragraph");
                });

            modelBuilder.Entity("Model.Sentence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Ordinal")
                        .HasColumnType("int");

                    b.Property<int>("ParagraphId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ParagraphId");

                    b.ToTable("Sentence");
                });

            modelBuilder.Entity("Model.Token", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Display")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Ordinal")
                        .HasColumnType("int");

                    b.Property<int>("SentenceId")
                        .HasColumnType("int");

                    b.Property<int>("WordId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SentenceId");

                    b.HasIndex("WordId");

                    b.ToTable("Token");
                });

            modelBuilder.Entity("Model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Model.UserSetting", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("KeyType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "Key");

                    b.ToTable("UserSetting");
                });

            modelBuilder.Entity("Model.Word", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("LanguageUserId")
                        .HasColumnType("int");

                    b.Property<string>("Romanization")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("StatusChanged")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TextLowerCase")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TokenCount")
                        .HasColumnType("int");

                    b.Property<string>("Translation")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LanguageUserId", "TextLowerCase")
                        .IsUnique();

                    b.ToTable("Word");
                });

            modelBuilder.Entity("WordParent", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("ParentWordId")
                        .HasColumnType("int");

                    b.HasKey("Id", "ParentWordId");

                    b.HasIndex("ParentWordId");

                    b.ToTable("WordParent");
                });

            modelBuilder.Entity("Model.Book", b =>
                {
                    b.HasOne("Model.LanguageUser", "LanguageUser")
                        .WithMany("Books")
                        .HasForeignKey("LanguageUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LanguageUser");
                });

            modelBuilder.Entity("Model.BookStat", b =>
                {
                    b.HasOne("Model.Book", "Book")
                        .WithMany("BookStats")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("Model.LanguageUser", b =>
                {
                    b.HasOne("Model.Language", "Language")
                        .WithMany("LanguageUsers")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.User", "User")
                        .WithMany("LanguageUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Model.Page", b =>
                {
                    b.HasOne("Model.Book", "Book")
                        .WithMany("Pages")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("Model.Paragraph", b =>
                {
                    b.HasOne("Model.Page", "Page")
                        .WithMany("Paragraphs")
                        .HasForeignKey("PageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Page");
                });

            modelBuilder.Entity("Model.Sentence", b =>
                {
                    b.HasOne("Model.Paragraph", "Paragraph")
                        .WithMany("Sentences")
                        .HasForeignKey("ParagraphId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Paragraph");
                });

            modelBuilder.Entity("Model.Token", b =>
                {
                    b.HasOne("Model.Sentence", "Sentence")
                        .WithMany("Tokens")
                        .HasForeignKey("SentenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Word", "Word")
                        .WithMany("Tokens")
                        .HasForeignKey("WordId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Sentence");

                    b.Navigation("Word");
                });

            modelBuilder.Entity("Model.UserSetting", b =>
                {
                    b.HasOne("Model.User", "User")
                        .WithMany("UserSettings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Model.Word", b =>
                {
                    b.HasOne("Model.LanguageUser", "LanguageUser")
                        .WithMany("Words")
                        .HasForeignKey("LanguageUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LanguageUser");
                });

            modelBuilder.Entity("WordParent", b =>
                {
                    b.HasOne("Model.Word", null)
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Word", null)
                        .WithMany()
                        .HasForeignKey("ParentWordId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Book", b =>
                {
                    b.Navigation("BookStats");

                    b.Navigation("Pages");
                });

            modelBuilder.Entity("Model.Language", b =>
                {
                    b.Navigation("LanguageUsers");
                });

            modelBuilder.Entity("Model.LanguageUser", b =>
                {
                    b.Navigation("Books");

                    b.Navigation("Words");
                });

            modelBuilder.Entity("Model.Page", b =>
                {
                    b.Navigation("Paragraphs");
                });

            modelBuilder.Entity("Model.Paragraph", b =>
                {
                    b.Navigation("Sentences");
                });

            modelBuilder.Entity("Model.Sentence", b =>
                {
                    b.Navigation("Tokens");
                });

            modelBuilder.Entity("Model.User", b =>
                {
                    b.Navigation("LanguageUsers");

                    b.Navigation("UserSettings");
                });

            modelBuilder.Entity("Model.Word", b =>
                {
                    b.Navigation("Tokens");
                });
#pragma warning restore 612, 618
        }
    }
}
